<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzengp的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lzengp.cn/"/>
  <updated>2018-09-30T02:15:16.337Z</updated>
  <id>http://lzengp.cn/</id>
  
  <author>
    <name>Longwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot学习笔记(二)</title>
    <link href="http://lzengp.cn/2018/09/28/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://lzengp.cn/2018/09/28/Springboot学习笔记(二)/</id>
    <published>2018-09-28T07:54:31.000Z</published>
    <updated>2018-09-30T02:15:16.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合springboot和mybatis"><a href="#整合springboot和mybatis" class="headerlink" title="整合springboot和mybatis"></a>整合springboot和mybatis</h2><blockquote><p>学完springboot的简单搭建，现在就学学怎么使用springboot整合mybatis操作mysql数据库<br>需要做的事：</p><ol><li>导入依赖</li><li>配置数据源</li><li>建立bean(实体类)，service(业务层)，mapper(持久层)，controller(控制层)</li><li>完善代码</li></ol></blockquote><a id="more"></a><p>先放出目录结构，把项目能跑起来，再解释遇到的问题<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm1.png" alt=""></p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>直接上完整的pom.xml，各个依赖的用途也在里面解释了，里面有热部署的依赖，后面再讲这个很好用的东西，先把项目走通再说<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包方式，有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 继承用的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring-Mybatis --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- MySQL --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span>      </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            </span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            </span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- springboot热部署 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#配置数据源，这里使用的dbcp的数据源</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springboot</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1997</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.max-idle=10</span><br><span class="line">spring.datasource.max-wait=10000</span><br><span class="line">spring.datasource.min-idle=5</span><br><span class="line">spring.datasource.initial-size=5</span><br><span class="line"></span><br><span class="line">#配置端口号</span><br><span class="line">server.port=8091</span><br><span class="line">server.session.timeout=10</span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br><span class="line"></span><br><span class="line">#mapper.xml文件地址</span><br><span class="line">mybatis.mapperLocations=classpath:mappers/*.xml</span><br></pre></td></tr></table></figure></p><h2 id="各层文件"><a href="#各层文件" class="headerlink" title="各层文件"></a>各层文件</h2><p>感觉写这些应该再熟悉不过了，不过作为开发者，还是最主要关注业务层，我一直都没写啥业务的。</p><h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><p>Message<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Date senddate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id == <span class="keyword">null</span> ? <span class="keyword">null</span> : id.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message == <span class="keyword">null</span> ? <span class="keyword">null</span> : message.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getSenddate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> senddate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSenddate</span><span class="params">(Date senddate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.senddate = senddate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>就写了一个查询所有的sql语句<br>MessageMapper.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.hnust.springboot.mapper.MessageMapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.hnust.springboot.bean.Message"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"message"</span> <span class="attr">property</span>=<span class="string">"message"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"senddate"</span> <span class="attr">property</span>=<span class="string">"senddate"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">         id, message, senddate</span><br><span class="line">    from message</span><br><span class="line">    order by senddate asc</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>MessageMapper<br>我在这里写了mybatis的注解，就先写出来了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//@Select("select * from message order by senddate asc")</span></span><br><span class="line">    <span class="function">List&lt;Message&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>MessageService接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.bean.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">getAllMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageServiceImpl接口实现类<br>其实发现@Autowired和@Resource区别不大<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.bean.Message;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.mapper.MessageMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"messageService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageMapper mapper; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">getAllMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">         List&lt;Message&gt; list = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">         list = mapper.selectAll();</span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>MessageController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.bean.Message;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.springboot.service.MessageService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/message"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">getAllMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//只打印最后三条数据</span></span><br><span class="line">        List&lt;Message&gt; list = messageService.getAllMessage();</span><br><span class="line">        <span class="keyword">int</span> num = list.size();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=list &amp;&amp; num&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num-<span class="number">3</span>; i++) &#123;</span><br><span class="line">                list.remove(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SpringbootApplication"><a href="#SpringbootApplication" class="headerlink" title="SpringbootApplication"></a>SpringbootApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages=<span class="string">"cn.hnust.springboot.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完善代码"><a href="#完善代码" class="headerlink" title="完善代码"></a>完善代码</h2><p>上面的已经是可以运行的代码的，不过还是需要注意一些的地方，就是注解@Mapper和@MapperScan(),在使用@MapperScan的时候一定需要<code>mapper.xml</code>,里面的内容是mapper接口的位置，同时需要在application.properties配置mapper.xml的位置<code>mybatis.mapperLocations=classpath:mappers/*.xml</code>。而在使用@Mapper时可以要也可以不需要，要的时候就不需要在mapper接口中写注解sql语句了，如果写就会报错；不要的时候一定要在mapper接口中写上注解sql语句。@Mapper和@MapperScan同时写也没问题，但必须需要mapper.xml。</p><h2 id="Some-problems"><a href="#Some-problems" class="headerlink" title="Some problems"></a>Some problems</h2><p>这些问题都是我在搭建过程中遇到的，当然已经全部解决了，现在就写出来，总结经验，如果遇到相同的错误就知道怎么解决了。</p><h3 id="First-question"><a href="#First-question" class="headerlink" title="First question"></a>First question</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/sbm2.png" alt=""><br>Description:<br>Field mapper in cn.hnust.springboot.service.MessageServiceImpl required a bean of type ‘cn.hnust.springboot.mapper.MessageMapper’ that could not be found.<br>Action:<br>Consider defining a bean of type ‘cn.hnust.springboot.mapper.MessageMapper’ in your configuration.<br>翻译过来就是：<br>cn.hnust.springboot.service.MessageServiceImpl中的字段映射器需要一个类型为“cn.hnust.springboot.mapper.MessageMapper”的bean，但找不到<br>考虑在配置中定义类型为“cn.hnust.springboot.mapper.MessageMapper”的bean。<br>也就是说mapper接口和mapper.xml出问题了，应该是扫描不到mapper.xml。<br>方案一：<br>在启动类添加@MapperScan(“mapper接口位置”)<br>方案二：<br>在mapper（dao层）加上@Mapper注解，否则提示找不到Mapper。</p><p>添加@Mapper注解再使用注解sql就可以不用xml文件了<br>添加了@Mapper注解之后这个接口再编译时会生成相应的实现类<br>需要注意的是：这个接口中不可以定义同名的方法，因为会生成相同的id，也就是说这个接口是不支持重载的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where name = #&#123;name&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">find</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 对应多个参数来说，每个参数之间需要加上@Param注解，</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 要不然会找不到对应的参数而报错</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function">@<span class="title">Select</span><span class="params">(<span class="string">"select * from user where name=#&#123;name&#125; and pwd=#&#123;pwd&#125;"</span>)</span></span></span><br><span class="line"><span class="function">User <span class="title">login</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String name,@<span class="title">Param</span><span class="params">(<span class="string">"pwd"</span>)</span>String pwd)</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Second-question"><a href="#Second-question" class="headerlink" title="Second question"></a>Second question</h3><p>其实第一个问题应该不算解决了，因为还没有导入相应的依赖，不然那两个注解会报错。<br>导入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring-Mybatis --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不过我导入依赖之后，再update maven project还是报错，本地仓库应该还没这个jar包，后来才发现我设置了不自动更新本地仓库。<br>首先Window–&gt;Preferences–&gt;Maven,不要勾上那个Do not automatically update dependencies from remote repositories（不自动更新远程存储库的依赖项）<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm3.png" alt=""></p><h2 id="全局搜索与热部署"><a href="#全局搜索与热部署" class="headerlink" title="全局搜索与热部署"></a>全局搜索与热部署</h2><h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><p>有时需要找一个类，但项目的文件实在很多，这时就可以使用全局搜索；<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm4.png" alt=""><br><img src="http://pc57xo61v.bkt.clouddn.com/sbm5.png" alt=""></p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>热部署就是保存之后，自动帮你部署，相当于自动帮你运行启动类，感觉这样省了不少时间，之前因为修了一小部分就需要点到启动类中，然后右键，再run as，每次修改都要这样操作，的确麻烦。<br>导入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot热部署 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后update maven  project<br>设置<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm6.png" alt=""><br>这样就ok了，然后Debug As运行，一定要这样运行才可以，然后它会提示进入了debug模式，注意不要管它，进入正常模式操作，别关了debug模式（左上的红色正方形按钮），不然不能实现热部署的<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm7.png" alt=""><br>在你修改代码然后Ctrl+S之后就会看到console打印出运行日志，热部署也算弄好了。</p><h2 id="其他的测试"><a href="#其他的测试" class="headerlink" title="其他的测试"></a>其他的测试</h2><p>经测试发现，如果mapper接口和mapper配置文件放在同一个包内，在使用@MapperScan时指定这个包时可以不在application配置<code>mybatis.mapperLocations=classpath:mappers/*.xml</code><br><img src="http://pc57xo61v.bkt.clouddn.com/sbm8.png" alt=""><br>如果分开就需要配置地址<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm9.png" alt=""><br>扫描多个包<code>@MapperScan({&quot;cn.hnust.springboot.*.mapper&quot;,&quot;n.hnust.springboot.*.mapper&quot;})</code></p><p>@Mapper的注解sql图解<br><img src="http://pc57xo61v.bkt.clouddn.com/sbm10.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整合springboot和mybatis&quot;&gt;&lt;a href=&quot;#整合springboot和mybatis&quot; class=&quot;headerlink&quot; title=&quot;整合springboot和mybatis&quot;&gt;&lt;/a&gt;整合springboot和mybatis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学完springboot的简单搭建，现在就学学怎么使用springboot整合mybatis操作mysql数据库&lt;br&gt;需要做的事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入依赖&lt;/li&gt;
&lt;li&gt;配置数据源&lt;/li&gt;
&lt;li&gt;建立bean(实体类)，service(业务层)，mapper(持久层)，controller(控制层)&lt;/li&gt;
&lt;li&gt;完善代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springboot，mybatis注解" scheme="http://lzengp.cn/tags/springboot%EF%BC%8Cmybatis%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Springboot学习笔记(一)</title>
    <link href="http://lzengp.cn/2018/09/28/Springboot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/09/28/Springboot学习笔记(一)/</id>
    <published>2018-09-28T07:54:31.000Z</published>
    <updated>2018-09-29T09:58:32.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是spring-boot"><a href="#什么是spring-boot" class="headerlink" title="什么是spring boot"></a>什么是spring boot</h2><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（不知道这样比喻是否合适）。<br>SpringBoot的主要优点：</p><ol><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ol></blockquote><a id="more"></a><p>使用spring boot有什么好处<br>其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？<br>配置web.xml，加载spring和spring mvc<br>配置数据库连接、配置spring事务<br>配置加载配置文件的读取，开启注解<br>配置日志文件<br>…<br>配置完成之后部署tomcat 调试<br>…<br>现在非常流行微服务，如果我这个项目仅仅只是需要发送一个邮件，如果我的项目仅仅是生产一个积分；我都需要这样折腾一遍!<br>但是如果使用spring boot呢？<br>很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务！</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>使用SPRING INITIALIZR创建一个简单的springboot项目<br>SPRING INITIALIZR<a href="http://start.spring.io/" target="_blank" rel="noopener">网址</a><br><img src="http://pc57xo61v.bkt.clouddn.com/springboot1.png" alt=""><br>生成zip文件之后解压文件，使用eclipse导入maven项目<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot2.png" alt=""><br><img src="http://pc57xo61v.bkt.clouddn.com/springboot3.png" alt=""><br><img src="http://pc57xo61v.bkt.clouddn.com/springboot4.png" alt=""><br>点击finish,可以看到生成的目录结构<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot5.png" alt=""><br>框架算是搭建好了，然后测试一下<br>注意测试代码要在SpringbootApplication子目录下，不然扫描不到<br>SpringbootApplication所在的包：<code>package cn.hnust.springboot;</code><br>HelloController所在的包：<code>package cn.hnust.springboot.controller;</code><br>要想SpringbootApplication扫描的到，controller层只能在cn.hnust.springboot的下一层<br>自己所建的目录结构<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot6.png" alt=""><br>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/helloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行SpringbootApplication<br>输入<code>http://localhost:8080/helloController/hello</code>,<strong>注意没有项目名</strong>，然后在浏览器查看<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot7.png" alt=""><br><img src="http://pc57xo61v.bkt.clouddn.com/springboot8.png" alt=""><br>至此一个简单的springboot web应用就创建好了。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h3><p>刚开始创建的时候，发现在项目里面包名写错了，然后就rename改了下，结果刚改完就弹出一个错误<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot9.png" alt=""><br>运行之后<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot10.png" alt=""><br>一看就知道修改名字之后工作环境下的目录文件名没改，然后去工作环境目录class里面改了名字，还是一样，除非改成原来的包名。然后我就删项目再重新导入了。跟我玩，我就差删库跑路了。<br>建议:起名字时最好认真点，别打错了，按理来说rename应该很好用的，但在这里好像不管用，可能是因为用SPRING INITIALIZR创建的，Artifact已经写好了。<br>所以我应该不算解决了这个问题，我只是重新部署了下项目。</p><h3 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h3><p>这个问题的确有点坑，我还查了好久，其实就是一个很小很小的问题。<br>先看图<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot11.png" alt=""><br>报错404，服务器是连接到了，但资源找不到，首先分析是不是地址写错了，映射地址缺胳膊少腿（缺胳膊少腿这事以前经常有），仔细看了看controller层的映射地址和访问地址明明是没错的。</p><p>或许现在我一看就看出来了，我多写了一个项目名，然后就找不到资源，报404的错误。但当时并不知道，因为在访问ssm框架搭建的项目都是需要添加项目名的。我说说我当时的解决步骤吧。<br>首先，肯定是上网查为什么springboot建的项目报404的错误<br>然后看到了一系列的方案<br><strong>方案一：springboot的启动的Application必须放在controller类的外面，要不然扫描不到</strong><br>这个我应该满足了，但访问依旧是404，我还特意把它们放同一目录下看会怎么样，当然404了。</p><p><strong>方案二：把本地的repository的spring boot重新删除后，再update project，后重新运行application，能正常访问啦</strong><br>在本地仓库查找到boot文件夹，然后删除，再 maven update（记住要勾选Force Update of Snapshots/Releases），又下载了一个boot文件夹，然后访问，继续404，错误也不在这里。</p><p><strong>方案三 在启动类的上面添加@ComponentScan(basePackages = {“com.dai.<em>“})</em></strong></p><p>方案三和方案一其实是一类的，也是说路径问题，要在application的子路径下，然后还看到一个说把@RestController改成@Controller和@ResponseBody，不过我觉得这不是一样的吗？@RestController不就等于@Controller和@ResponseBody吗？返回的结果都是一个字符类型的，而不是一个页面。</p><p>就在无望的时候，突然看到别人教程里面好像访问地址有点短呀，它直接访问了两个@RequestMapping里面的映射地址，没有写项目名。然后自己把项目名删了果然好了。</p><p><strong>Springboot访问路径是不需要添加项目名的</strong></p><h3 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h3><p>在application.properties设置新的端口号和一个名字，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service.port=8091</span><br><span class="line">boot.name=\u9F99\u4F1F</span><br></pre></td></tr></table></figure></p><p>然后发现名字不是汉字，不过在controller层获取name然后打印在页面上是汉字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;boot.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name+<span class="string">"你好  world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://pc57xo61v.bkt.clouddn.com/springboot12.png" alt=""><br>只是显示在properties文件中有问题，那肯定是这个文件的编码问题,然后把这个文件编码格式设置成utf-8，的确可以在这个application.properties中输入汉字了，不过，报存的时候就弹出下图这样的<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot13.png" alt=""><br>翻译下一就是：<br>保存无法完成.try文件 - &gt;另存为…如果问题仍然存在<br>原因：<br>某些字符无法使用“ISO-8859-1”字符编码进行映射。 更改编码或删除“ISO-8859-1”字符编码不支持的字符<br>当时就直接选择了Save as UTF-8<br>结果，结果当然出问题了<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot14.png" alt=""><br>访问的页面出现了乱码，查看开发者工具发现是返回utf-8的。但为什么就是乱码，是不是没有在pom.xml中配置让页面支持utf-8？查了资料说要修改pom.xml文件，我也觉得是这样的，应该是没导入相应的包没有设置输出的格式编码。然后从网上copy放到pom里面来就出问题了，哪怕maven update也无济于事。然后赶快crtl+z，可是为时已晚，都复原了还是出错</p><p>出错原因：<br>Project build error: ‘dependencies.dependency.version’ for org.springframework.boot:spring-boot-starter:jar is missing.<br>jar包丢失，这就有点意思了，本地仓库的boot明明在，怎么就jar丢失了，然后删除boot文件夹再重新update一下。可还是一样的，</p><p>方案一：<br>第一步：选中项目，先project–&gt;clean一下。<br>第二步：选中项目，Debug AS——&gt;maven clean<br>第三部：加载pom里的jar,Debug AS——&gt;maven INSTALL</p><p>还是不行，没办法只有掏出终极武器—删项目，再重新导入。（这样做真的有点无赖，但真的是被逼无赖的，找错误的时间足够我搭建几个项目了）</p><p>现在分析来看：在eclipse中编写properties文件时，如果直接写中文，它不会自动转换成ASCII编码，在浏览器中就会显示为乱码。ISO-8859-1的编码是没问题的，这开始测试过了，所以在用@Value注解接收的时候也是ISO-8859-1格式的，然后修改了它的编码格式，而@Value还是把它当成ISO-8859-1格式，结果打印出来的就是乱码。<br>然后就在添加这句话<code>@RequestMapping(value=&quot;/helloController&quot;,produces=&quot;text/plain;charset=UTF-8&quot;)</code>发现乱码还是在，字体还变小了。</p><p>解决方案：<br>那么在eclipse下如何解决Spring boot读取配置文件出现中文乱码的问题呢？<br>分析是eclipse中的属性文件都会转化为ascii码再去被解析。<br>百度搜索，eclipse中怎么设置properties文件的Transparent native-to-ascii conversion<br>得到：<br>在eclipse中安装properties插件PropertiesEditor及设置(附图)，ASCII码转换成中文<br><code>http://www.cnblogs.com/zdz8207/p/java-eclipse-properties.html</code><br>推荐使用里面的离线安装。在线安装方便但很慢。<br>安装完成PropertiesEditor 插件后，使用该编辑器重新编辑属性文件中的中文，注意这句话，即将原文件的中文删除后，在重新输入一遍，然后重新运行程序，<br>发现读取的中文配置文件不是乱码了。</p><p>安装成功之后properties的图标会变成P<br><img src="http://pc57xo61v.bkt.clouddn.com/springboot15.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是spring-boot&quot;&gt;&lt;a href=&quot;#什么是spring-boot&quot; class=&quot;headerlink&quot; title=&quot;什么是spring boot&quot;&gt;&lt;/a&gt;什么是spring boot&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（不知道这样比喻是否合适）。&lt;br&gt;SpringBoot的主要优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为所有Spring开发者更快的入门&lt;/li&gt;
&lt;li&gt;开箱即用，提供各种默认配置来简化项目配置&lt;/li&gt;
&lt;li&gt;内嵌式容器简化Web项目&lt;/li&gt;
&lt;li&gt;没有冗余代码生成和XML配置的要求&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="http://lzengp.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>（转）Java实现多线程的方式</title>
    <link href="http://lzengp.cn/2018/09/28/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://lzengp.cn/2018/09/28/Java多线程实现的四种方式/</id>
    <published>2018-09-28T02:48:55.000Z</published>
    <updated>2018-09-28T02:53:32.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四种方式"><a href="#四种方式" class="headerlink" title="四种方式"></a>四种方式</h2><blockquote><p>Java多线程实现方式主要有四种：继承Thread类、实现Runnable接口、实现Callable接口通过FutureTask包装器来创建Thread线程、使用ExecutorService、Callable、Future实现有返回结果的多线程。</p></blockquote><p>其中前两种方式线程执行完后都没有返回值，后两种是带返回值的。</p><a id="more"></a><h2 id="继承Thread类创建线程"><a href="#继承Thread类创建线程" class="headerlink" title="继承Thread类创建线程"></a>继承Thread类创建线程</h2><p>Thread类本质上是实现了Runnable接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">　　 System.out.println(<span class="string">"MyThread.run()"</span>);  </span><br><span class="line">　　&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">MyThread myThread1 = <span class="keyword">new</span> MyThread();  </span><br><span class="line">MyThread myThread2 = <span class="keyword">new</span> MyThread();  </span><br><span class="line">myThread1.start();  </span><br><span class="line">myThread2.start();</span><br></pre></td></tr></table></figure></p><h2 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h2><p>如果自己的类已经extends另一个类，就无法直接extends Thread，此时，可以实现一个Runnable接口，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">OtherClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">　　 System.out.println(<span class="string">"MyThread.run()"</span>);  </span><br><span class="line">　　&#125;  </span><br><span class="line">&#125; </span><br><span class="line">``` </span><br><span class="line">为了启动MyThread，需要首先实例化一个Thread，并传入自己的MyThread实例：</span><br><span class="line">```java</span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();  </span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);  </span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></p><p>事实上，当传入一个Runnable target参数给Thread后，Thread的run()方法就会调用target.run()，参考JDK源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">　　<span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;  </span><br><span class="line">　　 target.run();  </span><br><span class="line">　　&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现Callable接口通过FutureTask包装器来创建Thread线程"><a href="#实现Callable接口通过FutureTask包装器来创建Thread线程" class="headerlink" title="实现Callable接口通过FutureTask包装器来创建Thread线程"></a>实现Callable接口通过FutureTask包装器来创建Thread线程</h2><p>Callable接口（也只有一个方法）定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;   </span>&#123; </span><br><span class="line">  V call（） <span class="keyword">throws</span> Exception;   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeCallable</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">OtherClass</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Callable&lt;V&gt; oneCallable = <span class="keyword">new</span> SomeCallable&lt;V&gt;();   </span><br><span class="line"><span class="comment">//由Callable&lt;Integer&gt;创建一个FutureTask&lt;Integer&gt;对象：   </span></span><br><span class="line">FutureTask&lt;V&gt; oneTask = <span class="keyword">new</span> FutureTask&lt;V&gt;(oneCallable);   </span><br><span class="line"><span class="comment">//注释：FutureTask&lt;Integer&gt;是一个包装器，它通过接受Callable&lt;Integer&gt;来创建，它同时实现了Future和Runnable接口。 </span></span><br><span class="line">  <span class="comment">//由FutureTask&lt;Integer&gt;创建一个Thread对象：   </span></span><br><span class="line">Thread oneThread = <span class="keyword">new</span> Thread(oneTask);   </span><br><span class="line">oneThread.start();   </span><br><span class="line"><span class="comment">//至此，一个线程就创建完成了。</span></span><br></pre></td></tr></table></figure><h2 id="使用ExecutorService、Callable、Future实现有返回结果的线程"><a href="#使用ExecutorService、Callable、Future实现有返回结果的线程" class="headerlink" title="使用ExecutorService、Callable、Future实现有返回结果的线程"></a>使用ExecutorService、Callable、Future实现有返回结果的线程</h2><p>ExecutorService、Callable、Future三个接口实际上都是属于Executor框架。返回结果的线程是在JDK1.5中引入的新特征，有了这种特征就不需要再为了得到返回值而大费周折了。而且自己实现了也可能漏洞百出。</p><p>可返回值的任务必须实现Callable接口。类似的，无返回值的任务必须实现Runnable接口。</p><p>执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。</p><p>注意：get方法是阻塞的，即：线程无返回结果，get方法会一直等待。</p><p>再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。</p><p>下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 有返回值的线程 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException,  </span></span><br><span class="line"><span class="function">    InterruptedException </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"----程序开始运行----"</span>);  </span><br><span class="line">   Date date1 = <span class="keyword">new</span> Date();  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">int</span> taskSize = <span class="number">5</span>;  </span><br><span class="line">   <span class="comment">// 创建一个线程池  </span></span><br><span class="line">   ExecutorService pool = Executors.newFixedThreadPool(taskSize);  </span><br><span class="line">   <span class="comment">// 创建多个有返回值的任务  </span></span><br><span class="line">   List&lt;Future&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&gt;();  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;  </span><br><span class="line">    Callable c = <span class="keyword">new</span> MyCallable(i + <span class="string">" "</span>);  </span><br><span class="line">    <span class="comment">// 执行任务并获取Future对象  </span></span><br><span class="line">    Future f = pool.submit(c);  </span><br><span class="line">    <span class="comment">// System.out.println("&gt;&gt;&gt;" + f.get().toString());  </span></span><br><span class="line">    list.add(f);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 关闭线程池  </span></span><br><span class="line">   pool.shutdown();  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 获取所有并发任务的运行结果  </span></span><br><span class="line">   <span class="keyword">for</span> (Future f : list) &#123;  </span><br><span class="line">    <span class="comment">// 从Future对象上获取任务的返回值，并输出到控制台  </span></span><br><span class="line">    System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   Date date2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   System.out.println(<span class="string">"----程序结束运行----，程序运行时间【"</span>  </span><br><span class="line">     + (date2.getTime() - date1.getTime()) + <span class="string">"毫秒】"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> String taskNum;  </span><br><span class="line">  </span><br><span class="line">MyCallable(String taskNum) &#123;  </span><br><span class="line">   <span class="keyword">this</span>.taskNum = taskNum;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);  </span><br><span class="line">   Date dateTmp1 = <span class="keyword">new</span> Date();  </span><br><span class="line">   Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">   Date dateTmp2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   <span class="keyword">long</span> time = dateTmp2.getTime() - dateTmp1.getTime();  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);  </span><br><span class="line">   <span class="keyword">return</span> taskNum + <span class="string">"任务返回运行结果,当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：<br>上述代码中Executors类，提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。<br>public static ExecutorService newFixedThreadPool(int nThreads)<br>创建固定数目线程的线程池。<br>public static ExecutorService newCachedThreadPool()<br>创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。<br>public static ExecutorService newSingleThreadExecutor()<br>创建一个单线程化的Executor。<br>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)<br>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p><p>ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</p><p><a href="https://www.cnblogs.com/felixzh/p/6036074.html" target="_blank" rel="noopener">原文博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四种方式&quot;&gt;&lt;a href=&quot;#四种方式&quot; class=&quot;headerlink&quot; title=&quot;四种方式&quot;&gt;&lt;/a&gt;四种方式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java多线程实现方式主要有四种：继承Thread类、实现Runnable接口、实现Callable接口通过FutureTask包装器来创建Thread线程、使用ExecutorService、Callable、Future实现有返回结果的多线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中前两种方式线程执行完后都没有返回值，后两种是带返回值的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven+SSM整合</title>
    <link href="http://lzengp.cn/2018/09/21/Maven+SSM%E6%95%B4%E5%90%88/"/>
    <id>http://lzengp.cn/2018/09/21/Maven+SSM整合/</id>
    <published>2018-09-21T05:11:25.000Z</published>
    <updated>2018-09-27T07:08:57.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><blockquote><p>第一步:整合dao层<br>mybatis和spring整合，通过spring管理mapper接口<br>使用mapper的扫描器自动扫描mapper接口在spring中进行注册<br>第二步：整合service层<br>通过spring管理service接口<br>使用配置方式或注解方式将service接口配置在spring配置文件中<br>实现事务控制<br>第三步：整合springmvc<br>由于springmvc是spring的模块，不需要整合</p></blockquote><a id="more"></a><p><img src="http://pc57xo61v.bkt.clouddn.com/ssm1.png" alt=""></p><p><strong>文末尾会有GitHub地址，本项目代码都在里面</strong></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="需要的包"><a href="#需要的包" class="headerlink" title="需要的包"></a>需要的包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/ssm3.png" alt=""><br><img src="http://pc57xo61v.bkt.clouddn.com/ssm4.png" alt=""><br>由于是maven项目，是不需要导入jar到项目中的，但也需要这些jar包找到他们对应的pom.xml,后面会贴出完整的pom.xml代码</p><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/ssm2.png" alt=""><br>maven项目会自动帮你建好三个文件夹，src/main/java，src/main/resources，src/test/java,项目主要代码写在src/main/java里面，src/main/resources主要放置配置文件，src/test/java是放test测试代码。</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主要的配置文件有pom.xml、jdbc.properties、log4j.properties、spring-mvc.xml、spring-mybatis.xml,先直接贴出来<br><a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>,这里可以下载pom文件和jar包</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javen.maven02<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>maven01 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mybatis版本号 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">&lt;version&gt;3.1.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- spring核心包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mybatis核心包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">         <span class="comment">&lt;!-- mybatis/spring包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- 导入java ee jar 包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- 导入Mysql数据库链接jar包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- JSTL标签类 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 日志文件管理包 --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log start --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">        <span class="comment">&lt;!-- 格式化对象，方便输出日志 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 映入JSON --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 上传组件包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--发送邮件组件包 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span> &gt;</span>com.sun.mail <span class="tag">&lt;/<span class="name">groupId</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span> &gt;</span>javax.mail <span class="tag">&lt;/<span class="name">artifactId</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span> &gt;</span>1.5.4 <span class="tag">&lt;/<span class="name">version</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>m-ssm<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.8.v20150217<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">httpConnector</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">httpConnector</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stopKey</span>&gt;</span>shutdown<span class="tag">&lt;/<span class="name">stopKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stopPort</span>&gt;</span>9966<span class="tag">&lt;/<span class="name">stopPort</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/m_ssm</span><br><span class="line">username=root</span><br><span class="line">password=1997</span><br><span class="line">#定义初始连接数  </span><br><span class="line">initialSize=0  </span><br><span class="line">#定义最大连接数  </span><br><span class="line">maxActive=20  </span><br><span class="line">#定义最大空闲  </span><br><span class="line">maxIdle=20  </span><br><span class="line">#定义最小空闲  </span><br><span class="line">minIdle=1  </span><br><span class="line">#定义最长等待时间  </span><br><span class="line">maxWait=60000</span><br></pre></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,Console,File  </span><br><span class="line">#定义日志输出目的地为控制台  </span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.Console.Target=System.out  </span><br><span class="line">#可以灵活地指定日志输出格式，下面一行是指定具体的格式  </span><br><span class="line">log4j.appender.Console.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  </span><br><span class="line">  </span><br><span class="line">#文件大小到达指定尺寸的时候产生一个新的文件  </span><br><span class="line">log4j.appender.File = org.apache.log4j.RollingFileAppender  </span><br><span class="line">#指定输出目录  </span><br><span class="line">log4j.appender.File.File = logs/ssm.log  </span><br><span class="line">#定义文件最大大小  </span><br><span class="line">log4j.appender.File.MaxFileSize = 10MB  </span><br><span class="line"># 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志  </span><br><span class="line">log4j.appender.File.Threshold = ALL  </span><br><span class="line">log4j.appender.File.layout = org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.File.layout.ConversionPattern =[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n</span><br></pre></td></tr></table></figure><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust.controller"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源处理  css js imgs</span></span><br><span class="line"><span class="comment">    &lt;mvc:resources location="/resources/**" mapping="/resources"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span> /&gt;</span> <span class="comment">&lt;!-- JSON转换器 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>    </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 启用是为了推迟文件解析，以便捕获文件大小异常 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置ViewResolver,可用多个ViewResolver,使用order属性排序,InternalResourceViewResolver 放在最后--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 告诉视图解析器，返回的类型为json格式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"htm"</span> <span class="attr">value</span>=<span class="string">"text/htm"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- ModelAndView里的数据变成JSON --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJacksonJsonView"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- session拦截器 </span></span><br><span class="line"><span class="comment">    &lt;mvc:interceptors&gt;</span></span><br><span class="line"><span class="comment">    &lt;mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">&lt;mvc:mapping path="/**" /&gt;</span></span><br><span class="line"><span class="comment">&lt;bean class="cn.hnust.controller.UserInterceptor" /&gt;</span></span><br><span class="line"><span class="comment">&lt;/mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">&lt;/mvc:interceptors&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc    </span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/hnust/mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.hnust.mapper"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件写好之后，项目算是完成了大半了，之后的和mybatis，springmvc学习笔记中的操作一样了，我就写个简单的保存和查询信息，然后完成注册和登录功能。</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>设计数据库，id，username，password就三个<br>再写好界面index.jsp、regist.jsp、success.jsp<br><img src="http://pc57xo61v.bkt.clouddn.com/ssm5.png" alt=""><br>我把界面全都放在WEB-INF下面，这样也算是给它们加第一层锁，不过这样在访问的时候需要在controller里面写一段代码。<br>index.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;登录界面&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/success"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;用户名：&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="username"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;密码：&lt;/td&gt;&lt;td&gt;&lt;input type="password" name="password"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="submit" value="登录"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath &#125;/user/registPage"&gt;注册&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>regist.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/user/regist"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;用户名：&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="username"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;密码：&lt;/td&gt;&lt;td&gt;&lt;input type="password" name="password"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="submit" value="注册"/&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>success.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;登录成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;登录成功&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>页面很简单，注册输入用户名和密码，然后传到后台，存储在数据库中，登录时就从数据库中查询，验证成功之后再跳到成功页面。在页面中action和链接都是用springmvc的@RequestMapping标签完成映射，而不是直接用jsp页面，如果直接用jsp页面作为链接，是找不到页面的，因为页面放在WEB-INF下面，直接访问是访问不到的。</p><h3 id="src-main-java部分"><a href="#src-main-java部分" class="headerlink" title="src/main/java部分"></a>src/main/java部分</h3><p>首先是po层<br>user实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再就是mapper层<br>UserMapper映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.hnust.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.hnust.po.User"</span>&gt;</span></span><br><span class="line"> insert into m_user(username,password)</span><br><span class="line">    values (#&#123;userName&#125;, #&#123;password,&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span>  <span class="attr">resultType</span>=<span class="string">"cn.hnust.po.User"</span>&gt;</span></span><br><span class="line"> select * from m_user where username=#&#123;username&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>UserMapper接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过名字查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>service层<br>因为比较简单，所以基本没啥要写的，就调用持久层接口的方法<br>UserService接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserServiceImpl实现接口类<br>通过@Service(“userService”)注解在spring中注册，如果直接写@Service，它的name就默认类名首字母小写，也就是userServiceImpl。</p><ol><li>为什么要用@Service这个标签？<br>@Service用于标注业务层组件<br>比如，用在service的实现类中，表示注入该对象的意思</li><li>@Service里面的名字是干嘛的？<br>为本实例化对象取个名字，这是在一个接口有多个实现类的情况下区分实现类的方式，例如，Student实现了Person接口，在你的controller里面@Autowired Person时，假如这时Person还有另一个实现类User，为了确定实例化Student还是User， @Service括号里面的东西就有用了，<br>@Autowired<br>@Qualifier(“student”)<br>private Person person;<br>这样就确定实例化了一个Person指向一个Student对象</li></ol><p>扯的有点多了，继续看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.po.User;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">userMapper.insertUser(user);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userMapper.findByUserName(username);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>controller层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.po.User;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.UserService;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/registPage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">registPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"regist"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/regist"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">(User user,HttpSession httpSession,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">userService.insertUser(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,HttpServletResponse response) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"username"</span>+username);</span><br><span class="line">User user = userService.findByUserName(username);</span><br><span class="line">String name = user.getUsername();</span><br><span class="line">String pwd = user.getPassword();</span><br><span class="line"> <span class="keyword">if</span>(username==name || password==pwd)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>开启服务器，在浏览器输入测试地址<code>http://localhost:8091/m_ssm/user/index</code>，注意Tomcat的默认是是8080端口，我用的是Jetty，修改了端口为8091。<br>点击注册，此时的url是<code>localhost:8091/m_ssm/user/registPage</code>，输入用户名和密码，点击注册，会跳转到登录界面，url会变成<code>localhost:8091/m_ssm/user/regist。</code><br>刷新数据库会有一条新数据。<br>输入用户和密码之后会出现登录成功页面，url变成了<code>localhost:8091/m_ssm/user/success</code>，如果用户名或密码错误，会返回到登录页面，url会变成<code>localhost:8091/m_ssm/user/index</code><br>完整的测试是这样的，不过如果用户名或密码错误会报空指针异常,我就没具体去解决了，正确的当然登的进去。关于地址的变换，要访问的地址是index.jsp，所以通过springmvc的注解@RequestMapping()去映射，本项目中是输入index映射到index.jsp页面。它只是一个映射页面，什么事务也不要做。在点击注册按钮时，需要一个跳转页面的链接，而regist.jsp页面是直接访问不到的，所以只能通过映射访问，所以registPage也仅仅是一个映射，当点击注册的时候，会调用regist方法，执行保存数据的操作，同时将页面返回到index.jsp，地址栏便就是regist了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在完整的代码中我添加了邮箱激活功能，当然是百度的到的。添加了三个属性email、activated（账号状态）、codeUrl（激活链接中的随机码）。说说主要的思路，在点击注册的时候就已经把信息存储到数据库了，activated默认是0的，代表未激活。同时发送一个链接给注册的邮箱，发邮件java有这个jar包，在本项目中，我用的是qq邮箱发的（发送人），EmailUtils工具中POP3/SMTP密码是需要去qq邮箱开启的。用户名就是你的qq号。在邮件中，那个链接其实就是一个地址，<code>return &quot;http://czs2sv.natappfree.cc/m_ssm/email/activate?id=&quot;+user.getId()+&quot;&amp;&quot;+CHECK_CODE+&quot;=&quot;+generateCheckcode(user);</code>,如果要实现真正的激活，需要真正的服务器，也就是真正能访问的，而不是只在本地能访问，我用的是NatApp内网穿透实现，。NatApp这个不再多说，可以自行百度了解。点击访问这个链接，会把id和随机码传到activate进行校验，随机码是为了判断是不是这次激活操作，id是为了通过id修改账号状态，验证成功便就会修改状态码为1，表示激活。在登录的时候便就可以再进行一次验证了，不过这样其实更加的麻烦了，不过功能也多了些，同时也安全了些，防止恶意注册。验证码也是这样的。</p><p><a href="https://github.com/Lzengp/ssm" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;第一步:整合dao层&lt;br&gt;mybatis和spring整合，通过spring管理mapper接口&lt;br&gt;使用mapper的扫描器自动扫描mapper接口在spring中进行注册&lt;br&gt;第二步：整合service层&lt;br&gt;通过spring管理service接口&lt;br&gt;使用配置方式或注解方式将service接口配置在spring配置文件中&lt;br&gt;实现事务控制&lt;br&gt;第三步：整合springmvc&lt;br&gt;由于springmvc是spring的模块，不需要整合&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="SSM整合，maven" scheme="http://lzengp.cn/tags/SSM%E6%95%B4%E5%90%88%EF%BC%8Cmaven/"/>
    
  </entry>
  
  <entry>
    <title>快速了解一些中间件</title>
    <link href="http://lzengp.cn/2018/09/20/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E4%B8%80%E4%BA%9B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://lzengp.cn/2018/09/20/快速了解一些中间件/</id>
    <published>2018-09-20T06:28:53.000Z</published>
    <updated>2018-09-20T09:14:42.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近公司开发遇到好多不懂的一些框架或者中间件，就百度了解了下，本博客基本上都是百度百科的，我只是收集起来，方便日后查阅，就不用一个一个再去查找。对这些中间件也只是了解而已，没做深入的研究。然后有些好的博客我也都保存了下来。<br>大致分一下：<strong>dubbo分布式框架</strong>，<strong>zookeeper分布式程序协调服务</strong>，<strong>Nginx反向代理服务</strong>，<strong>Redis存储系统</strong>，<strong>ElasticSearch搜索服务器</strong>，<strong>Kafaka分布式发布订阅消息系统</strong>。</p></blockquote><a id="more"></a><h2 id="Dubbo（开源分布式服务框架）"><a href="#Dubbo（开源分布式服务框架）" class="headerlink" title="Dubbo（开源分布式服务框架）"></a>Dubbo（开源分布式服务框架）</h2><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和Spring框架无缝集成。<br>dubbo架构图如下所示<br><img src="http://pc57xo61v.bkt.clouddn.com/dubbo.png" alt=""><br>Provider<br>暴露服务方称之为“服务提供者”。<br>Consumer<br>调用远程服务方称之为“服务消费者”。<br>Registry<br>服务注册与发现的中心目录服务称之为“服务注册中心”。<br>Monitor<br>统计服务的调用次数和调用时间的日志服务称之为“服务监控中心”。<br><a href="https://blog.csdn.net/houshaolin/article/details/76408399" target="_blank" rel="noopener">Dubbo是什么？能做什么？</a><br><strong>zookeeper在dubbo扮演的角色就是注册中心</strong></p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx是一个http服务器。是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。<br><a href="https://blog.csdn.net/kisscatforever/article/details/73129270" target="_blank" rel="noopener">什么是Nginx？为什么使用Nginx？</a></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API<br>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。<br>Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制,使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。</p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。<br>Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：<br>通过O的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。<br>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。<br>支持通过Kafka服务器和消费机集群来分区消息。<br>支持Hadoop并行数据加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近公司开发遇到好多不懂的一些框架或者中间件，就百度了解了下，本博客基本上都是百度百科的，我只是收集起来，方便日后查阅，就不用一个一个再去查找。对这些中间件也只是了解而已，没做深入的研究。然后有些好的博客我也都保存了下来。&lt;br&gt;大致分一下：&lt;strong&gt;dubbo分布式框架&lt;/strong&gt;，&lt;strong&gt;zookeeper分布式程序协调服务&lt;/strong&gt;，&lt;strong&gt;Nginx反向代理服务&lt;/strong&gt;，&lt;strong&gt;Redis存储系统&lt;/strong&gt;，&lt;strong&gt;ElasticSearch搜索服务器&lt;/strong&gt;，&lt;strong&gt;Kafaka分布式发布订阅消息系统&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="dubbo" scheme="http://lzengp.cn/tags/dubbo/"/>
    
      <category term="Nginx" scheme="http://lzengp.cn/tags/Nginx/"/>
    
      <category term="Redis" scheme="http://lzengp.cn/tags/Redis/"/>
    
      <category term="ElasticSearch" scheme="http://lzengp.cn/tags/ElasticSearch/"/>
    
      <category term="Kafaka" scheme="http://lzengp.cn/tags/Kafaka/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://lzengp.cn/2018/09/20/Zookeeper/"/>
    <id>http://lzengp.cn/2018/09/20/Zookeeper/</id>
    <published>2018-09-20T03:41:31.000Z</published>
    <updated>2018-09-20T07:39:55.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Apache-ZooKeeper"><a href="#什么是Apache-ZooKeeper" class="headerlink" title="什么是Apache ZooKeeper"></a>什么是Apache ZooKeeper</h2><blockquote><p>Apache ZooKeeper是由集群（节点组）使用的一种服务，用于在自身之间协调，并通过稳健的同步技术维护共享数据。ZooKeeper本身是一个分布式应用程序，为写入分布式应用程序提供服务。<br>Zookeeper是针对大型分布式系统的高可靠的协调系统。由这个定义我们知道zookeeper是个协调系统，作用的对象是分布式系统。为什么分布式系统需要一个协调系统了？理由如下：<br>开发分布式系统是件很困难的事情，其中的困难主要体现在分布式系统的“部分失败”。“部分失败”是指信息在网络的两个节点之间传送时候，如果网络出了故障，发送者无法知道接收者是否收到了这个信息，而且这种故障的原因很复杂，接收者可能在出现网络错误之前已经收到了信息，也可能没有收到，又或接收者的进程死掉了。发送者能够获得真实情况的唯一办法就是重新连接到接收者，询问接收者错误的原因，这就是分布式系统开发里的“部分失败”问题。</p></blockquote><a id="more"></a><p>Zookeeper就是解决分布式系统“部分失败”的框架。Zookeeper不是让分布式系统避免“部分失败”问题，而是让分布式系统当碰到部分失败时候，可以正确的处理此类的问题，让分布式系统能正常的运行。<br>不管是hadoop还是其它分布式系统，就好比我们人的身体，有心脏，胃，有呼吸道系统。腿，手等等。这么多的子系统处于分布式环境，怎么协调呢？那就是我们大脑（zookeeper），大家可以把zookeepr想成大脑，本身没有其它功能，只有负责协调，联络子系统的功能</p><h2 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h2><p>分布式应用可以在给定时间（同时）在网络中的多个系统上运行，通过协调它们以快速有效的方式完成特定任务。通常来说，对于复杂而耗时的任务，非分布式应用（运行在单个系统中）需要几个小时才能完成，而分布式应用通过使用所有系统涉及的计算能力可以在几分钟内完成。<br>通过将分布式应用配置为在更多系统上运行，可以进一步减少完成任务的时间。分布式应用正在运行的一组系统称为集群，而在集群中运行的每台机器被称为节点。<br>分布式应用有两部分， Server（服务器） 和 Client（客户端） 应用程序。服务器应用程序实际上是分布式的，并具有通用接口，以便客户端可以连接到集群中的任何服务器并获得相同的结果。 客户端应用程序是与分布式应用进行交互的工具。</p><h2 id="分布式应用的优点"><a href="#分布式应用的优点" class="headerlink" title="分布式应用的优点"></a>分布式应用的优点</h2><p><code>可靠性</code> - 单个或几个系统的故障不会使整个系统出现故障。<br><code>可扩展性</code> - 可以在需要时增加性能，通过添加更多机器，在应用程序配置中进行微小的更改，而不会有停机时间。<br><code>透明性</code> - 隐藏系统的复杂性，并将其显示为单个实体/应用程序。<br>分布式应用的挑战<br><code>竞争条件</code> - 两个或多个机器尝试执行特定任务，实际上只需在任意给定时间由单个机器完成。例如，共享资源只能在任意给定时间由单个机器修改。<br><code>死锁</code> - 两个或多个操作等待彼此无限期完成。<br><code>不一致</code> - 数据的部分失败。</p><h2 id="ZooKeeper提供的常见服务如下"><a href="#ZooKeeper提供的常见服务如下" class="headerlink" title="ZooKeeper提供的常见服务如下 :"></a>ZooKeeper提供的常见服务如下 :</h2><p><code>命名服务</code> - 按名称标识集群中的节点。它类似于DNS，但仅对于节点。<br><code>配置管理</code> - 加入节点的最近的和最新的系统配置信息。<br><code>集群管理</code> - 实时地在集群和节点状态中加入/离开节点。<br><code>选举算法</code> - 选举一个节点作为协调目的的leader。<br><code>锁定和同步服务</code> - 在修改数据的同时锁定数据。此机制可帮助你在连接其他分布式应用程序（如Apache HBase）时进行自动故障恢复。<br><code>高度可靠的数据注册表</code> - 即使在一个或几个节点关闭时也可以获得数据。<br>分布式应用程序提供了很多好处，但它们也抛出了一些复杂和难以解决的挑战。ZooKeeper框架提供了一个完整的机制来克服所有的挑战。竞争条件和死锁使用故障安全同步方法进行处理。另一个主要缺点是数据的不一致性，ZooKeeper使用原子性解析。</p><h2 id="ZooKeeper的好处"><a href="#ZooKeeper的好处" class="headerlink" title="ZooKeeper的好处"></a>ZooKeeper的好处</h2><p>以下是使用ZooKeeper的好处：<br>简单的分布式协调过程<br><code>同步</code> - 服务器进程之间的相互排斥和协作。此过程有助于Apache HBase进行配置管理。<br>有序的消息<br><code>序列化</code> - 根据特定规则对数据进行编码。确保应用程序运行一致。这种方法可以在MapReduce中用来协调队列以执行运行的线程。<br><code>可靠性</code><br><code>原子性</code> - 数据转移完全成功或完全失败，但没有事务是部分的。</p><h2 id="ZooKeeper应用的典型场景"><a href="#ZooKeeper应用的典型场景" class="headerlink" title="ZooKeeper应用的典型场景"></a>ZooKeeper应用的典型场景</h2><p>ZooKeeper 是一个高可用的分布式数据管理与协调框架。基于对ZAB算法的实现，该框架<br>能够很好地保证分布式环境中数据的一致性。也是基于这样的特性，使得 ZooKeeper 成为了<br>解决分布式一致性问题的利器。</p><h3 id="1-数据发布与订阅（配置中心）"><a href="#1-数据发布与订阅（配置中心）" class="headerlink" title="1.数据发布与订阅（配置中心）"></a>1.数据发布与订阅（配置中心）</h3><p>数据发布与订阅，即所谓的配置中心，顾名思义就是发布者将数据发布到 ZooKeeper 节点上,<br>供订阅者进行数据订阅，进而达到动态获取数据的目的，实现配置信息的集中式管理和动态更新。<br>对于：数据量通常比较小。数据内容在运行时动态变化。集群中各机器共享，配置一致。<br>这样的全局配置信息就可以发布到 ZooKeeper上，让客户端（集群的机器）去订阅该消息。<br>发布/订阅系统一般有两种设计模式，分别是推（Push）和拉（Pull）模式。<br>推模式：服务端主动将数据更新发送给所有订阅的客户端<br>拉模式：客户端主动发起请求来获取最新数据，通常客户端都采用定时轮询拉取的方式<br>ZooKeeper 采用的是推拉相结合的方式：<br>    客户端想服务端注册自己需要关注的节点，一旦该节点的数据发生变更，那么服务端就会向相应<br>的客户端发送Watcher事件通知，客户端接收到这个消息通知后，需要主动到服务端获取最新的数据</p><h3 id="2-命名服务"><a href="#2-命名服务" class="headerlink" title="2.命名服务"></a>2.命名服务</h3><p>  命名服务也是分布式系统中比较常见的一类场景。在分布式系统中，通过使用命名服务，客户端<br>应用能够根据指定名字来获取资源或服务的地址，提供者等信息。被命名的实体通常可以是集群中的<br>机器，提供的服务，远程对象等等——这些我们都可以统称他们为名字。<br>其中较为常见的就是一些分布式服务框架（如RPC）中的服务地址列表。通过在ZooKeepr里<br>创建顺序节点，能够很容易创建一个全局唯一的路径，这个路径就可以作为一个名字。<br>ZooKeeper 的命名服务即生成全局唯一的ID。      </p><h3 id="3-分布式协调服务-通知"><a href="#3-分布式协调服务-通知" class="headerlink" title="3.分布式协调服务/通知"></a>3.分布式协调服务/通知</h3><p>ZooKeeper 中特有 Watcher 注册与异步通知机制，能够很好的实现分布式环境下不同机器，<br>甚至不同系统之间的通知与协调，从而实现对数据变更的实时处理。使用方法通常是不同的客户端<br>如果 机器节点 发生了变化，那么所有订阅的客户端都能够接收到相应的Watcher通知，并做出相应<br>的处理。<br>ZooKeeper的分布式协调/通知，是一种通用的分布式系统机器间的通信方式。</p><h3 id="4-Master选举"><a href="#4-Master选举" class="headerlink" title="4.Master选举"></a>4.Master选举</h3><p>Master 选举可以说是 ZooKeeper 最典型的应用场景了。比如 HDFS 中 Active NameNode 的选举、YARN 中 Active ResourceManager 的选举和 HBase 中 Active HMaster 的选举等。<br>    针对 Master 选举的需求，通常情况下，我们可以选择常见的关系型数据库中的主键特性来<br>实现：希望成为 Master 的机器都向数据库中插入一条相同主键ID的记录，数据库会帮我们进行<br>主键冲突检查，也就是说，只有一台机器能插入成功——那么，我们就认为向数据库中成功插入数据<br>的客户端机器成为Master。<br>    依靠关系型数据库的主键特性确实能够很好地保证在集群中选举出唯一的一个Master。<br>    但是，如果当前选举出的 Master 挂了，那么该如何处理？谁来告诉我 Master 挂了呢？<br>显然，关系型数据库无法通知我们这个事件。但是，ZooKeeper 可以做到！<br>    利用 ZooKeepr 的强一致性，能够很好地保证在分布式高并发情况下节点的创建一定能够<br>保证全局唯一性，即 ZooKeeper 将会保证客户端无法创建一个已经存在的 数据单元节点。<br>    也就是说，如果同时有多个客户端请求创建同一个临时节点，那么最终一定只有一个客户端<br>请求能够创建成功。利用这个特性，就能很容易地在分布式环境中进行 Master 选举了。<br>    成功创建该节点的客户端所在的机器就成为了 Master。同时，其他没有成功创建该节点的<br>客户端，都会在该节点上注册一个子节点变更的 Watcher，用于监控当前 Master 机器是否存<br>活，一旦发现当前的Master挂了，那么其他客户端将会重新进行 Master 选举。<br>    这样就实现了 Master 的动态选举。</p><h3 id="5-分布式锁"><a href="#5-分布式锁" class="headerlink" title="5.分布式锁"></a>5.分布式锁</h3><p>分布式锁是控制分布式系统之间同步访问共享资源的一种方式<br>分布式锁又分为排他锁和共享锁两种<br>排它锁<br>ZooKeeper如何实现排它锁？<br>定义锁<br>ZooKeeper 上的一个 机器节点 可以表示一个锁<br>获得锁<br>把ZooKeeper上的一个节点看作是一个锁，获得锁就通过创建临时节点的方式来实现。<br>ZooKeeper 会保证在所有客户端中，最终只有一个客户端能够创建成功，那么就可以<br>认为该客户端获得了锁。同时，所有没有获取到锁的客户端就需要到/exclusive_lock<br>节点上注册一个子节点变更的Watcher监听，以便实时监听到lock节点的变更情况。<br>释放锁<br>因为锁是一个临时节点，释放锁有两种方式<br>当前获得锁的客户端机器发生宕机或重启，那么该临时节点就会被删除，释放锁<br>正常执行完业务逻辑后，客户端就会主动将自己创建的临时节点删除，释放锁。<br>无论在什么情况下移除了lock节点，ZooKeeper 都会通知所有在 /exclusive_lock 节点上注册了节点变更 Watcher 监听的客户端。这些客户端在接收到通知后，再次重新发起分布式锁获取，即重复『获取锁』过程。<br>共享锁<br>共享锁在同一个进程中很容易实现，但是在跨进程或者在不同 Server 之间就不好实现了。Zookeeper 却很容易实现这个功能，实现方式也是需要获得锁的 Server 创建一个 EPHEMERAL_SEQUENTIAL 目录节点，然后调用 getChildren方法获取当前的目录节点列表中最小的目录节点是不是就是自己创建的目录节点，如果正是自己创建的，那么它就获得了这个锁，如果不是那么它就调用 exists(String path, boolean watch) 方法并监控 Zookeeper 上目录节点列表的变化，一直到自己创建的节点是列表中最小编号的目录节点，从而获得锁，释放锁很简单，只要删除前面它自己所创建的目录节点就行了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍的 Zookeeper 的基本知识，以及介绍了几个典型的应用场景。这些都是 Zookeeper<br> 的基本功能，最重要的是 Zoopkeeper 提供了一套很好的分布式集群管理的机制，就是它这种基于<br> 层次型的目录树的数据结构，并对树中的节点进行有效管理，从而可以设计出多种多样的分布式的数<br> 据管理模型，而不仅仅局限于上面提到的几个常用应用场景</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Apache-ZooKeeper&quot;&gt;&lt;a href=&quot;#什么是Apache-ZooKeeper&quot; class=&quot;headerlink&quot; title=&quot;什么是Apache ZooKeeper&quot;&gt;&lt;/a&gt;什么是Apache ZooKeeper&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Apache ZooKeeper是由集群（节点组）使用的一种服务，用于在自身之间协调，并通过稳健的同步技术维护共享数据。ZooKeeper本身是一个分布式应用程序，为写入分布式应用程序提供服务。&lt;br&gt;Zookeeper是针对大型分布式系统的高可靠的协调系统。由这个定义我们知道zookeeper是个协调系统，作用的对象是分布式系统。为什么分布式系统需要一个协调系统了？理由如下：&lt;br&gt;开发分布式系统是件很困难的事情，其中的困难主要体现在分布式系统的“部分失败”。“部分失败”是指信息在网络的两个节点之间传送时候，如果网络出了故障，发送者无法知道接收者是否收到了这个信息，而且这种故障的原因很复杂，接收者可能在出现网络错误之前已经收到了信息，也可能没有收到，又或接收者的进程死掉了。发送者能够获得真实情况的唯一办法就是重新连接到接收者，询问接收者错误的原因，这就是分布式系统开发里的“部分失败”问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Zookeeper" scheme="http://lzengp.cn/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记(四)</title>
    <link href="http://lzengp.cn/2018/09/18/Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)/"/>
    <id>http://lzengp.cn/2018/09/18/Hibernate学习笔记(四)/</id>
    <published>2018-09-18T13:11:20.000Z</published>
    <updated>2018-09-19T06:48:22.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题总纲"><a href="#问题总纲" class="headerlink" title="问题总纲"></a>问题总纲</h2><blockquote><ol><li>JPA的概念以及它和hibernate之间的关系</li><li>JPA的环境搭建和入门案例</li><li>JPA的CRUD操作（单表）</li><li>JPA中实现一对多映射配置及操作</li><li>JPA中实现多对多映射配置及操作</li><li>基于JPA的映射配置和hibernate操作组合使用</li></ol></blockquote><a id="more"></a><h2 id="JPA的概念以及它和hibernate之间的关系"><a href="#JPA的概念以及它和hibernate之间的关系" class="headerlink" title="JPA的概念以及它和hibernate之间的关系"></a>JPA的概念以及它和hibernate之间的关系</h2><h3 id="JPA概述"><a href="#JPA概述" class="headerlink" title="JPA概述"></a>JPA概述</h3><p>JPA Java Persistence API，是EJB3规范中负责对象持久化的应用程序编程接口（ORM接口），它定义一系列的注释。这些注释大体可分为：类级别注释、方法级别注释、字段级别注释。给实体类添加适当的注释可以在程序运行时告诉Hibernate如何将一个实体类保存到数据库中以及如何将数据以对象的形式从数据库中读取出来。<br>　　目前有两种注释方案可以确定对象与表格之间的对应关系：一种是注释实体类的属性字段（字段级别注释），成为字段访问方式（field access mode）；另一种是注释实体类的属性访问方法（方法级别注释），称为属性访问方式（property access mode）。</p><h3 id="JPA与Hibernate-的区别"><a href="#JPA与Hibernate-的区别" class="headerlink" title="JPA与Hibernate 的区别"></a>JPA与Hibernate 的区别</h3><p>　　JPA和Hibernate之间的关系，可以简单的理解为JPA是标准接口，Hibernate是实现。<br>　　那么Hibernate是如何实现与JPA的这种关系的呢。Hibernate主要是通过三个组件来实现的，及hibernate-annotation、hibernate-entitymanager和hibernate-core。<br>hibernate-annotation：是Hibernate支持annotation方式配置的基础，它包括了标准的JPA annotation以及Hibernate自身特殊功能的annotation。<br>hibernate-core：是Hibernate的核心实现，提供了Hibernate所有的核心功能。<br>hibernate-entitymanager：实现了标准的JPA，可以把它看成hibernate-core和JPA之间的适配器，它并不直接提供ORM的功能，而是对hibernate-core进行封装，使得Hibernate符合JPA的规范。</p><h2 id="JPA的环境搭建和入门案例"><a href="#JPA的环境搭建和入门案例" class="headerlink" title="JPA的环境搭建和入门案例"></a>JPA的环境搭建和入门案例</h2><h3 id="导包（包括c3p0的包）"><a href="#导包（包括c3p0的包）" class="headerlink" title="导包（包括c3p0的包）"></a>导包（包括c3p0的包）</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/hibernate1.png" alt=""></p><h3 id="目录结构（META-INF和persistence-xml目录结构与名字不能改成其他的）"><a href="#目录结构（META-INF和persistence-xml目录结构与名字不能改成其他的）" class="headerlink" title="目录结构（META-INF和persistence.xml目录结构与名字不能改成其他的）"></a>目录结构（META-INF和persistence.xml目录结构与名字不能改成其他的）</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/hibernate2.png" alt=""></p><h3 id="主配置文件persistence-xml"><a href="#主配置文件persistence-xml" class="headerlink" title="主配置文件persistence.xml"></a>主配置文件persistence.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence_2_0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置持久化单元，可以配置多个，但是名称不能重复</span></span><br><span class="line"><span class="comment">name:用于指定持久化单元名称</span></span><br><span class="line"><span class="comment">transactio-type：指定事务的类型</span></span><br><span class="line"><span class="comment">JTA：Java Transaction API</span></span><br><span class="line"><span class="comment">RESOURCE_LOCAL：指的是本地代码事务（用这个）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"myJPAUnit"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JPA规范的提供商  可以不写 </span></span><br><span class="line"><span class="comment">&lt;provider&gt;org.hibernate.jpa.HibernatePersistanceProvider&lt;/provider&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定由JPA注解的实体类位置  可以不写</span></span><br><span class="line"><span class="comment">&lt;class&gt;cn.hnust.domain.Customer&lt;/class&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接库相关的一些配置，都是用hibernate的，所以只需要把之前hibernate主配置文件中的部分拷贝</span></span><br><span class="line"><span class="comment">要改成name value格式，映射配置文件也要改</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jpa"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span> <span class="attr">value</span>=<span class="string">"1997"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQLDialect"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.connection.C3P0ConnectionProvider"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工具类JPAUtil-执行之后生成表结构，有时执行完并且成功之后却没看到表生成，等一会就好了"><a href="#工具类JPAUtil-执行之后生成表结构，有时执行完并且成功之后却没看到表生成，等一会就好了" class="headerlink" title="工具类JPAUtil,执行之后生成表结构，有时执行完并且成功之后却没看到表生成，等一会就好了"></a>工具类JPAUtil,执行之后生成表结构，有时执行完并且成功之后却没看到表生成，等一会就好了</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPAUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">//就相当于SessionFactory</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> EntityManagerFactory managerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hibernate把可以遇见的异常都转换成运行时异常</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">managerFactory = Persistence.createEntityManagerFactory(<span class="string">"myJPAUnit"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionInInitializerError e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化EntityManagerFactory失败，请检查配置文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取JPA操作数据库对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  EntityManager <span class="title">createEntityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> managerFactory.createEntityManager();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成表结构</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">createEntityManager();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类Customer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.CascadeType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.FetchType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.OneToMany;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> * 使用注解都是JPA规范，都要导入javax.persistance包下的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_customer"</span>)<span class="comment">//建立当前类和数据库表对应关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span><span class="comment">//表名当前字段是主键</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)<span class="comment">//表明对应数据库的主键字段是cust_id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//指定主键的生成策略，自增</span></span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custId = custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custName = custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [custId="</span> + custId + <span class="string">", custName="</span> + custName + <span class="string">", custSource="</span> + custSource</span><br><span class="line">+ <span class="string">", custIndustry="</span> + custIndustry + <span class="string">", custLevel="</span> + custLevel + <span class="string">", custAddress="</span> + custAddress</span><br><span class="line">+ <span class="string">", custPhone="</span> + custPhone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面基本搭建好了一个JPA项目，接下来测试</p><h2 id="JPA的CRUD操作（单表）"><a href="#JPA的CRUD操作（单表）" class="headerlink" title="JPA的CRUD操作（单表）"></a>JPA的CRUD操作（单表）</h2><p>测试代码JAPDemo1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.JPAUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPACRUD测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPADemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建客户对象</span></span><br><span class="line">Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">c.setCustName(<span class="string">"JPA测试test1"</span>);</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行保存操作</span></span><br><span class="line">em.persist(c);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询一个实体  立即加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行查询操作</span></span><br><span class="line">Customer c = em.find(Customer.class, <span class="number">1L</span>);<span class="comment">//find立即加载</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询一个实体  延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行查询操作</span></span><br><span class="line">Customer c = em.getReference(Customer.class, <span class="number">1L</span>);<span class="comment">//getReference延迟加载</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行查询操作</span></span><br><span class="line">Customer c = em.find(Customer.class, <span class="number">1L</span>);</span><br><span class="line">c.setCustAddress(<span class="string">"长沙"</span>);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 更新另外的操作</span></span><br><span class="line"><span class="comment"> * merge是合并，（两个实体合并）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行查询操作</span></span><br><span class="line">Customer c = em.find(Customer.class, <span class="number">1L</span>);</span><br><span class="line">c.setCustAddress(<span class="string">"湘潭"</span>);</span><br><span class="line">em.merge(c);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.执行查询操作,然后再删除</span></span><br><span class="line">Customer c = em.getReference(Customer.class, <span class="number">1L</span>);<span class="comment">//getReference延迟加载</span></span><br><span class="line">em.remove(c);</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> * 涉及对象是</span></span><br><span class="line"><span class="comment"> * JPA的Query</span></span><br><span class="line"><span class="comment"> * 如何获取：</span></span><br><span class="line"><span class="comment"> * EntityMananger的createQuery(String jpql)</span></span><br><span class="line"><span class="comment"> * 参数含义：</span></span><br><span class="line"><span class="comment"> * jpql:Java Persistence Query Language</span></span><br><span class="line"><span class="comment"> * 写法和HQL很相似，也是把表名换成类名，把字段名换成属性名称</span></span><br><span class="line"><span class="comment"> * 它在写查询所有时，不能直接用      from 实体类</span></span><br><span class="line"><span class="comment"> * 需要select关键字    select c from  Customer  c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.获取EntityManager对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//2.获取事务对象，并开启事务</span></span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//3.获取JPA的查询对象Query</span></span><br><span class="line"><span class="comment">//Query query = em.createQuery( "select c from  Customer  c");</span></span><br><span class="line">Query query = em.createQuery( <span class="string">"select c from  Customer  c where custName like ? and custLevel=?"</span>);</span><br><span class="line"><span class="comment">//给占位符赋值，从1开始</span></span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="string">"%长%"</span>);</span><br><span class="line">query.setParameter(<span class="number">2</span>, <span class="string">"6"</span>);</span><br><span class="line">List list = query.getResultList();</span><br><span class="line"><span class="keyword">for</span>(Object o: list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="merge的作用"><a href="#merge的作用" class="headerlink" title="merge的作用"></a>merge的作用</h3><p>首先看以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询一个客户</span></span><br><span class="line">Customer c = session.get(Customer.class, <span class="number">1L</span>);<span class="comment">//持久态</span></span><br><span class="line">tx.commit();</span><br><span class="line">session.close();<span class="comment">//关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.修改客户信息</span></span><br><span class="line">c.setCustName(<span class="string">"李四"</span>);<span class="comment">//托管态</span></span><br><span class="line"></span><br><span class="line">Session session1 = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx1 = session.beginTransaction();</span><br><span class="line"><span class="comment">//3.再次查询</span></span><br><span class="line">Customer c1 = session1.get(Customer.class, <span class="number">1L</span>);<span class="comment">//持久态</span></span><br><span class="line"><span class="comment">//4.更新联系人</span></span><br><span class="line">session.update(c);<span class="comment">//把托管态对象转换为持久态</span></span><br><span class="line">tx1.commit();</span><br><span class="line">session1.close();<span class="comment">//关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行之后会保错，报错原因是不同的对象有相同的标识符，也就是说id相同，但名字不同。<br>原因：当第一次查询时，会用缓存和快照机制把数据存到session对象中，第一个session关闭，session对象就关闭了，但此时快照还在，那条信息还在的，查询结果c里面有id（1）和name（张三）。然后修改客户信息，此时c里面的内容是id（1）和name（李四），第二次查询出来的还是之前的那条语句，session1中c1的id（1）和name（张三），当你update的时候，想通过查询出来的c1来更新c里面的内容，一个一个在session1对象中，在快照中，update是无法合并的，所以报错。用merge就不会报错，它会合并两个实体，把快照里面内容的覆盖掉session1里面的内容</p><h2 id="JPA中实现一对多映射配置及操作"><a href="#JPA中实现一对多映射配置及操作" class="headerlink" title="JPA中实现一对多映射配置及操作"></a>JPA中实现一对多映射配置及操作</h2><p>添加联系人实体类（从表）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.ManyToOne;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_linkman"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> <span class="keyword">implements</span>  <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span><span class="comment">//表名当前字段是主键</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_id"</span>)<span class="comment">//表明对应数据库的主键字段是cust_id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//指定主键的生成策略</span></span><br><span class="line"><span class="keyword">private</span> Long lkmId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_gender"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmGender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_phone"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmPhone;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_mobile"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmMobile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_email"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmEmail;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_position"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmPosition;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"lkm_memo"</span>)</span><br><span class="line"><span class="keyword">private</span> String lkmMemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一对多关系映射，多的一方</span></span><br><span class="line"><span class="comment"> * 从表实体类包含主表实体类的对象引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ManyToOne</span>(targetEntity=Customer.class)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"lkm_cust_id"</span>,referencedColumnName=<span class="string">"cust_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getLkmId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmId</span><span class="params">(Long lkmId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmId = lkmId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmName</span><span class="params">(String lkmName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmName = lkmName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmGender</span><span class="params">(String lkmGender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmGender = lkmGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPhone</span><span class="params">(String lkmPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmPhone = lkmPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmMobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMobile</span><span class="params">(String lkmMobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmMobile = lkmMobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmEmail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmEmail</span><span class="params">(String lkmEmail)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmEmail = lkmEmail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmPosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPosition</span><span class="params">(String lkmPosition)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmPosition = lkmPosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmMemo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMemo</span><span class="params">(String lkmMemo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmMemo = lkmMemo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"LinkMan [lkmId="</span> + lkmId + <span class="string">", lkmName="</span> + lkmName + <span class="string">", lkmGender="</span> + lkmGender + <span class="string">", lkmPhone="</span></span><br><span class="line">+ lkmPhone + <span class="string">", lkmMobile="</span> + lkmMobile + <span class="string">", lkmEmail="</span> + lkmEmail + <span class="string">", lkmPosition="</span> + lkmPosition</span><br><span class="line">+ <span class="string">", lkmMemo="</span> + lkmMemo + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JPA中实现多对多映射配置及操作"><a href="#JPA中实现多对多映射配置及操作" class="headerlink" title="JPA中实现多对多映射配置及操作"></a>JPA中实现多对多映射配置及操作</h2><p>实体类SysUser<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.CascadeType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.ManyToMany;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"user_id"</span>)</span><br><span class="line"><span class="meta">@GenericGenerator</span>(name=<span class="string">"uuid"</span>,strategy=<span class="string">"uuid"</span>)<span class="comment">//自定义主键生成策略,.strategy:String 指定生成策略</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(generator=<span class="string">"uuid"</span>)<span class="comment">//要与自定义的name一致</span></span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"user_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"user_password"</span>)</span><br><span class="line"><span class="keyword">private</span> String userPassword;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"user_state"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer userState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多对多关系映射：一个用户可以演多个角色</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"users"</span>,cascade=CascadeType.ALL)<span class="comment">//不维护关联关系，添加级联操作</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;SysRole&gt; roles = <span class="keyword">new</span> HashSet&lt;SysRole&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SysRole&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;SysRole&gt; roles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roles = roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userId = userId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userPassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUserState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserState</span><span class="params">(Integer userState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userState = userState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SysUser [userId="</span> + userId + <span class="string">", userName="</span> + userName + <span class="string">", userPassword="</span> + userPassword</span><br><span class="line">+ <span class="string">", userState="</span> + userState + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实体类SysRole<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.CascadeType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.JoinColumn;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.JoinTable;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.ManyToMany;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"sys_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"role_id"</span>)</span><br><span class="line"><span class="meta">@GenericGenerator</span>(name=<span class="string">"uuid"</span>,strategy=<span class="string">"uuid"</span>)<span class="comment">//自定义主键生成策略</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(generator=<span class="string">"uuid"</span>)</span><br><span class="line"><span class="keyword">private</span> String roleId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"role_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"role_password"</span>)</span><br><span class="line"><span class="keyword">private</span> String rolePassword;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"role_mome"</span>)</span><br><span class="line"><span class="keyword">private</span> String roleMome;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多对多关系映射：一个角色可以让多个用户演</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(cascade=CascadeType.ALL)</span><br><span class="line"><span class="comment">//加入一张中间表</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"user_role_ref"</span>,</span><br><span class="line">   joinColumns= &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"role_id"</span>,referencedColumnName=<span class="string">"role_id"</span>)&#125;,<span class="comment">//写的是当前实体在中间表的外键字段</span></span><br><span class="line">   inverseJoinColumns= &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"user_id"</span>,referencedColumnName=<span class="string">"user_id"</span>)&#125;<span class="comment">//写的是对方实体在中间表的外键字段</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="keyword">private</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;SysUser&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SysUser&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;SysUser&gt; users)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.users = users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(String roleId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRolePassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rolePassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRolePassword</span><span class="params">(String rolePassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rolePassword = rolePassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoleMome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleMome;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleMome</span><span class="params">(String roleMome)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleMome = roleMome;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SysRole [roleId="</span> + roleId + <span class="string">", roleName="</span> + roleName + <span class="string">", rolePassword="</span> + rolePassword + <span class="string">", roleMome="</span></span><br><span class="line">+ roleMome + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实体写好之后，执行工具类JPAUtil自动生成表结构，会有三个表，中间表是联合主键（ 联合主键顾名思义就是多个主键联合形成一个主键组合），注意的是在一张表中写了mappedBy就不能写@JoinTable了，不然会报错。上面中没用自增id了，而是自定义了uuid为主键，所以id不再是Long而是String</p><h3 id="多对多测试"><a href="#多对多测试" class="headerlink" title="多对多测试"></a>多对多测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.SysRole;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.SysUser;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.JPAUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA多对多测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPADemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存操作(级联双向保存)</span></span><br><span class="line"><span class="comment"> * 用户1具备角色1和角色2</span></span><br><span class="line"><span class="comment"> * 用户2具备角色2和角色3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建用户与角色</span></span><br><span class="line">SysUser user1 = <span class="keyword">new</span> SysUser();</span><br><span class="line">user1.setUserName(<span class="string">"user1"</span>);</span><br><span class="line">SysUser user2 = <span class="keyword">new</span> SysUser();</span><br><span class="line">user2.setUserName(<span class="string">"user2"</span>);</span><br><span class="line">SysRole role1 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role1.setRoleName(<span class="string">"role1"</span>);</span><br><span class="line">SysRole role2 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role2.setRoleName(<span class="string">"role2"</span>);</span><br><span class="line">SysRole role3 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role3.setRoleName(<span class="string">"role3"</span>);</span><br><span class="line"><span class="comment">//用户1具备角色1和角色2(角色12也具备用户1)</span></span><br><span class="line">user1.getRoles().add(role1);</span><br><span class="line">user1.getRoles().add(role2);</span><br><span class="line">role1.getUsers().add(user1);</span><br><span class="line">role2.getUsers().add(user1);</span><br><span class="line"><span class="comment">//用户2具备角色2和角色3(角色34也具备用户2)</span></span><br><span class="line">user2.getRoles().add(role2);</span><br><span class="line">user2.getRoles().add(role3);</span><br><span class="line">role2.getUsers().add(user2);</span><br><span class="line">role3.getUsers().add(user2);</span><br><span class="line"><span class="comment">//保存（级联保存）</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//执行这一句便可以保存上面所有的信息</span></span><br><span class="line">em.persist(user1);</span><br><span class="line">tx.commit();</span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> * 双向级联删除，不管是hibernate还是JPA，多对多中都不配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line">EntityTransaction tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">//查询用户</span></span><br><span class="line">SysUser user1 = em.find(SysUser.class,<span class="string">"062118e665ecb2410165ecb243830000"</span>);</span><br><span class="line">em.remove(user1);</span><br><span class="line">tx.commit();</span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证c3p0测试"><a href="#验证c3p0测试" class="headerlink" title="验证c3p0测试"></a>验证c3p0测试</h3><p>需要在persistence.xml中配置连接池提供商(上面的xml中我已经配置）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.jdbc.Work;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.JPAUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JPA中使用c3p0连接池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPADemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 验证c3p0连接池是否配置成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取jpa中的操作对象</span></span><br><span class="line">EntityManager em = JPAUtil.createEntityManager();</span><br><span class="line"><span class="comment">//得到session对象</span></span><br><span class="line">Session session = em.unwrap(Session.class);</span><br><span class="line"><span class="comment">//执行session的doWork方法</span></span><br><span class="line">session.doWork(<span class="keyword">new</span> Work() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">System.out.println(conn.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印结果为<code>com.mchange.v2.c3p0.impl.NewProxyConnection</code>,如果不写提供商，就打印<code>com.mysql.jdbc.JDBC4Connection</code><br>关于c3p0连接池<br>一般我们在项目中操作数据库时，都是每次需要操作数据库就建立一个连接，操作完成后释放连接。因为jdbc没有保持连接的能力，一旦超过一定时间没有使用（大约几百毫秒），连接就会被自动释放掉。而每次新建连接都需要140毫秒左右的时间，所以耗费时间比较多。若使用C3P0连接池来池化连接，随时取用，则平均每次取用只需要10-20毫秒。这在高并发随机访问数据库的时候对效率的提升有很大帮助。<br>C3P0连接池会根据你的配置来初始化N个数据库连接，空闲T时间后连接过期又会自动新建K个连接使得连接池总有空闲的数据库连接等待被取用。我们只需通过dataSourse.getConnection()即可从线程池中取用一个已经连接好的空闲连接，执行数据库操作。然后“断开”（放回）这个连接，把这个连接的使用权放回连接池。真正的数据库连接的创建与释放是由C3P0在后台自动完成的，我们花的只是取用与释放占用权的时间。全程耗时10+毫秒，比原来提高了几十倍。</p><h2 id="基于JPA的映射配置和hibernate操作组合使用"><a href="#基于JPA的映射配置和hibernate操作组合使用" class="headerlink" title="基于JPA的映射配置和hibernate操作组合使用"></a>基于JPA的映射配置和hibernate操作组合使用</h2><p>环境还是用hibernate的环境，而不是用JPA的。具体操作：把实体类的映射文件删掉，在实体类中直接改用注释，然后在hibernate.cfg.xml中配置映射文件的位置时改成<code>&lt;mapping class=&quot;cn.hnsut.domain.Customer&quot;</code>。操作数据库依旧是使用hibernate的关键字（save，update，delete，get）。</p><h2 id="代码：Github地址"><a href="#代码：Github地址" class="headerlink" title="代码：Github地址"></a>代码：Github地址</h2><p><a href="https://github.com/Lzengp/HibernateTest4" target="_blank" rel="noopener">一对多映射HibernateTest4</a><br><a href="https://github.com/Lzengp/HibernateTest5" target="_blank" rel="noopener">多对多映射HibernateTest5</a><br><a href="https://github.com/Lzengp/HibernateTest6" target="_blank" rel="noopener">JPA和hibernate组合使用HibernateTest6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题总纲&quot;&gt;&lt;a href=&quot;#问题总纲&quot; class=&quot;headerlink&quot; title=&quot;问题总纲&quot;&gt;&lt;/a&gt;问题总纲&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;JPA的概念以及它和hibernate之间的关系&lt;/li&gt;
&lt;li&gt;JPA的环境搭建和入门案例&lt;/li&gt;
&lt;li&gt;JPA的CRUD操作（单表）&lt;/li&gt;
&lt;li&gt;JPA中实现一对多映射配置及操作&lt;/li&gt;
&lt;li&gt;JPA中实现多对多映射配置及操作&lt;/li&gt;
&lt;li&gt;基于JPA的映射配置和hibernate操作组合使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JPA" scheme="http://lzengp.cn/tags/JPA/"/>
    
      <category term="Hibernate注解" scheme="http://lzengp.cn/tags/Hibernate%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记(三)</title>
    <link href="http://lzengp.cn/2018/09/17/Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
    <id>http://lzengp.cn/2018/09/17/Hibernate学习笔记(三)/</id>
    <published>2018-09-17T12:40:06.000Z</published>
    <updated>2018-09-19T06:48:26.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题总纲"><a href="#问题总纲" class="headerlink" title="问题总纲"></a>问题总纲</h2><blockquote><ol><li>数据库中表关系</li><li>如何确立数据库中的表关系</li><li>学习多表映射配置要遵循的步骤</li><li>一对多关系映射配置及操作</li><li>多对多关系映射配置及操作</li></ol></blockquote><a id="more"></a><h2 id="数据库中表关系"><a href="#数据库中表关系" class="headerlink" title="数据库中表关系"></a>数据库中表关系</h2><p>一对一<br>一对多（多对一）<br>多对多</p><h2 id="如何确立数据库中的表关系"><a href="#如何确立数据库中的表关系" class="headerlink" title="如何确立数据库中的表关系"></a>如何确立数据库中的表关系</h2><p><strong>一对多的表关系在数据库中如何实现？</strong><br>使用外键约束<br>我们一般习惯把一的一方称为主表，把多的一方称为从表。<br>什么是外键：<br>    从表中有一列，该列的取值除了null之外，只能来源于主表的主键。默认情况下，外键字段的值是可以重复的。<br><strong>多对多的表关系在数据库中如何实现？</strong><br>使用中间表。<br>中间表中只有两个外键，引用两个多对多表的主键。不能有其他字段信息，至于中间表的主键，应该采用联合主键。任何一个多方的表和中间表去比较，都是一对多的关系。<br><strong>一对一的表关系在数据库中如何实现？</strong><br>有两种<br>第一种：建立外键的方式。使用外键约束，唯一约束，非空约束。它是把外键字段加了非空和唯一约束，从而实现了一对一。<br>第二种：使用主键的方式，让其中的一张表即是主键又是外键。<br><strong>如何确定两张表之间的关系</strong><br>找外键。<br>此种方式能解决确立表中关系中90%的情况。</p><h2 id="学习多表映射配置要遵循的步骤"><a href="#学习多表映射配置要遵循的步骤" class="headerlink" title="学习多表映射配置要遵循的步骤"></a>学习多表映射配置要遵循的步骤</h2><p>第一步：确定两张表之间的关系<br>第二步：在数据库中实现两张表之间的关系建立<br>第三步：在实体类中描述出两个实体之间的关系<br>第四步：在映射配置文件中建立两个实体和两张表之间的关系</p><h2 id="一对多关系映射配置及操作"><a href="#一对多关系映射配置及操作" class="headerlink" title="一对多关系映射配置及操作"></a>一对多关系映射配置及操作</h2><p>示例：客户和联系人两张表<br>第一步：确定两张表之间的关系<br>一个客户可以包含多个联系人，多个联系人可以同时属于同一个客户，所以我们说：客户和联系人之间的关系是一对多。<br>第二步：在数据库中实现两张表之间的关系建立<br>实现一对多的关系，靠外键。客户表是主表，联系人表是从表。我们需要在联系人表中添加外键。<br>第三步：在实体类中描述出两个实体之间的关系<br>主表的实体类应该包含从表实体类的集合引用，从表的实体类应该包含主表实体类的对象引用<br>第四步：在映射配置文件中建立两个实体和两张表之间的关系</p><h2 id="一对多关系映射具体实现"><a href="#一对多关系映射具体实现" class="headerlink" title="一对多关系映射具体实现"></a>一对多关系映射具体实现</h2><p>客户实体类Customer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一对多关系映射，一的一方</span></span><br><span class="line"><span class="comment"> * 主表实体类包含从表实体类的集合引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt;  linkmans =  <span class="keyword">new</span> HashSet&lt;LinkMan&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;LinkMan&gt; <span class="title">getLinkmans</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> linkmans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkmans</span><span class="params">(Set&lt;LinkMan&gt; linkmans)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.linkmans = linkmans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custId = custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custName = custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [custId="</span> + custId + <span class="string">", custName="</span> + custName + <span class="string">", custSource="</span> + custSource</span><br><span class="line">+ <span class="string">", custIndustry="</span> + custIndustry + <span class="string">", custLevel="</span> + custLevel + <span class="string">", custAddress="</span> + custAddress</span><br><span class="line">+ <span class="string">", custPhone="</span> + custPhone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这句：private Set<linkman>  linkmans =  new HashSet<linkman>(0);new就会占用内存，不new可能会抛出空指针异常，0的作用只是分类，使内存地址不为空，默认空间不开辟<br>不要把关联对象打印出来，不然程序一直执行</linkman></linkman></p><p>联系人实体类LinkMan.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> <span class="keyword">implements</span>  <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long lkmId;</span><br><span class="line"><span class="keyword">private</span> String lkmName;</span><br><span class="line"><span class="keyword">private</span> String lkmGender;</span><br><span class="line"><span class="keyword">private</span> String lkmPhone;</span><br><span class="line"><span class="keyword">private</span> String lkmMobile;</span><br><span class="line"><span class="keyword">private</span> String lkmEmail;</span><br><span class="line"><span class="keyword">private</span> String lkmPosition;</span><br><span class="line"><span class="keyword">private</span> String lkmMemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一对多关系映射，多的一方</span></span><br><span class="line"><span class="comment"> * 从表实体类包含主表实体类的对象引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getLkmId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmId</span><span class="params">(Long lkmId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmId = lkmId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmName</span><span class="params">(String lkmName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmName = lkmName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmGender</span><span class="params">(String lkmGender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmGender = lkmGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPhone</span><span class="params">(String lkmPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmPhone = lkmPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmMobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMobile</span><span class="params">(String lkmMobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmMobile = lkmMobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmEmail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmEmail</span><span class="params">(String lkmEmail)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmEmail = lkmEmail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmPosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPosition</span><span class="params">(String lkmPosition)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmPosition = lkmPosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkmMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkmMemo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMemo</span><span class="params">(String lkmMemo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkmMemo = lkmMemo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"LinkMan [lkmId="</span> + lkmId + <span class="string">", lkmName="</span> + lkmName + <span class="string">", lkmGender="</span> + lkmGender + <span class="string">", lkmPhone="</span></span><br><span class="line">+ lkmPhone + <span class="string">", lkmMobile="</span> + lkmMobile + <span class="string">", lkmEmail="</span> + lkmEmail + <span class="string">", lkmPosition="</span> + lkmPosition</span><br><span class="line">+ <span class="string">", lkmMemo="</span> + lkmMemo + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户映射文件配置Customer.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"custId"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指向本地数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custName"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custSource"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custIndustry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custLevel"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custAddress"</span> <span class="attr">column</span>=<span class="string">"cust_address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custPhone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">一对多关系映射：主表实体的映射配置</span></span><br><span class="line"><span class="comment">涉及的标签：</span></span><br><span class="line"><span class="comment">set：</span></span><br><span class="line"><span class="comment">作用：用于配置set集合属性</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">name：指定实体类中set集合的属性名称</span></span><br><span class="line"><span class="comment">table：指定从表的名称。在一对多配置时可以不写</span></span><br><span class="line"><span class="comment"> key：</span></span><br><span class="line"><span class="comment"> 作用：用于映射外键字段</span></span><br><span class="line"><span class="comment"> 属性：</span></span><br><span class="line"><span class="comment"> column：指定外键字段名称</span></span><br><span class="line"><span class="comment"> one-to-many:</span></span><br><span class="line"><span class="comment"> 作用：用于建立一对多的映射配置</span></span><br><span class="line"><span class="comment"> 属性:</span></span><br><span class="line"><span class="comment"> class:用于指定从表实体的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkmans"</span> <span class="attr">table</span>=<span class="string">"cust_linkman"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"LinkMan"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>联系人映射文件配置LinkMan.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"LinkMan"</span> <span class="attr">table</span>=<span class="string">"cst_linkman"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"lkmId"</span> <span class="attr">column</span>=<span class="string">"lkm_id"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 采用数据库提供的主键生成机制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"identity"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmName"</span> <span class="attr">column</span>=<span class="string">"lkm_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmGender"</span> <span class="attr">column</span>=<span class="string">"lkm_gender"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmPhone"</span> <span class="attr">column</span>=<span class="string">"lkm_phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmMobile"</span> <span class="attr">column</span>=<span class="string">"lkm_mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmEmail"</span> <span class="attr">column</span>=<span class="string">"lkm_email"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmPosition"</span> <span class="attr">column</span>=<span class="string">"lkm_position"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lkmMemo"</span> <span class="attr">column</span>=<span class="string">"lkm_memo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">一对多关系映射：从表实体的映射配置</span></span><br><span class="line"><span class="comment">涉及的标签：</span></span><br><span class="line"><span class="comment">many-to-one：</span></span><br><span class="line"><span class="comment">作用:建立多对一的映射配置</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">name:从表实体中引用主表实体的对象引用名称</span></span><br><span class="line"><span class="comment">class：指定属性所对应的实体类名称</span></span><br><span class="line"><span class="comment">column：指定从表中外键字段的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"Customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>native<br>  由Hibernate根据使用的数据库自行判断采用identity、hilo、sequence其中一种作为主键生成方式。 在HIBERNATE配置中native是默认的，泛指的自增，也就是说除了oracle数据库外（oracle下用native需要用到一个叫hibernate_sequence的sequence），大部分数据库你都可以使用默认的native来代表自增。<br>identity<br>  采用数据库提供的主键生成机制。如DB2、SQL Server、MySQL中的主键生成机制。  </p><p>修改hibernate.cfg.xml中的映射地址<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/hnust/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/hnust/domain/LinkMan.hbm.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过实体类生成表结构HibernateUtil.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽取hibernate的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hibernate把可以遇见的异常都转换成运行时异常</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br><span class="line">sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionInInitializerError e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化SessionFactory失败，请检查配置文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取一个新的Session对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sessionFactory.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 从当前线程上获取Session对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sessionFactory.getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成表结构</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把实体类，映射的配置文件都配置好后，执行HibernateUtil的代码，会在数据库中自动生成两个表结构，并且自动配置好了主外键。</p><h3 id="对多关系映射测试"><a href="#对多关系映射测试" class="headerlink" title="对多关系映射测试"></a>对多关系映射测试</h3><p>增删改的测试HibernateDemo1.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.HibernateUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CRUD映射测试</span></span><br><span class="line"><span class="comment"> * 增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 正常保存：创建一个新的联系人，需要关联一个客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询一个客户</span></span><br><span class="line">Customer csut = session.get(Customer.class, <span class="number">1L</span>);<span class="comment">//get方法查询</span></span><br><span class="line"><span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">LinkMan lkm  = <span class="keyword">new</span> LinkMan();</span><br><span class="line">lkm.setLkmName(<span class="string">"映射测试-保存"</span>);</span><br><span class="line"><span class="comment">//3.创建客户与联系人的映射，让联系人知道自己属于哪个客户</span></span><br><span class="line">lkm.setCustomer(csut);</span><br><span class="line"><span class="comment">//4.保存联系人</span></span><br><span class="line">session.save(lkm);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 创建一个客户和一个联系人</span></span><br><span class="line"><span class="comment"> * 建立联系人和客户的双向关联关系</span></span><br><span class="line"><span class="comment"> * 使用符合原则的保存：</span></span><br><span class="line"><span class="comment"> * 原则是，先保存主表实体，再保存从表实体</span></span><br><span class="line"><span class="comment"> * 执行之后会多一条insert语句</span></span><br><span class="line"><span class="comment"> * 解决办法：</span></span><br><span class="line"><span class="comment"> * 让客户执行操作的时候，放弃维护关联关系的权利</span></span><br><span class="line"><span class="comment"> * 配置方式：</span></span><br><span class="line"><span class="comment"> * 在Customer的映射配置文件中的set标签上使用inverse属性</span></span><br><span class="line"><span class="comment"> * inverse含义：是否放弃维护关联关系的权利</span></span><br><span class="line"><span class="comment"> * true：放弃</span></span><br><span class="line"><span class="comment"> * false：不放弃（默认值）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个客户</span></span><br><span class="line">Customer csut =  <span class="keyword">new</span> Customer();<span class="comment">//瞬时态</span></span><br><span class="line">csut.setCustName(<span class="string">"映射测试-保存2"</span>);</span><br><span class="line"><span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">LinkMan lkm  = <span class="keyword">new</span> LinkMan();<span class="comment">//瞬时态</span></span><br><span class="line">lkm.setLkmName(<span class="string">"映射测试-保存2"</span>);</span><br><span class="line"><span class="comment">//3.建立联系人和客户的关联关系（双向）</span></span><br><span class="line">lkm.setCustomer(csut);<span class="comment">//从表保存主表信息</span></span><br><span class="line">csut.getLinkmans().add(lkm);<span class="comment">//主表保存从表信息</span></span><br><span class="line"><span class="comment">//4.保存，要符合原则</span></span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">session.save(csut);<span class="comment">//持久态  有一级缓存和快照</span></span><br><span class="line">session.save(lkm);<span class="comment">//持久态  有一级缓存和快照</span></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> * 级联保存</span></span><br><span class="line"><span class="comment"> * 使用级联保存，配置的方式，仍然时找到Customer的映射文件的Set标签，在上面加上cascade属性</span></span><br><span class="line"><span class="comment"> * 此时只需要session.save(csut);就可以保存两条信息</span></span><br><span class="line"><span class="comment"> * 在LinkMan的映射文件many-to-one上一样也可以，session.save(lkm)就可以保存所有信息</span></span><br><span class="line"><span class="comment"> * cascade：配置级联操作</span></span><br><span class="line"><span class="comment"> * 级联保存更新的取值：save-update</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个客户</span></span><br><span class="line">Customer csut =  <span class="keyword">new</span> Customer();<span class="comment">//瞬时态</span></span><br><span class="line">csut.setCustName(<span class="string">"映射测试-保存3"</span>);</span><br><span class="line"><span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">LinkMan lkm  = <span class="keyword">new</span> LinkMan();<span class="comment">//瞬时态</span></span><br><span class="line">lkm.setLkmName(<span class="string">"映射测试-保存3"</span>);</span><br><span class="line"><span class="comment">//3.建立联系人和客户的关联关系（双向）</span></span><br><span class="line">lkm.setCustomer(csut);<span class="comment">//从表保存主表信息</span></span><br><span class="line">csut.getLinkmans().add(lkm);<span class="comment">//主表保存从表信息</span></span><br><span class="line"><span class="comment">//4.保存，要符合原则</span></span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">session.save(csut);<span class="comment">//持久态  有一级缓存和快照</span></span><br><span class="line"><span class="comment">//session.save(lkm);//持久态  有一级缓存和快照</span></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 创建一个新的联系人，查询一个已有客户</span></span><br><span class="line"><span class="comment"> * 联系人新联系人和已有客户的双向关联关系</span></span><br><span class="line"><span class="comment"> * 更新客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询一个客户</span></span><br><span class="line">Customer cust = session.get(Customer.class, <span class="number">1L</span>);<span class="comment">//get方法查询</span></span><br><span class="line"><span class="comment">//2.创建一个新的联系人</span></span><br><span class="line">LinkMan lkm  = <span class="keyword">new</span> LinkMan();</span><br><span class="line">lkm.setLkmName(<span class="string">"映射测试-更新"</span>);</span><br><span class="line"><span class="comment">//3.创建客户与联系人的映射(双向)</span></span><br><span class="line">lkm.setCustomer(cust);</span><br><span class="line">cust.getLinkmans().add(lkm);</span><br><span class="line"><span class="comment">//4.更新客户</span></span><br><span class="line">session.update(cust);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> * 删除从表数据就是单表</span></span><br><span class="line"><span class="comment"> * 删除主表数据：</span></span><br><span class="line"><span class="comment"> * 有引用：在删除时，hibernate会把从表的外键字段置为null，然后删除主表信息</span></span><br><span class="line"><span class="comment"> * 如果外键字段有非空约束，则hibernate不能更新外键字段为null，会报错</span></span><br><span class="line"><span class="comment"> * 无引用：就是单表，直接删</span></span><br><span class="line"><span class="comment"> * 级联删除：在实际开发中，要谨慎。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询一个客户</span></span><br><span class="line">Customer cust = session.get(Customer.class, <span class="number">6L</span>);<span class="comment">//get方法查询</span></span><br><span class="line"><span class="comment">//2.删除客户</span></span><br><span class="line">session.delete(cust);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询测试HibernateDemo2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.HibernateUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询</span></span><br><span class="line"><span class="comment"> * 一对多的查询操作</span></span><br><span class="line"><span class="comment"> * OID查询，HQL查询，QBC查询，SQL查询</span></span><br><span class="line"><span class="comment"> * hibernate中最后一种查询：对象导航查询</span></span><br><span class="line"><span class="comment"> * 当两个实体之间有映射关系时，（关联关系可以是4种的任意一种）</span></span><br><span class="line"><span class="comment"> * 我们通过调用getXXX方法既可以实现查询功能（功能由hibernate提供的）</span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> * customer.getLinkMans()就可以得到当前客户下的所有联系人</span></span><br><span class="line"><span class="comment"> * linkman.getCustomer()就可以得到当前联系人的所属客户</span></span><br><span class="line"><span class="comment"> *   关于load方法改为立即加载的方式</span></span><br><span class="line"><span class="comment"> *找到查询实体的映射配置文件，它的class标签上也有一个lazy属性，含义是：是否延迟加载。默认是true（延时加载）。</span></span><br><span class="line"><span class="comment"> *class标签的lazy：它只能管load方法是否延迟加载</span></span><br><span class="line"><span class="comment"> *set标签的lazy：它只管查询关联的集合对象是否延迟加载</span></span><br><span class="line"><span class="comment"> *many-to-one的lazy：它管查询关联的主表实体是否是立即加载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询客户id为1下所有的联系人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询客户</span></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line"><span class="comment">//2.通过客户得到所有的联系人</span></span><br><span class="line">System.out.println(<span class="string">"客户："</span>+customer);</span><br><span class="line">Set&lt;LinkMan&gt; linkman = customer.getLinkmans();</span><br><span class="line">System.out.println(<span class="string">"联系人："</span>+linkman);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询联系人id为1所属的客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//1.查询联系人</span></span><br><span class="line">LinkMan linkman = session.get(LinkMan.class, <span class="number">1L</span>);</span><br><span class="line"><span class="comment">//2.通过客户得到所有的联系人</span></span><br><span class="line">System.out.println(<span class="string">"联系人："</span>+linkman);</span><br><span class="line">System.out.println(<span class="string">"客户："</span>+linkman.getCustomer());</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>在保存操作时，不配置inverse=”true”，除了执行两条insert语句还会执行一句update，执行之后，单独存储时，两条insert完全没问题，因为它就是把信息插进去。但当这两张表有联系时，主表插入没问题，从表单独插入是没有外键的，也就是说它的lkm_cust_id是null，此时还需要进一步操作让其有值，<br>并且这个值是和主表有关的，所以要执行更新这一步骤，使其和主表的主键对应<br>级联操作：保存加更新<br>级联删除，先删除从表信息，再删除主表信息，但有时需要保存从表信息，只删主表信息，比如员工与部门关系，删除一个部门时，就不能把员工信息删了，所以用hibernate删除时会先把外键置null，再把主表删除<br>在映射文件配置save-update后加上delete，用逗号隔开，才能实现级联删除<br>如果想用hibernate删除，记得删除inverse=”true” cascade=”save-update,delete”这句话，不然就是级联删除，从表主表一起删了，如果想用级联删除，上面的inverse和cascade一个不能少，不然会报错<br>查询时，默认是延时加载（lazy默认是true），要提交事务之后才会开始查</p><h2 id="多对多关系映射配置及操作"><a href="#多对多关系映射配置及操作" class="headerlink" title="多对多关系映射配置及操作"></a>多对多关系映射配置及操作</h2><p>用户实体类SysUser<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String userPassword;</span><br><span class="line"><span class="keyword">private</span> Integer userState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多对多关系映射：一个用户可以演多个角色</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;SysRole&gt; roles = <span class="keyword">new</span> HashSet&lt;SysRole&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SysRole&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;SysRole&gt; roles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roles = roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userId = userId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userPassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUserState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserState</span><span class="params">(Integer userState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userState = userState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SysUser [userId="</span> + userId + <span class="string">", userName="</span> + userName + <span class="string">", userPassword="</span> + userPassword</span><br><span class="line">+ <span class="string">", userState="</span> + userState + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>角色实体类SysRole<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long roleId;</span><br><span class="line"><span class="keyword">private</span> String roleName;</span><br><span class="line"><span class="keyword">private</span> String rolePassword;</span><br><span class="line"><span class="keyword">private</span> String roleMome;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多对多关系映射：一个角色可以让多个用户演</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;SysUser&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SysUser&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;SysUser&gt; users)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.users = users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Long roleId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRolePassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rolePassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRolePassword</span><span class="params">(String rolePassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rolePassword = rolePassword;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoleMome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleMome;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleMome</span><span class="params">(String roleMome)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleMome = roleMome;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SysRole [roleId="</span> + roleId + <span class="string">", roleName="</span> + roleName + <span class="string">", rolePassword="</span> + rolePassword + <span class="string">", roleMome="</span></span><br><span class="line">+ roleMome + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户的映射文件SysUser.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"SysUser"</span> <span class="attr">table</span>=<span class="string">"cst_sysuser"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userPassword"</span> <span class="attr">column</span>=<span class="string">"user_password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userState"</span> <span class="attr">column</span>=<span class="string">"user_state"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">一对多关系映射：主表实体的映射配置</span></span><br><span class="line"><span class="comment">涉及的标签：</span></span><br><span class="line"><span class="comment">set：</span></span><br><span class="line"><span class="comment">作用：用于配置set集合属性</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">name：指定实体类中set集合的属性名称</span></span><br><span class="line"><span class="comment">table：指定中间表的名称</span></span><br><span class="line"><span class="comment"> key：</span></span><br><span class="line"><span class="comment"> 作用：用于映射外键字段</span></span><br><span class="line"><span class="comment"> 属性：</span></span><br><span class="line"><span class="comment"> column：指定的是当前实体在中间表的外键字段名称</span></span><br><span class="line"><span class="comment"> many-to-many:</span></span><br><span class="line"><span class="comment"> 作用：用于映射多对多的关系</span></span><br><span class="line"><span class="comment"> 属性:</span></span><br><span class="line"><span class="comment"> class:对方的实体类名称</span></span><br><span class="line"><span class="comment"> cloumn:对方在中间表中的外键字段名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"user_role_ref"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"SysRole"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>角色的映射文件SysRole.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"SysRole"</span> <span class="attr">table</span>=<span class="string">"cst_sysrole"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rolePassword"</span> <span class="attr">column</span>=<span class="string">"role_password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"roleMome"</span> <span class="attr">column</span>=<span class="string">"role_mome"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"user_role_ref"</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"SysUser"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行上面的HibernateUtil生成三个表</p><h3 id="多对多映射测试"><a href="#多对多映射测试" class="headerlink" title="多对多映射测试"></a>多对多映射测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.SysRole;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.SysUser;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.util.HibernateUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多对多增删操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月17日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 保存操作</span></span><br><span class="line"><span class="comment"> *  需求：</span></span><br><span class="line"><span class="comment"> * 创建2个用户和3个角色</span></span><br><span class="line"><span class="comment"> * 让1号用户具备1号和2号角色</span></span><br><span class="line"><span class="comment"> * 让2号用户具备2号和3号角色</span></span><br><span class="line"><span class="comment"> * 保存用户和角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建2个用户</span></span><br><span class="line">SysUser user1 = <span class="keyword">new</span> SysUser();</span><br><span class="line">user1.setUserName(<span class="string">"用户1"</span>);</span><br><span class="line">SysUser user2 = <span class="keyword">new</span> SysUser();</span><br><span class="line">user2.setUserName(<span class="string">"用户2"</span>);</span><br><span class="line"><span class="comment">//创建3个角色</span></span><br><span class="line">SysRole role1 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role1.setRoleName(<span class="string">"角色1"</span>);</span><br><span class="line">SysRole role2 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role2.setRoleName(<span class="string">"角色2"</span>);</span><br><span class="line">SysRole role3 = <span class="keyword">new</span> SysRole();</span><br><span class="line">role3.setRoleName(<span class="string">"角色3"</span>);</span><br><span class="line"><span class="comment">//让1号用户具备1号和2号角色(双向：让1号2号角色有1号用户)</span></span><br><span class="line">user1.getRoles().add(role1);</span><br><span class="line">user1.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">role1.getUsers().add(user1);</span><br><span class="line">role2.getUsers().add(user1);</span><br><span class="line"><span class="comment">//让2号用户具备2号和3号角色(双向：让2号3号角色有2号用户)</span></span><br><span class="line">user2.getRoles().add(role2);</span><br><span class="line">user2.getRoles().add(role3);</span><br><span class="line"></span><br><span class="line">role2.getUsers().add(user2);</span><br><span class="line">role3.getUsers().add(user2);</span><br><span class="line"><span class="comment">//保存用户和角色</span></span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">session.save(user1);</span><br><span class="line">session.save(user2);</span><br><span class="line">session.save(role1);</span><br><span class="line">session.save(role2);</span><br><span class="line">session.save(role3);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Session session = HibernateUtil.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">SysUser user1 = session.get(SysUser.class, <span class="number">1L</span>);</span><br><span class="line">session.delete(user1);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试保存操作时，让任意一方放弃维护关联关系，不然会报主键异常错误，也就是只有一个配置文件中写inverse，在执行delete时，我删除的是用户1，它关联了角色1和角色2，因为用了级联删除，所以角色1和角色2都被删除，但用户2也可以演角色2，这显然不行，这就是为什么多对多级联删除禁止</p><h2 id="代码：Github地址"><a href="#代码：Github地址" class="headerlink" title="代码：Github地址"></a>代码：Github地址</h2><p><a href="https://github.com/Lzengp/HibernateTest1" target="_blank" rel="noopener">一对多映射HibernateTest1</a><br><a href="https://github.com/Lzengp/HibernateTest2" target="_blank" rel="noopener">多对多映射HibernateTest2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题总纲&quot;&gt;&lt;a href=&quot;#问题总纲&quot; class=&quot;headerlink&quot; title=&quot;问题总纲&quot;&gt;&lt;/a&gt;问题总纲&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;数据库中表关系&lt;/li&gt;
&lt;li&gt;如何确立数据库中的表关系&lt;/li&gt;
&lt;li&gt;学习多表映射配置要遵循的步骤&lt;/li&gt;
&lt;li&gt;一对多关系映射配置及操作&lt;/li&gt;
&lt;li&gt;多对多关系映射配置及操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="一对多映射" scheme="http://lzengp.cn/tags/%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/"/>
    
      <category term="多对多映射" scheme="http://lzengp.cn/tags/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记(二)</title>
    <link href="http://lzengp.cn/2018/09/16/Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://lzengp.cn/2018/09/16/Hibernate学习笔记(二)/</id>
    <published>2018-09-16T07:52:20.000Z</published>
    <updated>2018-09-19T06:48:30.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate中的查询方式"><a href="#Hibernate中的查询方式" class="headerlink" title="Hibernate中的查询方式"></a>Hibernate中的查询方式</h2><blockquote><p>hibernate中一共有5种查询方式<br>OID查询：根据id查询一个实体<br>涉及方法：get和load<br>SQL查询：使用SQL语句查询数据库<br>涉及方式：第一种：SQLQuery（一般不怎么用）第二种：session的doWork方法，它可以拿到Connection<br>HQL查询：使用HQL语句查询数据库<br>QBC查询：使用Criteria对象查询数据库<br>对象导航查询    </p></blockquote><a id="more"></a><p><strong>只讲HQL查询</strong></p><h2 id="Query对象"><a href="#Query对象" class="headerlink" title="Query对象"></a>Query对象</h2><p>它是hibernate中的HQL查询方式<br>HQL：hibernate query language<br>获取该对象：session对象的方法<br>涉及的对象和方法：createQuery(String hql);<br>方法中的参数的含义：<br>        SQL： select cust_id from cust_customer<br>        HQL： select custId from Customer<br>        HQL语句就是把sql语句的表名换成类名，把字段名换成实体类中的属性名</p><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>工具类HibernateUtil<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽取hibernate的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年9月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hibernate把可以遇见的异常都转换成运行时异常</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br><span class="line">sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionInInitializerError e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化SessionFactory失败，请检查配置文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取一个新的Session对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sessionFactory.openSession();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 基本查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>占位符条件查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer where custLevel=?  and custAddress=? "</span>);</span><br><span class="line">query.setString(<span class="number">0</span>, <span class="string">"12"</span>);</span><br><span class="line">query.setString(<span class="number">1</span>, <span class="string">"长沙"</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>冒号参数名(:参数名)条件查询，注意冒号和参数名之间不能有空格,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer where custLevel= :custLevel  and custAddress like :custAddress"</span>);</span><br><span class="line">query.setParameter(<span class="string">"custAddress"</span>, <span class="string">"%长%"</span>);</span><br><span class="line">query.setParameter(<span class="string">"custLevel"</span>, <span class="string">"12"</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer order by custId desc"</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>mysql分页关键字limit<br>Limit的两个参数含义<br>    第一个：查询的开始记录索引<br>    第二个：每次查询的条数<br>hibernate为我们提供了两个方法<br>    setFirstResult：设置查询的开始记录索引<br>    setMaxResults:设置每次查询的条数<br>不管是用什么数据库，涉及分页的都是这两个方法因为SQL语句的生成已经是hibernate的事了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">query.setFirstResult(<span class="number">1</span>);</span><br><span class="line">query.setMaxResults(<span class="number">2</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="统计查询"><a href="#统计查询" class="headerlink" title="统计查询"></a>统计查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 统计查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"select count(*) from Customer "</span>);</span><br><span class="line"><span class="comment">//List list = query.list();</span></span><br><span class="line"><span class="comment">//for(Object o:list) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(o);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">Long count  = (Long) query.uniqueResult();<span class="comment">//返回结果唯一，可以用，不唯一用的话会报错</span></span><br><span class="line">System.out.println(count);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="投影查询（只查询需要的字段）"><a href="#投影查询（只查询需要的字段）" class="headerlink" title="投影查询（只查询需要的字段）"></a>投影查询（只查询需要的字段）</h2><p>当我们在查询实体时，只需要部分字段，而不是全部。并且希望它的返回结果使用实体类来封装，而不是Object{}这个时候我们称为创建实体类的投影<br>投影查询的用法：<br>1.查询语句需要使用new关键字<br>2.在实体类中添加对应参数列表的构造函数<br>在实体类添加以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Long custId, String custName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custId = custId;</span><br><span class="line"><span class="keyword">this</span>.custName = custName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(<span class="string">"select new cn.hnust.domain.Customer(custId,custName) from Customer "</span>);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>QBC的全称：Query By Criteria<br>它是一种更加面向对象的查询方式，它把生成语句的过程全都融入到方法之中了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 基本查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line">Query query = session.createQuery(Customer.class);</span><br><span class="line">List list = query.list();</span><br><span class="line"><span class="keyword">for</span>(Object o:list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>truncate table cust_Customer重建表结构（删除所有信息）,删除表中的数据的方法有delete,truncate, 其中TRUNCATE TABLE用于删除表中的所有行，而不记录单个行删除操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hibernate中的查询方式&quot;&gt;&lt;a href=&quot;#Hibernate中的查询方式&quot; class=&quot;headerlink&quot; title=&quot;Hibernate中的查询方式&quot;&gt;&lt;/a&gt;Hibernate中的查询方式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;hibernate中一共有5种查询方式&lt;br&gt;OID查询：根据id查询一个实体&lt;br&gt;涉及方法：get和load&lt;br&gt;SQL查询：使用SQL语句查询数据库&lt;br&gt;涉及方式：第一种：SQLQuery（一般不怎么用）第二种：session的doWork方法，它可以拿到Connection&lt;br&gt;HQL查询：使用HQL语句查询数据库&lt;br&gt;QBC查询：使用Criteria对象查询数据库&lt;br&gt;对象导航查询    &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="HQL查询" scheme="http://lzengp.cn/tags/HQL%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate学习笔记(一)</title>
    <link href="http://lzengp.cn/2018/09/14/Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/09/14/Hibernate学习笔记(一)/</id>
    <published>2018-09-14T02:49:20.000Z</published>
    <updated>2018-09-19T06:48:32.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>Session接口负责执行被持久化对象的CRUD操作（CRUD的任务是完成与数据库的交流，包含了很多常见的SQL语句）。但需要注意的是Session对象是非线程安全的。同时，Hibernate的session不同于JSP应用中的HttpSession，这里当使用session这个术语时，其实指的是Hibernate中的session，而以后会将HttpSession对象称为用户session<br>Session是应用程序与数据库之间交互操作的一个单线程对象，是Hibernate运作中心，它的功能是为持久化对象提供创建、读取和删除的能力，所有持久化对象必须在session的管理下才可以持久化操作<br>创建SessionFactory实例后，就可以通过它获取Session实例。获取Session实例有两种方式，一种是通过openSession()方法，另一种是通过getCurrenSession()方法。两种方法获取session的代码如下</p></blockquote><a id="more"></a><pre><code>//采用openSession方法创建sessionSession session = sessionFactory.openSession();//采用getCurrentSession()方法创建sessionSession session = sessionFactory.getCurrentSession();</code></pre><p>以上两种获取session对象实例方法的主要区别是，采用openSession方法获取Session实例时，SessionFactory直接创建一个新的Session实例，并且在使用完成之后需要调用close方法进行手动关闭。而getCurrentSession方法创建的Session实例会被绑定到当前线程中，它在提交或者回滚操作时会自动关闭，在没有配置Session绑定当前线程之前，getCurrentSession方法无法使用。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>sava(Object entity);//保存一个实体到数据库<br>update(Object entity);//更新一个实体<br>delete(Object entity);//删除一条实体<br>get(Class class,Serializable);load();//根据id查询一个实体。参数含义：Class表示要查询的实体类字节码。Serializable就是查询条件。<br>beginTransaction();//开启事务，并返回事务对象</p><p>细节：<br>由于SessionFactory已经维护了很多数据，所以Session就维护较少的内容<br>它是一个轻量级对象，并且它不是线程安全的！！！！<br>它维护了hibernate的一级缓存<br>它的反复创建销毁不会消耗太多资源</p><p>使用原则：<br>每一个线程都只有一个Session对象</p><p>为什么实现序列化<br>实现Serializable序列化：<br>所谓的Serializable,就是java提供的通用数据保存和读取的接口。至于从什么地方读出来和保存到哪里<br>去都被隐藏在函数参数的背后了。这样子，任何类型只要实现了Serializable接口，就可以被保存到文件中，或者作为数据流通过网络发送<br>到别的地方。也可以用管道来传输到系统的其他程序中。这样子极大的简化了类的设计。只要设计一个保存一个读取功能就能解决上面说得所有问题。</p><h2 id="OID"><a href="#OID" class="headerlink" title="OID"></a>OID</h2><p>JVM内存中区分两个对象是否时同一个对象靠的是内存的地址，只要地址不相同，就可以创建两个对象。<br>Hibernate内存就是把对象看成Session对象，对象标识符：OID，hibernate中OID一致的对象，就认为是同一个对象，在一个Session，不允许出现两个相同类型的对象的OID一致。OID就是映射文件，对应数据库主键的属性<br>MySQL中区分记录是否相同，靠的是主键，表中不允许出现相同主键的两条数据。</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p>自然主键(业务主键)：它的作用只是用于区分数据库中的记录的，不参与程序的业务逻辑<br>increment（一般不用：increment策略是指,不使用数据库本地的自增长策略,而是由程序(Hibernate框架)产生一个自增长的ID值,赋予数据库.<br>每次插入前都会去查询表中id最大的值,然后+1作为新主键</p><p>代理主键(逻辑主键)：它不仅是用于区分数据库中记录的，还会参与程序的业务逻辑，自然主键一般都设计为有规律的<br>idenitty：identity策略,指定使用数据库里面的ID自增长策略. 只能用于支持ID自增长功能的数据库,如:MySQL,SQLServer.. 不支持没有ID自增长策略的数据库,如Oracle,DB2..<br>sequence：使用序列的实现ID生成策略,主要用于有序列的数据库.如:Oracle,DB2,如果不支持序列的数据库（如:MYSQL），该策略会使用一个表模拟序列。<br>native：使用数据库本地的策略,就是数据库里面使用怎么样的策略就用什么策略,HIbernate不做任何的判断.如:MySQL数据库使用了increment_auto,自增长策略.使用native.表示直接调用数据库里面的increment_auto策略.<br>uuid：就是数据库的主键是使用一个唯一的==字符串==的来存储.这个唯一的字符串就是UUID<br>主键必须为String类型</p><h2 id="一级缓存和快照机制"><a href="#一级缓存和快照机制" class="headerlink" title="一级缓存和快照机制"></a>一级缓存和快照机制</h2><p>缓存:内存中临时数据，它可以减少和数据库交互次数，从而提高查询效率<br>适用缓存的数据：经常查询，并且不经常修改的，同时数据一旦出现问题对最终结果影响不大的<br>不适用缓存的数据：不管是否经常查询，只是经常修改的，都可以不用缓存，并且如果数据由于使用缓存，产生了异常数据，对最终结果影响很大，则不能使用。例如：股市的牌价，银行的汇率，商品的库存等等。<br>案例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtil.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//根据id查询客户</span></span><br><span class="line">Customer c = session.get(Customer.class,<span class="number">1L</span>);</span><br><span class="line">System.out.println(c.getCustAddress());<span class="comment">//输出长沙</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改客户地址为  湘潭</span></span><br><span class="line">c.setCustAddress(<span class="string">"湘潭"</span>)；</span><br><span class="line">System.out.println(c.getCustAddress());<span class="comment">//输出湘潭</span></span><br><span class="line"><span class="comment">//没有写update语句</span></span><br><span class="line">tx.commit();</span><br><span class="line">session.close();</span><br><span class="line"><span class="comment">//打印c的address，这个c是可以用的</span></span><br><span class="line">System.out.println(c.getCustAddress());<span class="comment">//输出湘潭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上程序中没有直接调用update方法，同样也对数据修改成功。主要是借助了Hibernate的快照功能<br>Hibernate向一级缓存放入数据时，同时复制一份数据放入到Hibernate快照中，当使用commit()方法提交事务时，同时会清理Session的一级缓存，这时会使用OID判断一级缓存中的对象和快照中的对象是否一致，如果两个对象中的属性发生变化，则执行update语句，将缓存的内容同步到数据库，并更新快照；如果一致，则不执行update语句。<br>结论：Hibernate快照的作用就是确保一级缓存中的数据和数据库中的数据一致。</p><h2 id="Hibernate中的对象状态"><a href="#Hibernate中的对象状态" class="headerlink" title="Hibernate中的对象状态"></a>Hibernate中的对象状态</h2><p><img src="http://pc57xo61v.bkt.clouddn.com/hibernate3.png" alt=""><br>session对象close之后就不能用了，但clear之后还可以用，只是清除了缓存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Session&quot;&gt;&lt;a href=&quot;#Session&quot; class=&quot;headerlink&quot; title=&quot;Session&quot;&gt;&lt;/a&gt;Session&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Session接口负责执行被持久化对象的CRUD操作（CRUD的任务是完成与数据库的交流，包含了很多常见的SQL语句）。但需要注意的是Session对象是非线程安全的。同时，Hibernate的session不同于JSP应用中的HttpSession，这里当使用session这个术语时，其实指的是Hibernate中的session，而以后会将HttpSession对象称为用户session&lt;br&gt;Session是应用程序与数据库之间交互操作的一个单线程对象，是Hibernate运作中心，它的功能是为持久化对象提供创建、读取和删除的能力，所有持久化对象必须在session的管理下才可以持久化操作&lt;br&gt;创建SessionFactory实例后，就可以通过它获取Session实例。获取Session实例有两种方式，一种是通过openSession()方法，另一种是通过getCurrenSession()方法。两种方法获取session的代码如下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="session" scheme="http://lzengp.cn/tags/session/"/>
    
      <category term="缓存与快照，生成策略，对象状态" scheme="http://lzengp.cn/tags/%E7%BC%93%E5%AD%98%E4%B8%8E%E5%BF%AB%E7%85%A7%EF%BC%8C%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记</title>
    <link href="http://lzengp.cn/2018/09/11/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://lzengp.cn/2018/09/11/Maven学习笔记/</id>
    <published>2018-09-11T07:01:31.000Z</published>
    <updated>2018-09-11T07:11:38.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h2><blockquote><p>Maven项目对象模型(POM),可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。<br>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。<br>Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。<a href="https://baike.baidu.com/item/Maven/6094909?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p></blockquote><a id="more"></a><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>Maven通过pom.xml配置文件去本地仓库找对应的jar包，而不用把jar包放在项目中，这样大大的减少了项目的大小，比如我之前建SSM项目导入的jar包就要10多M，现在几KB就可以了。maven项目中需要某一个jar包，只需要在maven项中配置需要的jar包坐标信息，maven程序根据jar包的坐标信息去jar仓库中查找jar包，就是对jar包的统一管理。</p><h2 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h2><p>1.在线安装，只是很慢（可能要很久，不建议使用），还有其他的安装，大家自己可去百度查<br>打开eclipse点击help–&gt;Install New Software,然后输入要下载插件的链接地址[<a href="http://m2eclipse.sonatype.org/sites/m2e" target="_blank" rel="noopener">http://m2eclipse.sonatype.org/sites/m2e</a> ]<br>如下图<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven1.png" alt=""><br>勾选择要下载的项，点击下一步进行下载。下载完成会自动安装。安装速度跟你自身网速和服务器有关。<br>2.下载安装包安装<br>（1）去官网下载maven安装包，<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">地址</a><br>（2）解压文件C:\Maven<br>（3）配置环境变量<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven2.png" alt=""><br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven3.png" alt=""></p><p>（4）验证，DOS输入mvn -v，出现一下信息表示安装成功<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven4.png" alt=""></p><p>这篇博客介绍的很详细，我也是照它学习的，本地仓库配置也介绍了，很不错<br><a href="https://www.cnblogs.com/eagle6688/p/7838224.html" target="_blank" rel="noopener">传送门</a></p><h2 id="用maven搭建一个简单的web项目"><a href="#用maven搭建一个简单的web项目" class="headerlink" title="用maven搭建一个简单的web项目"></a>用maven搭建一个简单的web项目</h2><p>首先File–&gt;New–&gt;Maven Project<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven5.png" alt=""><br>如果没看到Maven Project，可在other 里面搜索<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven6.png" alt=""></p><p>点击Next<br>  <img src="http://pc57xo61v.bkt.clouddn.com/Maven7.png" alt=""><br>选择webapp，再点击Next<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven8.png" alt=""></p><p>groupid和artifactId被统称为“坐标”是为了保证项目唯一性而提出的，如果你要把你项目弄到maven本地仓库去，你想要找到你的项目就必须根据这两个id去查找。<br>　　groupId一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。举个apache公司的tomcat项目例子：这个项目的groupId是org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artigactId是tomcat。<br>比如我创建一个项目，我一般会将groupId设置为cn.hnsut，cn表示域为中国，hnust是我学校的缩写，artifactId设置为mweb，表示你这个项目的名称是mweb，依照这个设置，你的包结构最好是cn.hnust.mweb打头的，如果有个TestMaven类，它的全路径就是cn.hnust.mweb.TestMaven<br>  <img src="http://pc57xo61v.bkt.clouddn.com/Maven9.png" alt=""><br>建成之后就会出现如下的目录，如果只有resources文件，可以这样操作：项目右键-&gt;buildPath configure Build Path-&gt;点击选项卡Libraries-&gt;选中JRE System Library-&gt;<br>点击edit-&gt;选中Alternate JRE-&gt;选择jdk-&gt;点击finish，点击ok，自动出现src/main/java和src/test/java<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven10.png" alt=""></p><p>其中src才是编译的代码区，源文件Java Resouces其实我们可以自己创建和删除，一般都在这里写代码，因为目录结构清晰，这只是开发人员用来方便于开发抽离抽来的目录。在java Resources目录下创建一个包，src在中自动会出现这个包。打开项目文件夹我们可以发现只有一个src文件，也就是说这两个其实是同一个文件夹。</p><h2 id="测试（使用Jetty）"><a href="#测试（使用Jetty）" class="headerlink" title="测试（使用Jetty）"></a>测试（使用Jetty）</h2><p>修改端口号和访问路径，点击Apply然后点击Run<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven11.png" alt=""><br>在浏览器输入上图的地址<br> <img src="http://pc57xo61v.bkt.clouddn.com/Maven12.png" alt=""><br>一个简单的web项目就搭建好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Maven介绍&quot;&gt;&lt;a href=&quot;#Maven介绍&quot; class=&quot;headerlink&quot; title=&quot;Maven介绍&quot;&gt;&lt;/a&gt;Maven介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Maven项目对象模型(POM),可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。&lt;br&gt;Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。&lt;br&gt;Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。&lt;a href=&quot;https://baike.baidu.com/item/Maven/6094909?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://lzengp.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Jetty和Tomcat的比较以及它的使用与配置</title>
    <link href="http://lzengp.cn/2018/08/30/Jetty%E5%92%8CTomcat%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%A5%E5%8F%8A%E5%AE%83%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://lzengp.cn/2018/08/30/Jetty和Tomcat的比较以及它的使用与配置/</id>
    <published>2018-08-30T02:30:42.000Z</published>
    <updated>2018-09-03T02:26:14.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。<br>它的所有组件都是基于 Handler 来实现，当然它也支持 JMX。但是主要的功能扩展都可以用 Handler 来实现。可以说 Jetty 是面向 Handler 的架构，就像 Spring 是面向 Bean 的架构，iBATIS 是面向 statement 一样，而 Tomcat 是以多级容器构建起来的，它们的架构设计必然都有一个“元神”，所有以这个“元神“构建的其它组件都是肉身。</p></blockquote><a id="more"></a><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>相同点<br>1.tomcat与jetty都是一种servlet引擎，他们都支持标准的servlet规范和javaEE规范</p><p>不同点<br>1.架构比较<br>jetty相比tomcat更为简单<br>jetty架构是基于Handler来实现的，主要的扩展功能都可以用Handler来实现，扩展简单<br>tomcat的框架是基于容量设计的，进行扩展是需要了解tomcat的整体设计结构，不易扩展<br>2.性能比较<br>jetty和tomcat性能方面差异不大<br>jetty可以同时处理大量链接而且可以长时间保持链接，适合于javaWeb聊天应用<br>jetty的架构简单，因此作为服务器，jetty可以按需加载组件，减少不需要的组件，减少了服务器内存开销，从而提高服务器性能<br>jetty默认采用NIO结束来处理I/o请求上更占优势，在处理静态资源时，性能较高</p><p>tomcat适合处理少数非常繁忙的连接，也就是连接生命周期短的话，tomcat的总体性能更高<br>tomcat默认采用B/o处理I/o请求，在处理静态资源时，性能较差</p><p>3.其他比较<br>jetty的应用更加快捷，修改简单，对新的servlet规范的支持更好<br>tomcat目前应用比较广泛，对javaEE和servlet的支持更加全面，很多特性会直接集成进来</p><h2 id="Eclipsea安装Jetty"><a href="#Eclipsea安装Jetty" class="headerlink" title="Eclipsea安装Jetty"></a>Eclipsea安装Jetty</h2><p>Help&gt;Eclipse Marketplaces<br><img src="http://pc57xo61v.bkt.clouddn.com/Jetty1.png" alt=""></p><p>安装<br><img src="http://pc57xo61v.bkt.clouddn.com/Jetty2.png" alt=""></p><p>配置<br><img src="http://pc57xo61v.bkt.clouddn.com/Jetty3.png" alt=""></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/" target="_blank" rel="noopener">Jetty的原理</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。&lt;br&gt;它的所有组件都是基于 Handler 来实现，当然它也支持 JMX。但是主要的功能扩展都可以用 Handler 来实现。可以说 Jetty 是面向 Handler 的架构，就像 Spring 是面向 Bean 的架构，iBATIS 是面向 statement 一样，而 Tomcat 是以多级容器构建起来的，它们的架构设计必然都有一个“元神”，所有以这个“元神“构建的其它组件都是肉身。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Jetty" scheme="http://lzengp.cn/tags/Jetty/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习笔记(一)</title>
    <link href="http://lzengp.cn/2018/08/20/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/08/20/SpringMVC学习笔记(一)/</id>
    <published>2018-08-20T05:11:25.000Z</published>
    <updated>2018-09-27T07:13:36.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），spring mvc是一个基于mvc的web框架。spring mvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。</p><a id="more"></a><h2 id="SpringMVC的工作原理图"><a href="#SpringMVC的工作原理图" class="headerlink" title="SpringMVC的工作原理图"></a>SpringMVC的工作原理图</h2><p><img src="http://pc57xo61v.bkt.clouddn.com/springmvc1.png" alt=""></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>第一步：发送请求到前端控制器（DispatcherServlet）<br>第二步：前端控制器请求HandlerMapping查找Handler<br>        可以根据xml配置、注解进行查找<br>第三步：处理器映射器HandlerMapping向前端控制器返回Handler<br>第四步：前端控制器调用处理器适配器去执行Handler<br>第五步：处理器适配器去执行Handler<br>第六步：Handler执行完成给适配器返回ModelAndView<br>第七步：处理器适配器向前端控制器返回ModelAndView<br>        ModerAndView是springmvc框架的一个底层对象，包括Model和View<br>第八步：前端控制器请求视图解析器去进行视图解析<br>        根据逻辑图名解析成真正的视图（jsp）<br>第九步：视图解析器向前端控制器返回View<br>第十步：前端控制器进行视图渲染<br>    视图渲染将模型数据（在ModelAndView对象中）填充到request域<br>第十一步：前端控制器向用户响应结果</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供<br>作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。<br>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p><p>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供<br>作用：根据请求的url查找Handler<br>HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><p>3、处理器适配器HandlerAdapter<br>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler<br>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><p>4、处理器Handler(需要工程师开发)<br>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler<br>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p><p>5、视图解析器View resolver(不需要工程师开发),由框架提供<br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p><p>6、视图View(需要工程师开发jsp…)<br>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p><h2 id="SpringMVC常用注解"><a href="#SpringMVC常用注解" class="headerlink" title="SpringMVC常用注解"></a>SpringMVC常用注解</h2><p><code>@Controller</code><br>　　负责注册一个bean 到spring 上下文中<br><code>@RequestMapping</code><br>　　注解为控制器指定可以处理哪些 URL 请求<br><code>@RequestBody</code><br>　　该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上 ,再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上<br><code>@ResponseBody</code><br>　　 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区<br><code>@ModelAttribute</code> 　　　<br>　　在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute 的方法<br>　　在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 –绑定到对象中，再传入入参将方法入参对象添加到模型中<br><code>@RequestParam</code><br>　　在处理方法入参处使用 @RequestParam 可以把请求参 数传递给请求方法<br><code>@PathVariable</code><br>　　绑定 URL 占位符到入参<br><code>@ExceptionHandler</code><br>　　注解到方法上，出现异常时会执行该方法<br><code>@ControllerAdvice</code><br>　　使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>jar包<br><img src="http://pc57xo61v.bkt.clouddn.com/springmvc2.png" alt=""><br>工程目录<br><img src="http://pc57xo61v.bkt.clouddn.com/springmvc3.png" alt=""><br>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee  </span></span></span><br><span class="line"><span class="tag"><span class="string">  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>  </span></span><br><span class="line"><span class="tag"> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springmvc前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation设置springmvc加载的配置文件（配置处理器映射器、适配器等等）</span></span><br><span class="line"><span class="comment">    如果不配置contextConfigLocation，默认加载是/WEB-INF/servlet名称-servlet.xml(spring-servlet.xml)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第一种：*.action，访问以.action结尾由DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">    第二种：/，所有访问地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析</span></span><br><span class="line"><span class="comment">    使用此种方式可以实现RESTful风格的url</span></span><br><span class="line"><span class="comment">    第三种：/*，这样的配置不对，使用这种配置，最终要转发到一个jso页面时，</span></span><br><span class="line"><span class="comment">    仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>springmvc.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"</span>&gt;</span>                    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 可以扫描controller、service、...</span></span><br><span class="line"><span class="comment">    这里让扫描controller，指定contrllor的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust.ssm.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注解映射器和注解适配器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试类ControllerTest<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年8月20日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"helloword"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问test1<br><img src="http://pc57xo61v.bkt.clouddn.com/springmvc4.png" alt=""><br>控制台输出<br><img src="http://pc57xo61v.bkt.clouddn.com/springmvc5.png" alt=""></p><p>访问test2，@ResponseBody注解是直接把返回值打印在界面上<br><img src="http://pc57xo61v.bkt.clouddn.com/springmvc6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h2&gt;&lt;p&gt;springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），spring mvc是一个基于mvc的web框架。spring mvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springmvc原理图" scheme="http://lzengp.cn/tags/springmvc%E5%8E%9F%E7%90%86%E5%9B%BE/"/>
    
      <category term="springmvc注解" scheme="http://lzengp.cn/tags/springmvc%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记(三)</title>
    <link href="http://lzengp.cn/2018/08/14/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
    <id>http://lzengp.cn/2018/08/14/Mybatis学习笔记(三)/</id>
    <published>2018-08-14T04:50:23.000Z</published>
    <updated>2018-09-27T02:11:13.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据模型分析思路"><a href="#数据模型分析思路" class="headerlink" title="数据模型分析思路"></a>数据模型分析思路</h2><blockquote><ol><li>每张表记录的数据内容<br>分模块对每张表记录的内容进行熟悉，相当于学习系统需求（功能）的过程</li><li>每张表重要的字段设置<br>非空字段、外键字段</li><li>数据库级别表与表之间的关系<br>外键关系</li><li>表与表之间的业务关系<br>在分析表与表之间的业务关系时一定要建立在某个业务意义基础上去分析</li></ol></blockquote><a id="more"></a><h3 id="表与表之间的业务关系"><a href="#表与表之间的业务关系" class="headerlink" title="表与表之间的业务关系"></a>表与表之间的业务关系</h3><p>user和orders<br>user–&gt;orders:一个用户可以创建多个订单，一对多<br>orders–&gt;user:一个订单只由一个用户创建，一对一</p><p>orders和orderdetail<br>orders–&gt;orderdetail:一个订单可以包含多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，对多关系<br>orderdetail–&gt;orders:一个订单明细只能包括在一个订单中，一对一</p><p>orderdetail和items<br>orderdetail–&gt;items:一个订单明细只对应一个商品信息，一对一<br>items–&gt;orderdetail:一个商品可以包括多个订单明细，一对多</p><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisMapper1.png" alt=""></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>user用户表：id（自增，主键）、username、sex、birthday、address<br>orders订单表：id（自增，主键）、number、createtime、note（varchar）、user_id（外键）<br>orderdetail订单明细表：id(自增，主键)、orders_id(外键，订单id)、items_id（外键，商品id）、items_num（购买的商品数量）<br>items商品表：id、name、detail（商品详情）、price<br>根据数据库创建四个实体类，得到它们的getter和setter方法。（文末会有github地址，上面有本博客全部代码）</p><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><h3 id="resultType实现一对一映射"><a href="#resultType实现一对一映射" class="headerlink" title="resultType实现一对一映射"></a>resultType实现一对一映射</h3><p>需要执行查询的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> orders.*,</span><br><span class="line">   user.username,</span><br><span class="line">   user.sex,</span><br><span class="line">   user.address </span><br><span class="line"><span class="keyword">FROM</span> orders,<span class="keyword">user</span> </span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id=user.id</span><br></pre></td></tr></table></figure></p><p>因为resultType映射结果为一个类，但所建立的实体类中没有包含所有的输出结果，所以要创建一个中间类，包含查询结果所有的属性。一般的操作是查询结果中谁的属性多就继承谁，然后再新建几个属性。具体代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.po;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Orders扩展类，通过此类映射订单和用户查询的结果，一般谁属性多就继承谁，这样少写些属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年8月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersCustomer</span>  <span class="keyword">extends</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * user.username,</span></span><br><span class="line"><span class="comment"> * user.sex,</span></span><br><span class="line"><span class="comment"> * user.address </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.hnust.mybatis.mapper.OrdersMapperCustomer"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 使用resultType来映射 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.hnust.mybatis.po.OrdersCustomer"</span>&gt;</span></span><br><span class="line"> SELECT orders.*,</span><br><span class="line"> user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address </span><br><span class="line">FROM orders,user </span><br><span class="line">WHERE orders.user_id=user.id</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>映射文件接口类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.po.OrdersCustomer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrdersMapperCustomer接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年8月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrdersMapperCustomer</span> </span>&#123;</span><br><span class="line"><span class="comment">//用resultType实现一对一映射查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrdersCustomer&gt; <span class="title">findOrderUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.po.OrdersCustomer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OrdersUser测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年8月1日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrdersMapperCustomerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建Session工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//得到mybatis配置文件</span></span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//得到配置文件流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * resultTyep实现一对一映射查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrdersCustomer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂创建session</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建OrdersMapperCustomer对象，mybatis自动生成mapper代理对象</span></span><br><span class="line">OrdersMapperCustomer ordersMapperCustomer = sqlSession.getMapper(OrdersMapperCustomer.class);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">List&lt;OrdersCustomer&gt; list = ordersMapperCustomer.findOrderUser();</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">//关闭sqlSession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过打断点debug测试，list中的内容如下图，查询出了两条记录，并且order表中所有内容都有，user表中username,sex,address也都有，测试结果成功，如果想获取第一条数据中的username，可输入list.get(0).getUsername()得到。<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisMapper2.png" alt=""></p><h3 id="resultMap实现一对一查询"><a href="#resultMap实现一对一查询" class="headerlink" title="resultMap实现一对一查询"></a>resultMap实现一对一查询</h3><p>在映射文件中添加如下内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用resultMap来映射 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- type:要映射的类</span></span><br><span class="line"><span class="comment">     id：resultMap标识名</span></span><br><span class="line"><span class="comment">     column：数据库里面的名字</span></span><br><span class="line"><span class="comment">     peoperty：类里面的名字</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.hnust.mybatis.po.Orders"</span> <span class="attr">id</span>=<span class="string">"OrdersResultMap"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 配置映射的关联的用户信息</span></span><br><span class="line"><span class="comment"> association:用与映射关联查询单个对象的信息，映射单个记录</span></span><br><span class="line"><span class="comment"> property：将要关联查询的用户信息映射到Orders中哪个属性</span></span><br><span class="line"><span class="comment"> javaType：映射到user的哪个属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.hnust.mybatis.po.User"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用resultMap来映射 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderUserResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersResultMap"</span>&gt;</span></span><br><span class="line"> SELECT orders.*,</span><br><span class="line"> user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address </span><br><span class="line">FROM orders,user </span><br><span class="line">WHERE orders.user_id=user.id</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>实体类Orders中添加用户信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户信息（resultMap）</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加映射文件接口，再在测试类中修改调用的方法，Debug测试查看结果<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisMapper3.png" alt=""></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现一对一查询<br>resultType：使用resultType较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，既可完成映射。<br>如果没有查询结果的特殊要求建议使用resultType<br>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊要求，使用resultMap可以完成将关联查询映射pojo属性中</p><p>resultMap可以实现延迟加载，resultType无法实现延迟加载</p><h2 id="resultMap实现一对多查询"><a href="#resultMap实现一对多查询" class="headerlink" title="resultMap实现一对多查询"></a>resultMap实现一对多查询</h2><p>需要执行的查询语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address,</span><br><span class="line">orderdetail.id orderdetail_id,</span><br><span class="line">orderdetail.items_id,</span><br><span class="line">orderdetail.items_num </span><br><span class="line"><span class="keyword">FROM</span> orders,<span class="keyword">user</span>,orderdetail</span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id=user.id <span class="keyword">AND</span> orders.id=orderdetail.orders_id</span><br></pre></td></tr></table></figure></p><p>数据库查询结果<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisMapper4.png" alt=""><br>发现有两条一样的订单，虽然里面的数据确不一样，但这显然是不允许的，应该是一条订单包含这两条明细<br>要求：对orders映射不能出现重复记录<br>方案：在orders类中添加<code>List&lt;Orderdetail&gt; orderdetails</code>属性。<br>最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的orderdetails属性中<br>映射成的orders记录数为两条（orders信息不重复）<br>每个orders中的orderdetails属性存储了所有订单所对应的订单明细</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在orders类中添加orderdetails属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单明细表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Orderdetail&gt; orderdetails;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Orderdetail&gt; <span class="title">getOrderdetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderdetails;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderdetails</span><span class="params">(List&lt;Orderdetail&gt; orderdetails)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderdetails = orderdetails;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 订单及订单明细的resultMap</span></span><br><span class="line"><span class="comment">使用extends继承，不用再配置订单信息和用户信息</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.hnust.mybatis.po.Orders"</span> <span class="attr">id</span>=<span class="string">"OrdersAndOrderdetailResultMap"</span></span></span><br><span class="line"><span class="tag"><span class="attr">extends</span>=<span class="string">"OrdersResultMap"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 订单信息，使用extends继承  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 用户信息， 使用extends继承 --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 订单明细信息 </span></span><br><span class="line"><span class="comment"> 一个订单关联查询出了多条明细，要使用collection进行映射</span></span><br><span class="line"><span class="comment"> collection：对关联查询到多条记录映射到集合对象中</span></span><br><span class="line"><span class="comment"> property：将关联查询到多条记录映射到Orders属性中</span></span><br><span class="line"><span class="comment"> ofType:指定映射到list集合属性中pojo的类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetail"</span> <span class="attr">ofType</span>=<span class="string">"cn.hnust.mybatis.po.Orderdetail"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id:订单明细唯一标识</span></span><br><span class="line"><span class="comment">  property：要将订单明细的唯一标识映射到Orderdetail的某个属性</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersAndOrderdetailResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersAndOrderdetailResultMap"</span>&gt;</span></span><br><span class="line"> SELECT orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address,</span><br><span class="line">orderdetail.id orderdetail_id,</span><br><span class="line">orderdetail.items_id,</span><br><span class="line">orderdetail.items_num </span><br><span class="line">FROM orders,user,orderdetail</span><br><span class="line">WHERE orders.user_id=user.id AND orders.id=orderdetail.orders_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试结果<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisMapper5.png" alt=""><br>可以看到查询出两条订单信息，而不是四条订单信息，在一条订单信息中包含两条订单明细。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中<br>使用resultType实现：<br>将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放到ordertails中</p><h2 id="resultMap实现多对多映射查询"><a href="#resultMap实现多对多映射查询" class="headerlink" title="resultMap实现多对多映射查询"></a>resultMap实现多对多映射查询</h2><p>实现user和items的多对多查询<br>需要实现的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address,</span><br><span class="line">orderdetail.id orderdetail_id,</span><br><span class="line">orderdetail.items_id,</span><br><span class="line">orderdetail.items_num ,</span><br><span class="line">items.name items_name,</span><br><span class="line">items.price items_price,</span><br><span class="line">items.detail items_detail</span><br><span class="line"><span class="keyword">FROM</span> orders,<span class="keyword">user</span>,orderdetail,items</span><br><span class="line"><span class="keyword">WHERE</span> orders.user_id=user.id <span class="keyword">AND</span> orders.id=orderdetail.orders_id <span class="keyword">AND</span> orderdetail.items_id=items.id</span><br></pre></td></tr></table></figure></p><p>思路：<br>将用户信息映射到user中<br>在user类中添加订单列表属性<code>List&lt;Orders&gt; orderlist</code>,将用户创建的订单映射到orderlist中<br>在Orders中添加订单明细列表属性<code>List&lt;Orderdetail&gt; orderdetails</code>,将订单的明细映射到orderdetails<br>在Orderdetail中添加items属性，将订单明细所对应的商品映射到items<br>按照上面的思路，在各个实体类中添加以上的属性，然后在映射文件中添加如下代码<br>查询的结果主要放在user中，而为了让user和itmes有联系，就需要用到orders和orderdetail，先将用户创建的订单映射到用户表中的订单列表属性，用户与订单是一对多，要用到collection关键字。再将订单生成的订单明细映射到订单表的订单明细列表属性中，订单和订单明细是一对多，也要用到关键字collection，但这个collection需要建立在第一个collection的基础上才有的，所有要写在它里面。最后将订单明细中的商品信息映射到订单明细表的商品属性中，它们是一对一，要用关键字association，它是建立在第二个collection的基础上的，所以要放到第二个collection的里面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 查询用户及购买的商品 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.hnust.mybatis.po.User"</span> <span class="attr">id</span>=<span class="string">"UserAndItemsResultMap"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 用户信息 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 订单信息</span></span><br><span class="line"><span class="comment"> 一个用户对应多个订单，使用collection映射</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"cn.hnust.mybatis.po.Orders"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 订单明细 </span></span><br><span class="line"><span class="comment">一个订单包含多个订单明细</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetails"</span> <span class="attr">ofType</span>=<span class="string">"cn.hnust.mybatis.po.Orderdetail"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 商品信息</span></span><br><span class="line"><span class="comment"> 一个订单明细对应一个商品</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"items"</span> <span class="attr">javaType</span>=<span class="string">"cn.hnust.mybatis.po.Items"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_detail"</span> <span class="attr">property</span>=<span class="string">"detail"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询用户及购买的商品信息，使用resultMap --&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndItemsResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"UserAndItemsResultMap"</span>&gt;</span></span><br><span class="line">SELECT orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">user.sex,</span><br><span class="line">user.address,</span><br><span class="line">orderdetail.id orderdetail_id,</span><br><span class="line">orderdetail.items_id,</span><br><span class="line">orderdetail.items_num ,</span><br><span class="line">items.name items_name,</span><br><span class="line">items.price items_price,</span><br><span class="line">items.detail items_detail</span><br><span class="line">FROM orders,user,orderdetail,items</span><br><span class="line">WHERE orders.user_id=user.id AND orders.id=orderdetail.orders_id AND orderdetail.items_id=items.id</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="resultMap小结"><a href="#resultMap小结" class="headerlink" title="resultMap小结"></a>resultMap小结</h2><p><strong>resultType</strong><br>作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中<br>场合：常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</p><p><strong>resultMap</strong><br>使用association和collection完成一对一和一对多高级映射</p><p><strong>association</strong><br>作用：将关联查询信息映射到一个pojo对象中。<br>场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息，<br>使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果查询遍历的需要选择使用resultType还是resultMap</p><p><strong>collection</strong><br>作用：将关联查询信息映射到一个list集合中。<br>场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可以使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样做的的目的也是方便对查询结果集进行遍历查询。<br>如果使用resultType无法将查询结果映射到list集合中</p><p><a href="https://github.com/Lzengp/MybatisMapper" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据模型分析思路&quot;&gt;&lt;a href=&quot;#数据模型分析思路&quot; class=&quot;headerlink&quot; title=&quot;数据模型分析思路&quot;&gt;&lt;/a&gt;数据模型分析思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;每张表记录的数据内容&lt;br&gt;分模块对每张表记录的内容进行熟悉，相当于学习系统需求（功能）的过程&lt;/li&gt;
&lt;li&gt;每张表重要的字段设置&lt;br&gt;非空字段、外键字段&lt;/li&gt;
&lt;li&gt;数据库级别表与表之间的关系&lt;br&gt;外键关系&lt;/li&gt;
&lt;li&gt;表与表之间的业务关系&lt;br&gt;在分析表与表之间的业务关系时一定要建立在某个业务意义基础上去分析&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="高级映射" scheme="http://lzengp.cn/tags/%E9%AB%98%E7%BA%A7%E6%98%A0%E5%B0%84/"/>
    
      <category term="resultMap与resultType" scheme="http://lzengp.cn/tags/resultMap%E4%B8%8EresultType/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记(二)</title>
    <link href="http://lzengp.cn/2018/08/12/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://lzengp.cn/2018/08/12/Mybatis学习笔记(二)/</id>
    <published>2018-08-12T04:50:23.000Z</published>
    <updated>2018-09-21T09:25:07.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote><p>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。<br>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的<br>为什么要用缓存？<br>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</p></blockquote><a id="more"></a><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache1.png" alt=""></p><h2 id="一级缓存原理"><a href="#一级缓存原理" class="headerlink" title="一级缓存原理"></a>一级缓存原理</h2><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache2.png" alt=""><br>第一次发起查询用户id为1的用户信息，先去找缓存中是否有1的用户，如果有的话拿去用，如果没有去数据库中查去。得到用户信息放入一级缓存中去。<br>如果SqlSession去执行commit操作（执行插入、删除、更新）的话，清空SqlSession中的一级缓存，这样做就是为了让缓存中的数据保持最新，避免脏读。<br>第二次发起查询用户id为1的用户信息，先去缓存中查找是否有id为1的用户信息，缓存中有，直接从缓存中获取</p><h2 id="一级缓存测试"><a href="#一级缓存测试" class="headerlink" title="一级缓存测试"></a>一级缓存测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一级缓存测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();<span class="comment">//创建代理对象</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);<span class="comment">//动态代理对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个sqlSession</span></span><br><span class="line"><span class="comment">//第一次发起请求，查询id为1的用户</span></span><br><span class="line">User user1 =  userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"user1："</span>+user1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存</span></span><br><span class="line"><span class="comment"> * 这样做的目的是为了让缓存中的数据是最新的，避免脏读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="comment">//User user = new User();</span></span><br><span class="line"><span class="comment">//user.setId(1);</span></span><br><span class="line"><span class="comment">//user.setUsername("张四");</span></span><br><span class="line"><span class="comment">//userMapper.updateUser(user);</span></span><br><span class="line"><span class="comment">////提交事务，清空缓存</span></span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line"><span class="comment">//第二次发起请求，查询id为1的用户</span></span><br><span class="line">User user2 = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"user2："</span>+user2);</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache3.png" alt=""><br>第一次查询之后，便将结果存储在Map中，第二次再执行相同的操作时便通过key直接去Map中去找。<br>把上面注释的代码让它执行，更新用户信息<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache4.png" alt=""><br>会发现第二次查询时会去数据库查询，commit提交事务后，便就清空了缓存</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache5.png" alt=""><br>首先得开启二级缓存。<br>sqlSession1去查询用户id为1的用户信息，查询到用户信息会将查询数据存储到二级缓存中。<br>如果SqlSession3去执行相同 mapper下sql，执行commit提交，清空该 mapper下的二级缓存区域的数据。<br>sqlSession2去查询用户id为1的用户信息，去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>二级缓存的范围更大，多个sqlSession可以共享一个UserMapper的二级缓存区域。UserMapper有一个二级缓存区域（按namespace分） ，其它mapper也有自己的二级缓存区域（按namespace分）。<br>每一个namespace的mapper都有一个二缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。</p><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><p>mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。<br>在核心配置文件在SqlMapConfig.xml中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意此处有个小坑，我之前写入这句话之后就一直报错<br><code>元素类型为 &quot;configuration&quot; 的内容必须匹配 &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;。</code><br>原因就是顺序不对，configuration标签里面的子标签一定要按上面报错原因的顺序放，不然就会报错<br>在UserMapper.xml中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启本mapper的namespace的二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个没顺序要求，我就直接放在开头。<br>为了将缓存数据取出执行反序列化操作，因为二级缓存数据存储介质多种多样，不一样的内存，<br>在pojo类实现序列化接口（public class User implements Serializabel）</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二级级缓存测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession1 = sqlSessionFactory.openSession();<span class="comment">//创建代理对象</span></span><br><span class="line">SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//SqlSession sqlSession3 = sqlSessionFactory.openSession();</span></span><br><span class="line">UserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);<span class="comment">//动态代理对象</span></span><br><span class="line"><span class="comment">//sqlSession1</span></span><br><span class="line"><span class="comment">//第一次发起请求，查询id为1的用户</span></span><br><span class="line">User user1 =  userMapper1.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"user1："</span>+user1);</span><br><span class="line">sqlSession1.close();</span><br><span class="line"><span class="comment">//sqlSession3</span></span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="comment">//UserMapper userMapper3 = sqlSession3.getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">//User user = userMapper3.findUserById(1);</span></span><br><span class="line"><span class="comment">//user.setUsername("张四");</span></span><br><span class="line"><span class="comment">//userMapper3.updateUser(user);</span></span><br><span class="line"><span class="comment">////提交事务，清空缓存</span></span><br><span class="line"><span class="comment">//sqlSession3.commit();</span></span><br><span class="line"><span class="comment">//第二次发起请求，查询id为1的用户</span></span><br><span class="line">UserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);</span><br><span class="line">User user2 = userMapper2.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"user2："</span>+user2);</span><br><span class="line">sqlSession2.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache6.png" alt=""><br>那怕sqlSession关闭之后，但缓存还在，如果是一级缓存close之后缓存就会释放。<br>把sqlSession3注释的内容执行，会发现<code>Cache Hit Ratio [cn.hnust.mybatis.mapper.UserMapper]: 0.3333333333333333</code>缓存命中率变成1/3，因为查询了三次，但只有一次在缓存中找到了数据<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatisCache7.png" alt=""></p><p><a href="https://github.com/Lzengp/MybatisTest" target="_blank" rel="noopener">案例代码</a></p><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><p>逆向工程，就是先在数据库里面把表建好，然后生成代码。<br>这里介绍两种方式，一种是在项目里面设置直接生成代码在项目里面，第二种是在项目外生成代码，然后复制代码到项目里面来</p><h3 id="项目里面的逆向工程"><a href="#项目里面的逆向工程" class="headerlink" title="项目里面的逆向工程"></a>项目里面的逆向工程</h3><p>数据库设计<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatis01.png" alt=""><br>项目目录<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatis002.png" alt=""><br>需要的jar包mybatis-generator-core-1.3.3.jar，明明有mysql-connector-java-5.1.25.jar这个包，但就是报错,就用了绝对路径，引用了当地的文件<br>主要配置文件<br>generatorConfig.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration  </span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  </span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 数据库驱动--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"E:/SSM_Maven/lib/mysql-connector-java-5.1.25.jar"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"1997"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.hnust.mybatis.po"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.hnust.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成mapper接口的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.hnust.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"customer"</span> <span class="attr">domainObjectName</span>=<span class="string">"Customer"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSql</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//指定逆向工程配置文件</span></span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,callback,warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">GeneratorSql generatorSql = <span class="keyword">new</span> GeneratorSql();</span><br><span class="line">generatorSql.generator();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行代码之后然后刷新工程就会出现生成的代码了</p><h3 id="项目外面的逆向工程"><a href="#项目外面的逆向工程" class="headerlink" title="项目外面的逆向工程"></a>项目外面的逆向工程</h3><p>需要的jar包和目录结构<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatis04.png" alt=""><br>配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration  </span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  </span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 数据库驱动--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"mysql-connector-java-5.1.25.jar"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"1997"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"po"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"dao"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"customer"</span> <span class="attr">domainObjectName</span>=<span class="string">"Customer"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打开命令行窗口，进入文件所在的目录，输入：<br><code>java -jar mybatis-generator-core-1.3.3.jar -configfile generatorConfig.xml -overwrite</code><br>成功提示<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatis05.png" alt=""><br>然后再src目录下就可以看见生成的三个文件夹，里面有Customer.java,CustomerMapper.java,CustomerMapper.xml三个文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一级缓存是SqlSession级别的缓存。在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。&lt;br&gt;二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的&lt;br&gt;为什么要用缓存？&lt;br&gt;如果缓存中有数据就不用从数据库中获取，大大提高系统性能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="一级缓存" scheme="http://lzengp.cn/tags/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    
      <category term="二级缓存" scheme="http://lzengp.cn/tags/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    
      <category term="逆向工程" scheme="http://lzengp.cn/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记(一)</title>
    <link href="http://lzengp.cn/2018/08/02/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/08/02/Mybatis学习笔记(一)/</id>
    <published>2018-08-02T01:39:42.000Z</published>
    <updated>2018-08-02T09:03:47.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis是什么"><a href="#mybatis是什么" class="headerlink" title="mybatis是什么"></a>mybatis是什么</h2><blockquote><p>mybatis是一个持久层的框架，是apache下的顶级项目<br>mybatis托管到goolecode下，再后来托管到github下<br>mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql），满足需要sql语句<br>mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象（输出映射）<br>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录</p></blockquote><a id="more"></a><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>在学习mybatis之前，先总结几个问题<br>1.数据库连接，使用时创建，不使用立即释放，对数据库进行频繁连接开启和关闭，造成数据库资源浪费，影响数据库性能<br>设想：使用数据库连接池管理数据库连接<br>2.将sql语句硬编码到java代码中，如果sql语句修改，需要重新编译java代码，不利于系统维护<br>设想：将sql语句配置在xml配置文件中，即使sql变化，不需要对java代码进行重新编译<br>3.向preparedStatement中设置参数，对占位符号位置和设置参数值，硬编码在java代码中，不利于系统维护<br>设想：将sql语句及占位符号和参数全部配置在xml中<br>4.从resultSet中遍历结果集数据时，存在硬编码，将获取表的字段进行硬编码，不利于系统维护<br>设想：将查询的结果集自动映射成java对象</p><h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><p><img src="http://pc57xo61v.bkt.clouddn.com/mybtis01.png" alt=""></p><h2 id="实践程序"><a href="#实践程序" class="headerlink" title="实践程序"></a>实践程序</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>主要jar包在<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">github</a>里面，可以点进去下载<br>还要导入mysql-connector-java-5.1.46.jar<br>所有jar包如下图<br><img src="http://pc57xo61v.bkt.clouddn.com/mybatis02.png" alt=""></p><h3 id="日志文件log4j-properties"><a href="#日志文件log4j-properties" class="headerlink" title="日志文件log4j.properties"></a>日志文件log4j.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">#在开发环境下日志级别要设置成DEBUG，生产环境设置成info或error</span><br><span class="line">log4j.rootLogger=DEBUG,stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h3 id="主配置文件SqlMapConfig-xml"><a href="#主配置文件SqlMapConfig-xml" class="headerlink" title="主配置文件SqlMapConfig.xml"></a>主配置文件SqlMapConfig.xml</h3><p>和spring整合后environments配置将废除<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和spring整合后environments配置将废除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用jdbc事务管理，事务控制由mybatis控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池，由mybatis管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1997"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个加载</span></span><br><span class="line"><span class="comment">&lt;mapper resource="sqlmap/User.xml"/&gt;</span></span><br><span class="line"><span class="comment">&lt;mapper resource="mapper/UserMapper.xml"/&gt; </span></span><br><span class="line"><span class="comment">&lt;mapper resource="mapper/OrdersMapperCustomer.xml"/&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.hnust.mybatis.mapper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置文件UserMapper-xml"><a href="#配置文件UserMapper-xml" class="headerlink" title="配置文件UserMapper.xml"></a>配置文件UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace命名空间，作用就是对sql进行分类化管理 ，理解sql隔离</span></span><br><span class="line"><span class="comment">注意:使用mapper代理方法开发，namespace指向mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.hnust.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在映射文件中配置很多sql语句</span></span><br><span class="line"><span class="comment">需求:通过id查询用户表的记录</span></span><br><span class="line"><span class="comment">通过select执行数据库查询</span></span><br><span class="line"><span class="comment">id：标识映射文件的sql</span></span><br><span class="line"><span class="comment">将sql语句封装到mappedStatement对象中，所以id称为statement的id</span></span><br><span class="line"><span class="comment">parameterType：指定输入参数的类型，这里指定int型</span></span><br><span class="line"><span class="comment">#&#123;&#125;表示一个占位符号</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#&#123;&#125;中的参数名可以任意，可以value或其它名称</span></span><br><span class="line"><span class="comment">resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- SQL片段 </span></span><br><span class="line"><span class="comment"> 基于单表，增加可重用性，不要where</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"findUserList_sql"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer!=null"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer.sex!=null and userCustomer.sex!='' "</span>&gt;</span></span><br><span class="line"> and sex=#&#123;userCustomer.sex&#125; </span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer.address!=null and userCustomer.address!='' "</span>&gt;</span></span><br><span class="line"> and address=#&#123;userCustomer.address&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 多条件查询，动态SQL --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"cn.hnust.mybatis.first.UserQueryVo"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"cn.hnust.mybatis.first.UserCustomer"</span> &gt;</span></span><br><span class="line"> select * from user </span><br><span class="line"> <span class="comment">&lt;!--  where会自动去掉第一个and --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 添加SQL片段 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"findUserList_sql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- foreach </span></span><br><span class="line"><span class="comment"> 查询select * from user where id=2 or id=3 or id=23</span></span><br><span class="line"><span class="comment"> collection:指定输入对象集合属性</span></span><br><span class="line"><span class="comment"> item：每个遍历生成对象</span></span><br><span class="line"><span class="comment"> open：开始遍历时拼接的串(where会把第一个and去掉)</span></span><br><span class="line"><span class="comment"> close：结束遍历时拼接的串</span></span><br><span class="line"><span class="comment"> separator：遍历的两个对象中需要拼接的串</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!=null"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"user_id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line"> id= #&#123;user_id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 另一种写法的查询</span></span><br><span class="line"><span class="comment"> SELECT * FROM user WHERE id IN(2,3,23) </span></span><br><span class="line"><span class="comment"> &lt;if test="ids!=null"&gt;</span></span><br><span class="line"><span class="comment"> &lt;foreach collection="ids" item="user_id" open=" and id IN(" close=")" separator=","&gt;</span></span><br><span class="line"><span class="comment"> #&#123;user_id&#125;</span></span><br><span class="line"><span class="comment"> &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment"> &lt;/if&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> select * from user</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 根据id查询 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> SELECT * FROM USER WHERE id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 需求：根据用户名模糊查询 </span></span><br><span class="line"><span class="comment"> resultType不管返回是单条数据还是多条数据都是将单条记录映射成的java对象</span></span><br><span class="line"><span class="comment"> $&#123;&#125;:表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中</span></span><br><span class="line"><span class="comment"> 使用$&#123;&#125;拼接sql，引起sql注入</span></span><br><span class="line"><span class="comment"> $&#123;value&#125;:接收输入参数的内容，如果是传入类型是简单类型，$&#123;&#125;中只能写value</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"cn.hnust.mybatis.first.User"</span>&gt;</span></span><br><span class="line"> SELECT * FROM USER WHERE username like '%$&#123;value&#125;%'</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 添加用户</span></span><br><span class="line"><span class="comment"> parameterType:指定输入参数</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.hnust.mybatis.first.User"</span>&gt;</span></span><br><span class="line"> insert into user(username,sex,birthday,address) values(#&#123;username&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;)</span><br><span class="line"> <span class="comment">&lt;!-- 将插入数据的主键返回，返回到user对象中 </span></span><br><span class="line"><span class="comment">  SELECT LAST_INSERT_ID():得到insert进去记录的主键值，只适合自增主键</span></span><br><span class="line"><span class="comment">  keyProperty：将查询到的主键设置到parameterType指定的对象的那个属性</span></span><br><span class="line"><span class="comment">  order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序</span></span><br><span class="line"><span class="comment">  resultType：指定SELECT LAST_INSERT_ID()的结果类型</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">  SELECT LAST_INSERT_ID()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 根据id删除用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> &gt;</span></span><br><span class="line">delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据id更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.hnust.mybatis.first.User"</span>&gt;</span></span><br><span class="line">update  user  set username=#&#123;username&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,address=#&#123;address&#125;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义实体类User-java"><a href="#定义实体类User-java" class="headerlink" title="定义实体类User.java"></a>定义实体类User.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性名和数据库的字段对应</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//getter和setter方法就不贴了</span></span><br></pre></td></tr></table></figure><h3 id="创建扩展类UserCustomer"><a href="#创建扩展类UserCustomer" class="headerlink" title="创建扩展类UserCustomer"></a>创建扩展类UserCustomer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户扩展类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年7月29日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCustomer</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填写扩展信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建pojo包装类UserQueryVo"><a href="#创建pojo包装类UserQueryVo" class="headerlink" title="创建pojo包装类UserQueryVo"></a>创建pojo包装类UserQueryVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.first;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pojo包装类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年7月29日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个list对象，用于存储多个id</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; ids ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义用户扩展类</span></span><br><span class="line"><span class="keyword">private</span> UserCustomer userCustomer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ids;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIds</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ids = ids;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserCustomer <span class="title">getUserCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userCustomer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserCustomer</span><span class="params">(UserCustomer userCustomer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userCustomer = userCustomer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper接口"><a href="#UserMapper接口" class="headerlink" title="UserMapper接口"></a>UserMapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.User;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.UserCustomer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.UserQueryVo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mapper接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 龙伟</span></span><br><span class="line"><span class="comment"> * 2018年7月29日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserCustomer&gt; <span class="title">findUserList</span><span class="params">(UserQueryVo userQueryVo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//根据id查询所有用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//通过名字模糊查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//插入用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">insertUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>查询一条记录selectOne<br>查询多条记录selectList<br>增、删、改需要提交事务sqlSession.commit()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.hnust.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.User;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.UserCustomer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.mybatis.first.UserQueryVo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建SesssionFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//mybatis配置文件</span></span><br><span class="line">String resource = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"><span class="comment">//得到配置文件流</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//创建会话工厂，传入mybatis的配置文件信息</span></span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多条件查询，如果某个为空，就不会加入到sql语句中，用动态sql实现</span></span><br><span class="line"><span class="comment"> * 实现select * from user where （id=2 or id=3 or id=23） and sex='男'</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfindUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//创建包装对象，设置查询条件</span></span><br><span class="line">UserQueryVo userQueryVo = <span class="keyword">new</span> UserQueryVo();</span><br><span class="line">UserCustomer userCustomer = <span class="keyword">new</span> UserCustomer();</span><br><span class="line">ArrayList&lt;Integer&gt; ids =  <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//添加多个id</span></span><br><span class="line">ids.add(<span class="number">2</span>);</span><br><span class="line">ids.add(<span class="number">3</span>);</span><br><span class="line">ids.add(<span class="number">23</span>);</span><br><span class="line">userCustomer.setSex(<span class="string">"男"</span>);</span><br><span class="line"><span class="comment">//userCustomer.setAddress("上海");</span></span><br><span class="line">userQueryVo.setIds(ids);</span><br><span class="line">userQueryVo.setUserCustomer(userCustomer);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">List&lt;UserCustomer&gt; list = userMapper.findUserList(userQueryVo);</span><br><span class="line">System.out.println(list);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfindAllUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">List&lt;User&gt; user = userMapper.findAllUser();</span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据id查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">User user = userMapper.findUserById(<span class="number">2</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过名字模糊查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfindUserByUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">List&lt;User&gt; user = userMapper.findUserByUsername(<span class="string">"李"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 插入用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//添加新用户信息</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"王五"</span>);</span><br><span class="line">user.setSex(<span class="string">"男"</span>);</span><br><span class="line">user.setAddress(<span class="string">"上海"</span>);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"> userMapper.insertUser(user);</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> System.out.println(user.getId());</span><br><span class="line"> sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 更新用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象，mabatis自动生成mapper代理对象</span></span><br><span class="line">UserMapper userMapper =  sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//添加新用户信息</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">15</span>);</span><br><span class="line">user.setUsername(<span class="string">"王五"</span>);</span><br><span class="line">user.setSex(<span class="string">"男"</span>);</span><br><span class="line">user.setAddress(<span class="string">"上海"</span>);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"> userMapper.updateUser(user);</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据id删除用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SqlSession sqlSession =sqlSessionFactory.openSession();</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">userMapper.deleteUser(<span class="number">16</span>);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1.typeAliases(别名)<br>在mapper.xml中，定义了很多的statement（声明），需要paramenterType指定输入参数的类型、需要resultType输入结果的映射类型，如果在指定类型时输入全路径，不方便进行开发，可以针对parameterType或resultType定义一些别名<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对单个别名定义</span></span><br><span class="line"><span class="comment">type：类的路径</span></span><br><span class="line"><span class="comment">alias：别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.hnust.mybatis.po.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引用别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">paramenterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--批量定义</span></span><br><span class="line"><span class="comment">指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.hnust.mybatis.po"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.传递pojo对象<br>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称<br>mybatis使用ongl表达式解析对象字段的值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--传递pojo对象综合查询用户信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> SELECT * FROM USER WHERE id=#&#123;id&#125; username like '%$&#123;value&#125;%'</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.传递pojo包装对象（上面代码中写了,UserQueryVo.java）<br> 开发中通过pojo传递查询条件，查询条件是综合的查询条件，不仅包括用户查询条件，还包括其它的查询条件（比如将用户购买的商品信息也作为查询条件），这时可以使用包装对象传递参数<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户信息综合查询</span></span><br><span class="line"><span class="comment">#&#123;userCustom.sex&#125;：取出pojo包装对象中性别值</span></span><br><span class="line"><span class="comment">$&#123;userCustom.username&#125;：取出pojo包装对象中用户名值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"userQueryVo"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">SELECT</span> * <span class="attr">FROM</span> <span class="attr">USER</span> <span class="attr">WHERE</span> <span class="attr">user.sex</span>=<span class="string">#&#123;userCustom.sex&#125;</span> <span class="attr">and</span> <span class="attr">user.username</span> <span class="attr">like</span> '$&#123;<span class="attr">userCustom.username</span>&#125;'</span></span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>4.输出映射<br>    4.1 resultType<br>    使用resultType进行输出映射，只有查询出来的列名和pojo中属性名一致，该列才可以映射成功。<br>    如果查询出来的列名和pojo对象中属性名全部不一致，没有创建pojo对象<br>    只要查询出来的列名和pojo中属性有一个一致，就会创建pojo对象<br>    4.2resultMap<br>    如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性之间作一个映射关系：定义resultMap，使用resultMap作为statement的输出映射类型<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义resultMap</span></span><br><span class="line"><span class="comment">将select id id_ ,username username_ from user 和User类中的属性作为一个映射关系</span></span><br><span class="line"><span class="comment">type：resultMap最终映射的java对象类型，可以使用别名</span></span><br><span class="line"><span class="comment">id：对resultMap的唯一标识</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id：表示查询结果集中唯一标识</span></span><br><span class="line"><span class="comment">column:查询出来的列名</span></span><br><span class="line"><span class="comment">property：type指定的pojo类型中的属性名</span></span><br><span class="line"><span class="comment">最终resultMap对column和property作一个映射关系（对应关系）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id_"</span> <span class="attr">prpperty</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username_"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用resultMap进行输出映射</span></span><br><span class="line"><span class="comment">resultMap:指定定义的resultMap的id，如果这个resultMap在其他的mapper文件中，前边需要增加namespace</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByIdResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> SELECT id id_,username username_ FROM USER WHERE id=#&#123;value&#125; username like '%$&#123;value&#125;%'</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>5.SQL片段<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"findUserList_sql"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer!=null"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer.sex!=null and userCustomer.sex!='' "</span>&gt;</span></span><br><span class="line"> and sex=#&#123;userCustomer.sex&#125; </span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCustomer.address!=null and userCustomer.address!='' "</span>&gt;</span></span><br><span class="line"> and address=#&#123;userCustomer.address&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserList"</span> <span class="attr">parameterType</span>=<span class="string">"cn.hnust.mybatis.first.UserQueryVo"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"cn.hnust.mybatis.first.UserCustomer"</span> &gt;</span></span><br><span class="line"> select * from user </span><br><span class="line"> <span class="comment">&lt;!--  where会自动去掉第一个and --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 添加SQL片段 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"findUserList_sql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Sql语句中写了sex的，但由于没有输入sex的值，所以查询语句没有添加sex=?这个<br>如果直接写<code>select * from user where sex=#{userCustomer.sex} and address=#{userCustomer.address}</code>,而在测试类中不添加sex的值就会报错，并且提示信息为<code>select * from user where sex=null and address=?</code>,这就是动态sql语句的好处，没有值就不会添加到sql语句中</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mybatis是什么&quot;&gt;&lt;a href=&quot;#mybatis是什么&quot; class=&quot;headerlink&quot; title=&quot;mybatis是什么&quot;&gt;&lt;/a&gt;mybatis是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;mybatis是一个持久层的框架，是apache下的顶级项目&lt;br&gt;mybatis托管到goolecode下，再后来托管到github下&lt;br&gt;mybatis让程序将主要精力放在sql上，通过mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql），满足需要sql语句&lt;br&gt;mybatis可以将向preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象（输出映射）&lt;br&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="http://lzengp.cn/tags/mybatis/"/>
    
      <category term="mapper" scheme="http://lzengp.cn/tags/mapper/"/>
    
      <category term="动态sql" scheme="http://lzengp.cn/tags/%E5%8A%A8%E6%80%81sql/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本三-XML和注解组合式整合，仅保留spring的主配置文件（实际开发中struts2文件也保留）</title>
    <link href="http://lzengp.cn/2018/07/27/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%89)/"/>
    <id>http://lzengp.cn/2018/07/27/SSH三大框架环境搭建(三)/</id>
    <published>2018-07-27T14:39:54.000Z</published>
    <updated>2018-07-27T16:31:32.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本三是在版本一基础上改动，只写改动的地方代码"><a href="#版本三是在版本一基础上改动，只写改动的地方代码" class="headerlink" title="版本三是在版本一基础上改动，只写改动的地方代码"></a>版本三是在版本一基础上改动，只写改动的地方代码</h2><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><blockquote><p>1.改造spring的ioc和aop使用注解。<br>2.改造实体类使用注解映射<br>3.使用注解配置struts2<br>4.关于注解配置action的细节</p></blockquote><a id="more"></a><h2 id="改造spring的ioc和aop使用注解"><a href="#改造spring的ioc和aop使用注解" class="headerlink" title="改造spring的ioc和aop使用注解"></a>改造spring的ioc和aop使用注解</h2><h3 id="修改Service层和Dao层"><a href="#修改Service层和Dao层" class="headerlink" title="修改Service层和Dao层"></a>修改Service层和Dao层</h3><p>Dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span>  <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"hibernateTemplate"</span>)</span><br><span class="line"><span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br></pre></td></tr></table></figure></p><p>Service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">private</span> ICustomerDao customerDao;</span><br></pre></td></tr></table></figure></p><h3 id="配置spring对注解的支持"><a href="#配置spring对注解的支持" class="headerlink" title="配置spring对注解的支持"></a>配置spring对注解的支持</h3><p>添加下图红色框中的代码，同时把bean的id为customerDao和customerService删掉<br><img src="http://pc57xo61v.bkt.clouddn.com/23.png" alt=""></p><p>把事务通知和aop删除，添加如下代码,开启spring对注解事务的支持<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>在CustomerServiceImpl中添加事务注解<br><img src="http://pc57xo61v.bkt.clouddn.com/24.png" alt=""></p><p>把hibernate.xml配置到bean.xml中来，可参照版本二</p><h2 id="改造实体类使用注解映射"><a href="#改造实体类使用注解映射" class="headerlink" title="改造实体类使用注解映射"></a>改造实体类使用注解映射</h2><p>删除customer.cfg.xml,同时修改实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_name"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br></pre></td></tr></table></figure></p><p>修改原来customer.cfg.xml的路径，这样hibernate也改成了注解<br><img src="http://pc57xo61v.bkt.clouddn.com/25.png" alt=""></p><h2 id="使用注解配置struts2"><a href="#使用注解配置struts2" class="headerlink" title="使用注解配置struts2"></a>使用注解配置struts2</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>struts2-convention-plugin-2.5.16.jar<br>struts2对注解的支持，使用注解的方式代替xml配置action，必须要引用这个包</p><h3 id="配置action"><a href="#配置action" class="headerlink" title="配置action"></a>配置action</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/26.png" alt=""></p><p>在每个方法前面配置@Action(“方法名”)<br><img src="http://pc57xo61v.bkt.clouddn.com/27.png" alt=""></p><p>action用注解配置完成后，就是开启开发者模式配置了，这个要去struts2的过滤器里面配置<br><img src="http://pc57xo61v.bkt.clouddn.com/28.png" alt=""></p><p>struts2.xml也可以删除了。<br>注解版本配置完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本三是在版本一基础上改动，只写改动的地方代码&quot;&gt;&lt;a href=&quot;#版本三是在版本一基础上改动，只写改动的地方代码&quot; class=&quot;headerlink&quot; title=&quot;版本三是在版本一基础上改动，只写改动的地方代码&quot;&gt;&lt;/a&gt;版本三是在版本一基础上改动，只写改动的地方代码&lt;/h2&gt;&lt;h3 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.改造spring的ioc和aop使用注解。&lt;br&gt;2.改造实体类使用注解映射&lt;br&gt;3.使用注解配置struts2&lt;br&gt;4.关于注解配置action的细节&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="注解" scheme="http://lzengp.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="仅留spring" scheme="http://lzengp.cn/tags/%E4%BB%85%E7%95%99spring/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本二：保留struts和spring的配置文件，把hibernate的主配置文件配置到spring配置文件中</title>
    <link href="http://lzengp.cn/2018/07/27/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%BA%8C)/"/>
    <id>http://lzengp.cn/2018/07/27/SSH三大框架环境搭建(二)/</id>
    <published>2018-07-27T12:54:10.000Z</published>
    <updated>2018-07-27T15:52:34.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码"><a href="#版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码" class="headerlink" title="版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码"></a>版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码</h2><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><blockquote><p>1.把hibernate主配置文件的内容配到spring的配置文件中<br>2.手动指定配置文件位置<br>3.分配置文件编写spring和struts2的配置<br>4.HibernateDaoSupport的使用<br>5.优化spring接管Action的创建</p></blockquote><a id="more"></a><h2 id="把hibernate主配置文件的内容配到spring的配置文件中"><a href="#把hibernate主配置文件的内容配到spring的配置文件中" class="headerlink" title="把hibernate主配置文件的内容配到spring的配置文件中"></a>把hibernate主配置文件的内容配到spring的配置文件中</h2><p>修改bean.xml:重命名为applicationContext.xml（不改也行，只是为了好区别spring和整合hibernate的spring）,并添加如下代码,hibernate.xml可以删了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库，用连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span> &gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 第三部分：映射文件位置 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- mappingLocation:它是注入一个Resource类型的数组，提供的映射文件的位置，它可以使用通配符 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:cn/hnust/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池 --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>     <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>   <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>    <span class="attr">value</span>=<span class="string">"1997"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="手动指定配置文件位置"><a href="#手动指定配置文件位置" class="headerlink" title="手动指定配置文件位置"></a>手动指定配置文件位置</h2><p>在src下新建两个包config.spring、config.struts,把applicationContext.xml放到config.spring下，struts.xml放到config.struts下，修改web.xml,添加以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>struts-default.xml,struts-plugin.xml,config/struts/struts.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="分配置文件编写spring和struts2的配置"><a href="#分配置文件编写spring和struts2的配置" class="headerlink" title="分配置文件编写spring和struts2的配置"></a>分配置文件编写spring和struts2的配置</h2><h3 id="分配置文件编写spring"><a href="#分配置文件编写spring" class="headerlink" title="分配置文件编写spring"></a>分配置文件编写spring</h3><p>复制application.xml,粘贴到config.spring包下，重命名为applicationContext-customer，删掉其它内容，只保留下面的代码，头文件别删了<br>applicationContext-customer<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和customer相关的配置 --&gt;</span>   </span><br><span class="line">     <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 注入  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">ref</span>=<span class="string">"hibernateTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同理，复制粘贴，再重命名为applicationContext-jdbc，删掉其它的代码，只保留以下代码<br>applicationContext-jdbc<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 第一部分：连接数据库，用连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span> &gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session  </span></span><br><span class="line"><span class="comment">不配置，spring也会把session放到当前线程中,并且一个线程只有一个Session</span></span><br><span class="line"><span class="comment">&lt;prop key="hibernate.current_session_context_class"&gt;thread&lt;/prop&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 第三部分：映射文件位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mappingLocation:它是注入一个Resource类型的数组，提供的映射文件的位置，它可以使用通配符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:cn/hnust/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接池 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>     <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>   <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>    <span class="attr">value</span>=<span class="string">"1997"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再分一个只包含事务的xml<br>applicationContext-tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立切入点表达式和事务通知关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然还可以再分一个aop，但就不展示了，接下来就是整合这三个配置文件了</p><h3 id="整合spring的配置文件"><a href="#整合spring的配置文件" class="headerlink" title="整合spring的配置文件"></a>整合spring的配置文件</h3><p>把applicationContext.xml文件内容全删了，只保留头文件，填入以下代码<br>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 引入其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-customer.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jdbc.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-tx.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="分配置编写struts文件"><a href="#分配置编写struts文件" class="headerlink" title="分配置编写struts文件"></a>分配置编写struts文件</h3><p>和spring的分配置一样，复制struts.xml，改名为struts-customer，再删除其他的，只保留下面代码，再修改一下代码<br>struts-customer<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"myDefault"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span> &gt;</span></span><br><span class="line">         </span><br><span class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">action</span>&gt;</span> </span><br><span class="line">       </span><br><span class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="整合struts的配置文件"><a href="#整合struts的配置文件" class="headerlink" title="整合struts的配置文件"></a>整合struts的配置文件</h3><p>struts.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启开发者模式 ,详细错误提示--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置公共包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myDefault"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 引入其他struts配置文件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"config/struts/struts-customer.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="HibernateDaoSupport的使用"><a href="#HibernateDaoSupport的使用" class="headerlink" title="HibernateDaoSupport的使用"></a>HibernateDaoSupport的使用</h2><p>修改CustomerDaoImpl文件，使其继承HibernateDaoSupport，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span>  <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span>  <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (List&lt;Customer&gt;) getHibernateTemplate().find(<span class="string">"from Customer"</span>);<span class="comment">//HQL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">getHibernateTemplate().save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改applicationContext-customer下的配置dao这段代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时applicationContext-jdbc下的配置hibernateTemplate这段代码也可以删了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="优化spring接管Action的创建"><a href="#优化spring接管Action的创建" class="headerlink" title="优化spring接管Action的创建"></a>优化spring接管Action的创建</h2><p>把struts-customer中class路径改成customerAction，让其映射到spring的配置文件中，去找bean的id<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置动作 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span> &gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- class会去bean里面找customerAction --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">action</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在appliadadlicationContext.xml中添加一下代码，同时修改为多例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置action--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化算是结束了，相对比版本一，版本二虽然也是纯XML版本，但分的更加细，这也方便管理项目，目前我们写的项目代码很少，所以这样细分感觉是多余的，不过，如果实体类不止一个，有很多个，这样细分可以很方便的查找和修改配置文件。在修改的时候，最好别在原来的项目上改，可以再拷贝一个，修改名字，然后再去改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot;&gt;&lt;a href=&quot;#版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot; class=&quot;headerlink&quot; title=&quot;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot;&gt;&lt;/a&gt;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&lt;/h2&gt;&lt;h3 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.把hibernate主配置文件的内容配到spring的配置文件中&lt;br&gt;2.手动指定配置文件位置&lt;br&gt;3.分配置文件编写spring和struts2的配置&lt;br&gt;4.HibernateDaoSupport的使用&lt;br&gt;5.优化spring接管Action的创建&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="优化" scheme="http://lzengp.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="分配置文件" scheme="http://lzengp.cn/tags/%E5%88%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
      <category term="手动指定位置" scheme="http://lzengp.cn/tags/%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本一：保留struts2,spring,hibernate各自主配置文件(纯XML整合)</title>
    <link href="http://lzengp.cn/2018/07/25/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/07/25/SSH三大框架环境搭建(一)/</id>
    <published>2018-07-25T09:42:49.000Z</published>
    <updated>2018-07-27T23:27:45.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SSH是 struts+spring+hibernate的一个集成框架，是目前比较流行的一种Web应用程序开源框架。<br>集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的Web应用程序。其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持，Spring做管理，管理struts和hibernate。具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的Java对象，然后编写基本的DAO(Data Access Objects)接口，并给出Hibernate的DAO实现，采用Hibernate架构实现的DAO类来实现Java类与数据库之间的转换和访问，最后由Spring做管理，管理struts和hibernate。<br>地址：<a href="https://github.com/Lzengp/SSH-1" target="_blank" rel="noopener">项目完整代码</a></p></blockquote><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>在搭建SSH三大框架环境时，要严格按照以下步骤执行：<br>第一步:保证spring的ioc容器能够在web工程中独立运行<br>第二步：保证hibernate框架能够在web工程中独立运行<br>第三步：整合spring和hibernate(spring接管了hibernate的sessionFactory对象创建(把sessionFactory存入spring容器中)，使用了spring的声明事务控制)<br>第四步：保证struts2框架能够在web工程中独立运行<br>第五步：整合spring和struts2（action的创建交给spring来管理，保证web工程中的容器只有一个）<br>第六步：优化已有的整合配置<br>配置文件的位置存放可以调整<br>配置文件的内容可以分不同的文件编写</strong></p><h2 id="第一步-保证spring的ioc容器能够在web工程中独立运行"><a href="#第一步-保证spring的ioc容器能够在web工程中独立运行" class="headerlink" title="第一步:保证spring的ioc容器能够在web工程中独立运行"></a>第一步:保证spring的ioc容器能够在web工程中独立运行</h2><h3 id="创建实体类、业务层、持久层"><a href="#创建实体类、业务层、持久层" class="headerlink" title="创建实体类、业务层、持久层"></a>创建实体类、业务层、持久层</h3><p>创建实体类Customer:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custId = custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custName = custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [custId="</span> + custId + <span class="string">", custName="</span> + custName + <span class="string">", custSource="</span> + custSource</span><br><span class="line">+ <span class="string">", custIndustry="</span> + custIndustry + <span class="string">", custLevel="</span> + custLevel + <span class="string">", custAddress="</span> + custAddress + <span class="string">", custPhone="</span> + custPhone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建业务层接口ICustomerService:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建业务层实现类CustomerServiceImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户业务层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line"><span class="comment">//创建一个set方法，等待SpringIoC注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">customerDao.saveCustomer(customer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建持久层接口ICustomerDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建持久层实现类CustomerDaoImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现了查询客户列表"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/1.png" alt="spring的IoC基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/2.png" alt="spring的AOP基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/3.png" alt="spring的事务控制jar包"></p><h3 id="在类路径下创建bean-xml"><a href="#在类路径下创建bean-xml" class="headerlink" title="在类路径下创建bean.xml"></a>在类路径下创建bean.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">      <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注入  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试spring的ioc环境是否可以</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Spring</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    cs.findAllCustomer();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/4.png" alt="输出结果"></p><h2 id="第二步-保证hibernate框架能够在web项目中独立运行"><a href="#第二步-保证hibernate框架能够在web项目中独立运行" class="headerlink" title="第二步:保证hibernate框架能够在web项目中独立运行"></a>第二步:保证hibernate框架能够在web项目中独立运行</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/5.png" alt="hibernate基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/6.png" alt="C3P0基本jar包"></p><h3 id="在domain下新建一个Customer-cfg-xml"><a href="#在domain下新建一个Customer-cfg-xml" class="headerlink" title="在domain下新建一个Customer.cfg.xml"></a>在domain下新建一个Customer.cfg.xml</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/7.png" alt="Customer.cfg.xml"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"custId"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指向本地数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custName"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custSource"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custIndustry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custLevel"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custAddress"</span> <span class="attr">column</span>=<span class="string">"cust_address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custPhone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>头文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p>它的位置如下图所示<br><img src="http://pc57xo61v.bkt.clouddn.com/8.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/9.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/10.png" alt=""></p><h3 id="在类路径下创建hiberbnate-cfg-xml"><a href="#在类路径下创建hiberbnate-cfg-xml" class="headerlink" title="在类路径下创建hiberbnate.cfg.xml"></a>在类路径下创建hiberbnate.cfg.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- 在类路径下创建名称为hibernate.cfg.xml的配置文件</span></span><br><span class="line"><span class="comment">导入约束：dtd约束</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SessionFactory </span></span><br><span class="line"><span class="comment">SessionFactory的作用就是创建Session对象</span></span><br><span class="line"><span class="comment">Session对象就是hibernate中操作数据库的核心对象</span></span><br><span class="line"><span class="comment">第一部分:</span></span><br><span class="line"><span class="comment">连接数据库的信息</span></span><br><span class="line"><span class="comment">第二部分：</span></span><br><span class="line"><span class="comment">hibernate的可选配置</span></span><br><span class="line"><span class="comment">第三部分：</span></span><br><span class="line"><span class="comment">映射文件的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>1997<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL结构化查询语句：一共分为6个部分 </span></span><br><span class="line"><span class="comment">DDL:Date Definition Language</span></span><br><span class="line"><span class="comment">DML:Data Manipulation Language</span></span><br><span class="line"><span class="comment">DQL:Data Query Language</span></span><br><span class="line"><span class="comment">DCL:Date Control Language 数据控制语言</span></span><br><span class="line"><span class="comment">CCL:Cursor Control Language 游标控制语言</span></span><br><span class="line"><span class="comment">TPL:Transaction Processing Language 事务处理语言</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session  </span></span><br><span class="line"><span class="comment">可以不配置，spring也会把session放到当前线程中,并且一个线程只有一个Session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/hnust/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>头文件的位置在上图dtd文件的上面</p><p><img src="http://pc57xo61v.bkt.clouddn.com/11.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/12.png" alt=""></p><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Hibernate能否独立运行在web项目中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Hibernate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">c.setCustName(<span class="string">"ssh整合Customer"</span>);</span><br><span class="line"><span class="comment">//1.加载配置文件</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br><span class="line"><span class="comment">//2.根据配置文件创建SessionFactory</span></span><br><span class="line">SessionFactory factory =  cfg.buildSessionFactory();</span><br><span class="line"><span class="comment">//3.获取session</span></span><br><span class="line">Session session = factory.getCurrentSession();</span><br><span class="line"><span class="comment">//4.开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//5.执行操作</span></span><br><span class="line">session.save(c);</span><br><span class="line"><span class="comment">//6.提交/回滚事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">factory.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/13.png" alt=""></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/14.png" alt=""><br>（id设置成自增的，之前测试了几组数据，所以是id是14）</p><p>结果分析:出现Session was already closed的错误<br>原因：如果获取session的方法是openSession(),关闭session的时候必须是session.close()<br>如果session获取通过getCurrentSession()获得的Session提交时自动关闭，其不用再session.close(),如果再调用session.close().其相当于session关闭两次所以会出现Session was already closed异常<br>解决:把session.close();注释掉就不会出现这个错误，不过不注释掉也不影响，结果是对的</p><h3 id="一些自己大意犯下的错误"><a href="#一些自己大意犯下的错误" class="headerlink" title="一些自己大意犯下的错误"></a>一些自己大意犯下的错误</h3><p>1.出现<code>java.persistence.sharedcachemode：java.persistence.sharedcachemode</code><br>原因:导错了包，”hibernate-jpa-2.0-api-1.0.1.Final.jar”(这个也是错的，第五个问题就是这个)，是这个包，<br>我导入了一个”hibernate-jpa-2.0-api-1.0.1.Final.source.jar”<br>2.<code>Caused by: org.hibernate.boot.registry.selector.spi.StrategySelectionException: Unable to resolve name [org.hibernate.dialect.MySOLDialect] as strategy [org.hibernate.dialect.Dialect]</code><br>原因：Hibernate.cfg.xml中MYSQLDialect写错了，写成了MySOLDialect<br>3.导入java web项目，项目出现红叉而其他地方没有红叉的问题解决方法<br>导入别人的Java web项目时会出现这种情况：仅项目名出现红叉而其他地方没有红叉的问题。这可能是以下几种 情况导致的，其解决方法如下：</p><p>(1)导入项目之前，请确认工作空间编码已设置为utf-8：window-&gt;Preferences-&gt;General-&gt;Wrokspace-&gt;Text file encoding-&gt;Other 选择UTF-8。<br>(2)导入后，由于你的开发环境中JRE以及Tomcat Library名称可能和源代码中的不一致，可能会出现Build Path的错误， 解决方法如下：右键project-&gt;Build Path-&gt;Configure Build Path-&gt;选择Libraries tab页-&gt;删除带小红叉的Library-&gt;点击Add Library-&gt;选择JRE System Library(删了Tomcat Library的话就选择Server Runtime)-&gt;选择一个JRE后-&gt;Finish。<br>(3)进入项目包下的.settings目录，找到org.eclipse.wst.common.project.facet.core.xml文件，用记事本打开后才发现这句话有问题：runtime name=”Apache Tomcat v6.0”。我eclipse中设置的tomcat是7.0版本的，而它的运行环境是6.0版本的tomcat,肯定会出现问题。于是把这句话删掉</p><p>我出现红叉的情况是第二种，我删了一个jar包，但Library中还有这个包的奶瓶就会报错</p><p>4.<code>javax.persistence.NamedStoredProcedureQuery</code><br>原因：一定要”hibernate-jpa-2.1-api-1.0.0.Final.jar”,”hibernate-jpa-2.0-api-1.0.1.Final.jar”不行<br>5.<code>A ResourcePool could not acquire a resource from its primary factory or source.</code><br>无法连接到数据库，检测发现<code>&lt;property name=&quot;hibernate.connection.usernamer&quot;&gt;root&lt;/property&gt;</code>Username中多写了一个r</p><h2 id="第三步-整合spring和hibernate"><a href="#第三步-整合spring和hibernate" class="headerlink" title="第三步:整合spring和hibernate"></a>第三步:整合spring和hibernate</h2><h3 id="修改CustomerDaoImpl"><a href="#修改CustomerDaoImpl" class="headerlink" title="修改CustomerDaoImpl"></a>修改CustomerDaoImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.HibernateTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HibernateTemplate替我们封装了s.save(u);之前和之后的代码，交给我们一个接口，</span></span><br><span class="line"><span class="comment">我们去填中间的事务(save等)就行了。这样写程序就会比较方</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> HibernateTemplate  hibernateTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHibernateTemplate</span><span class="params">(HibernateTemplate hibernateTemplate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hibernateTemplate = hibernateTemplate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询所有客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//HQL是Hibernate Query Language的缩写，提供更加丰富灵活、更为强大的查询能力；HQL更接近SQL语句查询语法。</span></span><br><span class="line"><span class="keyword">return</span> (List&lt;Customer&gt;) hibernateTemplate.find(<span class="string">"from Customer"</span>);<span class="comment">//HQL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">hibernateTemplate.save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改bean-xml-添加的内容"><a href="#修改bean-xml-添加的内容" class="headerlink" title="修改bean.xml(添加的内容)"></a>修改bean.xml(添加的内容)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">ref</span>=<span class="string">"hibernateTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 配置sessionFactory:spring接管sessionFactory的创建</span></span><br><span class="line"><span class="comment">     用spring提供的一个SessionFactory：LocalSessionFactoryBean</span></span><br><span class="line"><span class="comment">     创建SessionFactory有三部分必不可少的信息。三部分信息在hibernat主配置文件都有</span></span><br><span class="line"><span class="comment">     把hibernate主配置文件注入进来</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- classpath:告知它为根的类路径下 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立切入点表达式和事务通知关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h3><p>使用spring和Junit的整合测试<br>需要导入的jar包<br><img src="http://pc57xo61v.bkt.clouddn.com/15.png" alt=""></p><p>Test03SpringHibernate:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring和hibernate整合测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations= &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03SpringHibernate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//自动注入</span></span><br><span class="line"><span class="keyword">private</span> ICustomerService cs;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">c.setCustName(<span class="string">"Spring H123"</span>);</span><br><span class="line">cs.saveCustomer(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Customer&gt; list = cs.findAllCustomer();</span><br><span class="line"><span class="keyword">for</span>(Object o :list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>testSave<br><img src="http://pc57xo61v.bkt.clouddn.com/16.png" alt=""></p><p>testFindAll<br><img src="http://pc57xo61v.bkt.clouddn.com/17.png" alt=""></p><h3 id="spring的声明事务控制"><a href="#spring的声明事务控制" class="headerlink" title="spring的声明事务控制"></a>spring的声明事务控制</h3><p>Spring与Hibernate整合之后，Spring提供了更为强大和易用的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。比如Spring3只需要利用@Transactional注释在业务方法上就可以了，这样做到了去除多余的事务语句，只保留业务方法。</p><p>关于Spring的事务，不仅仅少写tx.commit这么简单，Spring另一个比Hibernate事务强大的地方在于它的事务传播性和隔离性</p><p>Spring的事务传播分为7种<br>PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。 </p><p>Spring事务隔离分为4个等级<br>1、Serializable：最严格的级别，事务串行执行，资源消耗最大；<br>2、REPEATABLE READ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。<br>3、READ COMMITTED:大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。<br>4、Read Uncommitted：保证了读取过程中不会读取到非法数据。隔离级别在于处理多事务的并发问题。<br>我们知道并行可以提高数据库的吞吐量和效率，但是并不是所有的并发事务都可以并发运行，这需要查看数据库教材的可串行化条件判断了。 </p><p>另外Spring与Hibernate等框架整合后还能提供read-only来提高性能</p><h3 id="一些自己粗心犯下的错误"><a href="#一些自己粗心犯下的错误" class="headerlink" title="一些自己粗心犯下的错误"></a>一些自己粗心犯下的错误</h3><p>1.<code>java.lang.IllegalStateException: Failed to load ApplicationContextCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;hibernateTemplate&#39; is defined</code><br>原因:在配置dao和配置hibernateTemplate中hibernateTemplate名字写错了<br>2.<code>Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &#39;hibernateTemplate&#39; of bean class [cn.hnust.dao.impl.CustomerDaoImpl]: Bean property &#39;hibernateTemplate&#39; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?</code><br>原因:’hibernateTemplate’ 没注入,也就是没生成set方法<br>3.<code>node to traverse cannot be null!</code><br>HQL语句错误,from写成了form，from后面的不是表名，而是你在Customer.cfg.xml中定义的名字</p><h2 id="第四步-保证struts2框架能在web工程中运行"><a href="#第四步-保证struts2框架能在web工程中运行" class="headerlink" title="第四步:保证struts2框架能在web工程中运行"></a>第四步:保证struts2框架能在web工程中运行</h2><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SSH<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个action类"><a href="#创建一个action类" class="headerlink" title="创建一个action类"></a>创建一个action类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04Struts</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Struts已经调用此方法"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类路径下新建一个struts-xml"><a href="#类路径下新建一个struts-xml" class="headerlink" title="类路径下新建一个struts.xml"></a>类路径下新建一个struts.xml</h3><p>头文件在struts2-core-2.3.24.jar奶瓶里面，最下面的struts-2.3.dtd文件里面<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">   <span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">      "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">      "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- action标签是配置的action，name是访问时的路径，class是映射的类，如果没有method，</span></span><br><span class="line"><span class="comment">  默认找class中的execute方法，指定method属性时，回去找class中method对应值得方法，</span></span><br><span class="line"><span class="comment"> result标签定义返回的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"struts2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.test.Test04Struts"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>在浏览器输入localhost:8080/SSH/index</p><p><img src="http://pc57xo61v.bkt.clouddn.com/18.png" alt=""></p><p>控制台结果</p><p><img src="http://pc57xo61v.bkt.clouddn.com/19.png" alt=""></p><h2 id="第五步-整合spring和struts2"><a href="#第五步-整合spring和struts2" class="headerlink" title="第五步:整合spring和struts2"></a>第五步:整合spring和struts2</h2><h3 id="新建一个list-jsp"><a href="#新建一个list-jsp" class="headerlink" title="新建一个list.jsp"></a>新建一个list.jsp</h3><p>直接用EL表达式获取action里面的值，然后用foreach遍历集合<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span>  uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;查询&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">查询结果:</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;customers&#125;"</span> var=<span class="string">"cust"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line"> &lt;td&gt;$&#123;cust.custId&#125;&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;$&#123;cust.custName&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/20.png" alt=""></p><h3 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h3><p>在web.xml文件加入下面代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring提供的监听器，用于监听servletContext对象创建，同时为我们创建spring的容器</span></span><br><span class="line"><span class="comment">默认情况下：它只能加载位置是在WEB-INF目录中的spring配置文件，同时文件名称必须是applicationContext.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--更改路径为类路径下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:bean.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置动作"><a href="#配置动作" class="headerlink" title="配置动作"></a>配置动作</h3><p>在struts文件中添加一下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启开发者模式 ,详细错误提示--&gt;</span><br><span class="line">       &lt;constant name="struts.devMode" value="true"&gt;&lt;/constant&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;!-- 配置动作 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"customer"</span> extends=<span class="string">"struts-default"</span> namespace=<span class="string">"/customer"</span> &gt;</span><br><span class="line">          </span><br><span class="line">           &lt;action name=<span class="string">"addUICustomer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> method=<span class="string">"addUICustomer"</span>&gt;</span><br><span class="line">               &lt;result name="addUICustomer"&gt;/add.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt; </span><br><span class="line">        </span><br><span class="line">           &lt;action name=<span class="string">"findAllCustomer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> method=<span class="string">"findAllCustomer"</span>&gt;</span><br><span class="line">               &lt;result name="findAllCustomer"&gt;/list.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt;</span><br><span class="line">           </span><br><span class="line">       &lt;/package&gt;</span><br></pre></td></tr></table></figure></p><h3 id="客户动作类CustomerAction"><a href="#客户动作类CustomerAction" class="headerlink" title="客户动作类CustomerAction"></a>客户动作类CustomerAction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户动作类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"><span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"><span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line"><span class="comment">//setters和getters方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customers = customers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(ICustomerService customerService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">customers = customerService.findAllCustomer();</span><br><span class="line">ServletActionContext.getRequest().setAttribute(<span class="string">"customers"</span>,customers);<span class="comment">//存入域对象</span></span><br><span class="line">System.out.println(customers);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取添加客户页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>在浏览器输入localhost:8080/SSH/customer/findAllCustomer.action</p><p><img src="http://pc57xo61v.bkt.clouddn.com/21.png" alt=""></p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>1.<img src="http://pc57xo61v.bkt.clouddn.com/22.png" alt=""><br>原因:没有在struts.xml的action中注明对应的方法，写上method=”findAllCustomer”即可，如果写了之后出现了404，重启一下Eclipse</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>篇幅有点长，其实spring的单独测试在之前的文章已经写过了，这里还是啰嗦了一遍，<br>现在基本上每天看视频学习，然后总结，感觉还算不错。写一下博客也算是复习一下。<br>然后总结下SSH框架，配置文件很多，感觉就是想少写代码，减少耦合，spring的声明式控制真的做到了这点，看见有重复的代码都可以提取出来，增加了配置文件，精简了代码。strtus2需要配置两个xml，一个是本来就有的web.xml,要在里面写一个过滤器，然后就新建一个struts.xml，里面主要写一些action具体的操作，spring需要新建一个bean.xml，里面写一些映射，不再用new创建一个对象，最主要有注解和set注入。而aop切面编程主要的作用就是纵向控制流程，就一个切面，好比有几条流程，而在这几条流程之间有一些共性，就可以把这一些共性看成是一个切面，这样就可以提取出来统一管理（<a href="https://www.cnblogs.com/Wolfmanlq/p/6036019.html" target="_blank" rel="noopener">轻松理解AOP思想</a>）。反正感觉spring真的就是想能用配置文件写的尽量用配置文件写，用外部来管理内部。hibernate是用来操作数据库的，要建两个配置文件(在我的测试的这个项目中）一个用来联系实体类和数据库中数据的关系（Customer.cfg.xml），一个用来连接数据库，然后就是约束，映射(hibernate.xml)。听说Mybatis也很不错，到时也去学一些，还有<a href="https://www.cnblogs.com/baiduligang/p/4247164.html" target="_blank" rel="noopener">spring MVC</a>，<a href="https://www.cnblogs.com/ityouknow/p/5662753.html" target="_blank" rel="noopener">spring boot</a>,<a href="https://blog.csdn.net/wuxiaobingandbob/article/details/78642020?locationNum=1&amp;fps=1" target="_blank" rel="noopener">微服务</a>等等，路还很远。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SSH是 struts+spring+hibernate的一个集成框架，是目前比较流行的一种Web应用程序开源框架。&lt;br&gt;集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的Web应用程序。其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持，Spring做管理，管理struts和hibernate。具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的Java对象，然后编写基本的DAO(Data Access Objects)接口，并给出Hibernate的DAO实现，采用Hibernate架构实现的DAO类来实现Java类与数据库之间的转换和访问，最后由Spring做管理，管理struts和hibernate。&lt;br&gt;地址：&lt;a href=&quot;https://github.com/Lzengp/SSH-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目完整代码&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://lzengp.cn/tags/spring/"/>
    
      <category term="hibernate" scheme="http://lzengp.cn/tags/hibernate/"/>
    
      <category term="struts2" scheme="http://lzengp.cn/tags/struts2/"/>
    
      <category term="环境搭建" scheme="http://lzengp.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记(三)之Spring AOP</title>
    <link href="http://lzengp.cn/2018/07/24/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)%E4%B9%8BSpring%20AOP/"/>
    <id>http://lzengp.cn/2018/07/24/Spring学习笔记(三)之Spring AOP/</id>
    <published>2018-07-23T16:00:00.000Z</published>
    <updated>2018-07-25T00:47:35.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h2><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。一句话，面向切面编程,能够让我们在不影响原有功能的前提下,为软件横向扩展功能 </p></blockquote><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SpringAOP 底层是Aspectj，在底层是利用了java的反射和动态代理。其中反射用于解析注解，动态代理用于生成代理对象。  </p><p>SpringAOP的底层代理方式有两种，一种是基于java动态代理，一种是基于CGLIB的动态代理。当被代理对象有接口时候优先使用java动态代理，如果被代理对象没有接口的时候，会自动使用CGLIB。一般情况下都推荐使用java动态代理，毕竟是官方的，比较可靠。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><h2 id="主要意图"><a href="#主要意图" class="headerlink" title="主要意图"></a>主要意图</h2><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><h2 id="理解AOP"><a href="#理解AOP" class="headerlink" title="理解AOP"></a>理解AOP</h2><p>1.”横向”扩展什么意思?<br>软件开发可分为”持久层” “业务层” 控制器层”<br>所谓的”横向”就是指上面说到的三个层里的任意一层!<br>使用AOP技术后,用一个方法,就能同时作用与一个层面内所有方法!<br>实例：<br>写日志是一个很好的编程习惯,不用AOP技术的话,我们应该怎么写日志?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"方法a开始执行"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"我是一个方法"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">"方法a执行成功"</span>);</span><br></pre></td></tr></table></figure></p><p>上述是一个很简单的日志.两行代码也不多.<br>可是在真实开发中,面对100个甚至1000个方法时,这样写你会不会被累死?<br>如果用AOP的话,我们用一个方法就可以搞定所有的日志!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"bean(*Service)"</span>)<span class="comment">//指定要监控的bean中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testObject</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123; <span class="comment">//参数的意思是代理执行原软件中的方法</span></span><br><span class="line">System.out.println(jp.getSignature()+<span class="string">"开始执行"</span>); <span class="comment">//在方法执行之前执行</span></span><br><span class="line">Object val = jp.proceed();</span><br><span class="line">System.out.println(jp.getSignature()+<span class="string">"执行成功"</span>);<span class="comment">//在方法执行之后执行</span></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>面向切面编程：AOP（对动态代理的封装）（底层是反射和动态代理）<br>1.开发步骤：<br>  1.导入包：spring-aop (3.2.8)  aspectjweaver(1.8.0)   aspectjtools(1.8.0)<br>  2.开发aop bean 组件 ：<br>   类注解：@component<br>     @Aspect<br>   方法注解：@Before  方法执行前（是sapectj的注解，不是junit的）<br>       @After    方法执行后<br>  3.配置xml<br>   1.配置包扫描：<code>&lt;context:component-scan base-package=&quot;类的全路径&quot;/&gt;</code><br>   2.配置注解生效：<code>&lt;aop:aspectj-autoproxy/&gt;</code></p><p>2.通知：声明AOP方法在目标业务层的执行位置<br> 常用的通知有5种：<br> @Before   前置通知，在目标方法执行之前执行<br> @After    后置通知，在目标方法执行之后执行，无论目标业务方法是否出现异常@After修饰的方法都会执行<br> @AfterThrowing   异常通知，在目标方法执行发生异常之后，会执行@AfterThrowing修饰的方法<br> @AfterReturning   在目标方法正常执行之后，如果没有异常发生，则执行@AfterReturning修饰的方法<br> @Around     万能通知，可以替代其他几个通知，但是使用繁琐</p><p> 执行方法顺序小节：<br> 代理执行<br> try{<br>  @Before        //———-(1)<br>  反射执行目标方法<br>  @AfterReturning   //——–(2)<br> }finally{<br>  @After            //——-(3)<br> }catch(){<br>//@AfterReturning修饰的方法执行在@After之后，并且是执行方法时发生了异常！！！<br>  @AfterThrowing     //———(4)<br> }</p><p> @Around(“bean(userService)”)<br> 1.必须有参数ProceedingJoinPoint   代理连接点<br> 2.必须有返回值 Object<br> 3.必须抛出异常<br> 例：测试业务层的性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"bean(userService)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">long</span> t1 = System.currentTimeMilles();</span><br><span class="line">  Object obj = pjp.proceed();   <span class="comment">//代理连接点继续执行方法,抛出异常</span></span><br><span class="line">  logn t2 = System.currentTimeMilles();</span><br><span class="line">  Signature n = pjp.getSignature();    <span class="comment">//获取方法的签名（Signature导入的包是 org.aspectj.lang.Signature）</span></span><br><span class="line">  System.out.println((t2-t1)+<span class="string">":"</span>+n);    <span class="comment">//输出执行的方法以及执行所用的时间</span></span><br><span class="line">  <span class="keyword">return</span> obj;    <span class="comment">//返回执行结果</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(Throwble e)&#123;</span><br><span class="line">  <span class="keyword">throw</span> e;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.切入点表达式：（bean组件切入点）<br> 语法：<br>    @Before（”bean（suerService）”） //切入到userService的全部方法<br>    @Before(“bean(userService) || bean(cartService)”)  //将两个用或连接，切入两个业务接口<br>    @Before（”bean（<em>Service）”） //切入到Service的全部方法<br>    @Before(“within(cn.tedu.store.userServiceImpl)”)  //等同于  @Before（”bean(userService)”）<br>    //切入类 UserServiceImplement 中声明的全部方法<br>    @Before(“within(cn.tedu.store.service.UserServiceImpl)”)<br>    @Before(“within(cn.tedu.store.service.</em>ServiceImpl)”)<br>    @Before(“within(cn.tedu.store.service..<em>)”)<br>    //切入方法，方法名要通用，规范<br>    @Before(“execution(修饰词 类名.方法名(参数类型))”)<br>    @Before(“execution(</em> cn.tedu.store.service.UserService.login(..))”)<br>    @Before(“execution(<em> cn.tedu.store..</em>Service.login(..))”)<br> 备注：..表示省略，*表示包名</p><p>实例：<br>bean.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把通知类文件交给spring来管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.utils.TransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"session"</span> <span class="attr">ref</span>=<span class="string">"session"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring对注解AOP的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"commit"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"rollback"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@component</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"session"</span>)</span><br><span class="line"><span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pointcut</span>(<span class="string">" execution(* cn.hnust.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 开启事务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">session.beginTransaction();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP介绍&quot;&gt;&lt;a href=&quot;#AOP介绍&quot; class=&quot;headerlink&quot; title=&quot;AOP介绍&quot;&gt;&lt;/a&gt;AOP介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。一句话，面向切面编程,能够让我们在不影响原有功能的前提下,为软件横向扩展功能 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springAOP" scheme="http://lzengp.cn/tags/springAOP/"/>
    
      <category term="面向切面编程" scheme="http://lzengp.cn/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
