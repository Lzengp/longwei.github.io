<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzengp的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lzengp.cn/"/>
  <updated>2018-08-02T01:51:10.243Z</updated>
  <id>http://lzengp.cn/</id>
  
  <author>
    <name>Longwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis学习笔记(一)</title>
    <link href="http://lzengp.cn/2018/08/02/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/08/02/Mybatis学习笔记(一)/</id>
    <published>2018-08-02T01:39:42.000Z</published>
    <updated>2018-08-02T01:51:10.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis是什么"><a href="#mybatis是什么" class="headerlink" title="mybatis是什么"></a>mybatis是什么</h2><blockquote><p>mybatis是一个持久层的框架，是apache下的顶级项目<br>mybatis托管到goolecode下，再后来托管到github下（ <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a> ）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mybatis是什么&quot;&gt;&lt;a href=&quot;#mybatis是什么&quot; class=&quot;headerlink&quot; title=&quot;mybatis是什么&quot;&gt;&lt;/a&gt;mybatis是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;mybatis是一个持久层的框架，是apache下
      
    
    </summary>
    
    
      <category term="mybatis" scheme="http://lzengp.cn/tags/mybatis/"/>
    
      <category term="mapper" scheme="http://lzengp.cn/tags/mapper/"/>
    
      <category term="动态sql" scheme="http://lzengp.cn/tags/%E5%8A%A8%E6%80%81sql/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本三-XML和注解组合式整合，仅保留spring的主配置文件（实际开发中struts2文件也保留）</title>
    <link href="http://lzengp.cn/2018/07/27/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%89)/"/>
    <id>http://lzengp.cn/2018/07/27/SSH三大框架环境搭建(三)/</id>
    <published>2018-07-27T14:39:54.000Z</published>
    <updated>2018-07-27T16:31:32.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本三是在版本一基础上改动，只写改动的地方代码"><a href="#版本三是在版本一基础上改动，只写改动的地方代码" class="headerlink" title="版本三是在版本一基础上改动，只写改动的地方代码"></a>版本三是在版本一基础上改动，只写改动的地方代码</h2><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><blockquote><p>1.改造spring的ioc和aop使用注解。<br>2.改造实体类使用注解映射<br>3.使用注解配置struts2<br>4.关于注解配置action的细节</p></blockquote><a id="more"></a><h2 id="改造spring的ioc和aop使用注解"><a href="#改造spring的ioc和aop使用注解" class="headerlink" title="改造spring的ioc和aop使用注解"></a>改造spring的ioc和aop使用注解</h2><h3 id="修改Service层和Dao层"><a href="#修改Service层和Dao层" class="headerlink" title="修改Service层和Dao层"></a>修改Service层和Dao层</h3><p>Dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span>  <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"hibernateTemplate"</span>)</span><br><span class="line"><span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br></pre></td></tr></table></figure></p><p>Service层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"customerService"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"customerDao"</span>)</span><br><span class="line"><span class="keyword">private</span> ICustomerDao customerDao;</span><br></pre></td></tr></table></figure></p><h3 id="配置spring对注解的支持"><a href="#配置spring对注解的支持" class="headerlink" title="配置spring对注解的支持"></a>配置spring对注解的支持</h3><p>添加下图红色框中的代码，同时把bean的id为customerDao和customerService删掉<br><img src="http://pc57xo61v.bkt.clouddn.com/23.png" alt=""></p><p>把事务通知和aop删除，添加如下代码,开启spring对注解事务的支持<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>在CustomerServiceImpl中添加事务注解<br><img src="http://pc57xo61v.bkt.clouddn.com/24.png" alt=""></p><p>把hibernate.xml配置到bean.xml中来，可参照版本二</p><h2 id="改造实体类使用注解映射"><a href="#改造实体类使用注解映射" class="headerlink" title="改造实体类使用注解映射"></a>改造实体类使用注解映射</h2><p>删除customer.cfg.xml,同时修改实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_name"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br></pre></td></tr></table></figure></p><p>修改原来customer.cfg.xml的路径，这样hibernate也改成了注解<br><img src="http://pc57xo61v.bkt.clouddn.com/25.png" alt=""></p><h2 id="使用注解配置struts2"><a href="#使用注解配置struts2" class="headerlink" title="使用注解配置struts2"></a>使用注解配置struts2</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>struts2-convention-plugin-2.5.16.jar<br>struts2对注解的支持，使用注解的方式代替xml配置action，必须要引用这个包</p><h3 id="配置action"><a href="#配置action" class="headerlink" title="配置action"></a>配置action</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/26.png" alt=""></p><p>在每个方法前面配置@Action(“方法名”)<br><img src="http://pc57xo61v.bkt.clouddn.com/27.png" alt=""></p><p>action用注解配置完成后，就是开启开发者模式配置了，这个要去struts2的过滤器里面配置<br><img src="http://pc57xo61v.bkt.clouddn.com/28.png" alt=""></p><p>struts2.xml也可以删除了。<br>注解版本配置完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本三是在版本一基础上改动，只写改动的地方代码&quot;&gt;&lt;a href=&quot;#版本三是在版本一基础上改动，只写改动的地方代码&quot; class=&quot;headerlink&quot; title=&quot;版本三是在版本一基础上改动，只写改动的地方代码&quot;&gt;&lt;/a&gt;版本三是在版本一基础上改动，只写改动的地方代码&lt;/h2&gt;&lt;h3 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.改造spring的ioc和aop使用注解。&lt;br&gt;2.改造实体类使用注解映射&lt;br&gt;3.使用注解配置struts2&lt;br&gt;4.关于注解配置action的细节&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="注解" scheme="http://lzengp.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="仅留spring" scheme="http://lzengp.cn/tags/%E4%BB%85%E7%95%99spring/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本二：保留struts和spring的配置文件，把hibernate的主配置文件配置到spring配置文件中</title>
    <link href="http://lzengp.cn/2018/07/27/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%BA%8C)/"/>
    <id>http://lzengp.cn/2018/07/27/SSH三大框架环境搭建(二)/</id>
    <published>2018-07-27T12:54:10.000Z</published>
    <updated>2018-07-27T15:52:34.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码"><a href="#版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码" class="headerlink" title="版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码"></a>版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码</h2><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><blockquote><p>1.把hibernate主配置文件的内容配到spring的配置文件中<br>2.手动指定配置文件位置<br>3.分配置文件编写spring和struts2的配置<br>4.HibernateDaoSupport的使用<br>5.优化spring接管Action的创建</p></blockquote><a id="more"></a><h2 id="把hibernate主配置文件的内容配到spring的配置文件中"><a href="#把hibernate主配置文件的内容配到spring的配置文件中" class="headerlink" title="把hibernate主配置文件的内容配到spring的配置文件中"></a>把hibernate主配置文件的内容配到spring的配置文件中</h2><p>修改bean.xml:重命名为applicationContext.xml（不改也行，只是为了好区别spring和整合hibernate的spring）,并添加如下代码,hibernate.xml可以删了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一部分：连接数据库，用连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span> &gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 第三部分：映射文件位置 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- mappingLocation:它是注入一个Resource类型的数组，提供的映射文件的位置，它可以使用通配符 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:cn/hnust/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池 --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>     <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>   <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>    <span class="attr">value</span>=<span class="string">"1997"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="手动指定配置文件位置"><a href="#手动指定配置文件位置" class="headerlink" title="手动指定配置文件位置"></a>手动指定配置文件位置</h2><p>在src下新建两个包config.spring、config.struts,把applicationContext.xml放到config.spring下，struts.xml放到config.struts下，修改web.xml,添加以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>struts-default.xml,struts-plugin.xml,config/struts/struts.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="分配置文件编写spring和struts2的配置"><a href="#分配置文件编写spring和struts2的配置" class="headerlink" title="分配置文件编写spring和struts2的配置"></a>分配置文件编写spring和struts2的配置</h2><h3 id="分配置文件编写spring"><a href="#分配置文件编写spring" class="headerlink" title="分配置文件编写spring"></a>分配置文件编写spring</h3><p>复制application.xml,粘贴到config.spring包下，重命名为applicationContext-customer，删掉其它内容，只保留下面的代码，头文件别删了<br>applicationContext-customer<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和customer相关的配置 --&gt;</span>   </span><br><span class="line">     <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 注入  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">ref</span>=<span class="string">"hibernateTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同理，复制粘贴，再重命名为applicationContext-jdbc，删掉其它的代码，只保留以下代码<br>applicationContext-jdbc<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 第一部分：连接数据库，用连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span> &gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session  </span></span><br><span class="line"><span class="comment">不配置，spring也会把session放到当前线程中,并且一个线程只有一个Session</span></span><br><span class="line"><span class="comment">&lt;prop key="hibernate.current_session_context_class"&gt;thread&lt;/prop&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 第三部分：映射文件位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mappingLocation:它是注入一个Resource类型的数组，提供的映射文件的位置，它可以使用通配符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:cn/hnust/domain/*.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接池 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>     <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssh"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>   <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>    <span class="attr">value</span>=<span class="string">"1997"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再分一个只包含事务的xml<br>applicationContext-tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立切入点表达式和事务通知关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然还可以再分一个aop，但就不展示了，接下来就是整合这三个配置文件了</p><h3 id="整合spring的配置文件"><a href="#整合spring的配置文件" class="headerlink" title="整合spring的配置文件"></a>整合spring的配置文件</h3><p>把applicationContext.xml文件内容全删了，只保留头文件，填入以下代码<br>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 引入其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-customer.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-jdbc.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-tx.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="分配置编写struts文件"><a href="#分配置编写struts文件" class="headerlink" title="分配置编写struts文件"></a>分配置编写struts文件</h3><p>和spring的分配置一样，复制struts.xml，改名为struts-customer，再删除其他的，只保留下面代码，再修改一下代码<br>struts-customer<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"myDefault"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span> &gt;</span></span><br><span class="line">         </span><br><span class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">action</span>&gt;</span> </span><br><span class="line">       </span><br><span class="line">          <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="整合struts的配置文件"><a href="#整合struts的配置文件" class="headerlink" title="整合struts的配置文件"></a>整合struts的配置文件</h3><p>struts.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启开发者模式 ,详细错误提示--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置公共包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myDefault"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 引入其他struts配置文件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"config/struts/struts-customer.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="HibernateDaoSupport的使用"><a href="#HibernateDaoSupport的使用" class="headerlink" title="HibernateDaoSupport的使用"></a>HibernateDaoSupport的使用</h2><p>修改CustomerDaoImpl文件，使其继承HibernateDaoSupport，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span>  <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span>  <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (List&lt;Customer&gt;) getHibernateTemplate().find(<span class="string">"from Customer"</span>);<span class="comment">//HQL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">getHibernateTemplate().save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改applicationContext-customer下的配置dao这段代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时applicationContext-jdbc下的配置hibernateTemplate这段代码也可以删了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="优化spring接管Action的创建"><a href="#优化spring接管Action的创建" class="headerlink" title="优化spring接管Action的创建"></a>优化spring接管Action的创建</h2><p>把struts-customer中class路径改成customerAction，让其映射到spring的配置文件中，去找bean的id<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置动作 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/customer"</span> &gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- class会去bean里面找customerAction --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"addUICustomer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"addUICustomer"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">action</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"findAllCustomer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findAllCustomer"</span>&gt;</span>/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在appliadadlicationContext.xml中添加一下代码，同时修改为多例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置action--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化算是结束了，相对比版本一，版本二虽然也是纯XML版本，但分的更加细，这也方便管理项目，目前我们写的项目代码很少，所以这样细分感觉是多余的，不过，如果实体类不止一个，有很多个，这样细分可以很方便的查找和修改配置文件。在修改的时候，最好别在原来的项目上改，可以再拷贝一个，修改名字，然后再去改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot;&gt;&lt;a href=&quot;#版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot; class=&quot;headerlink&quot; title=&quot;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&quot;&gt;&lt;/a&gt;版本二是在版本一的基础上改动，所以只写增加的代码和修改的代码&lt;/h2&gt;&lt;h3 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.把hibernate主配置文件的内容配到spring的配置文件中&lt;br&gt;2.手动指定配置文件位置&lt;br&gt;3.分配置文件编写spring和struts2的配置&lt;br&gt;4.HibernateDaoSupport的使用&lt;br&gt;5.优化spring接管Action的创建&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="优化" scheme="http://lzengp.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="分配置文件" scheme="http://lzengp.cn/tags/%E5%88%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
      <category term="手动指定位置" scheme="http://lzengp.cn/tags/%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SSH三大框架环境搭建版本一：保留struts2,spring,hibernate各自主配置文件(纯XML整合)</title>
    <link href="http://lzengp.cn/2018/07/25/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/"/>
    <id>http://lzengp.cn/2018/07/25/SSH三大框架环境搭建(一)/</id>
    <published>2018-07-25T09:42:49.000Z</published>
    <updated>2018-07-27T23:27:45.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>SSH是 struts+spring+hibernate的一个集成框架，是目前比较流行的一种Web应用程序开源框架。<br>集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的Web应用程序。其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持，Spring做管理，管理struts和hibernate。具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的Java对象，然后编写基本的DAO(Data Access Objects)接口，并给出Hibernate的DAO实现，采用Hibernate架构实现的DAO类来实现Java类与数据库之间的转换和访问，最后由Spring做管理，管理struts和hibernate。<br>地址：<a href="https://github.com/Lzengp/SSH-1" target="_blank" rel="noopener">项目完整代码</a></p></blockquote><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>在搭建SSH三大框架环境时，要严格按照以下步骤执行：<br>第一步:保证spring的ioc容器能够在web工程中独立运行<br>第二步：保证hibernate框架能够在web工程中独立运行<br>第三步：整合spring和hibernate(spring接管了hibernate的sessionFactory对象创建(把sessionFactory存入spring容器中)，使用了spring的声明事务控制)<br>第四步：保证struts2框架能够在web工程中独立运行<br>第五步：整合spring和struts2（action的创建交给spring来管理，保证web工程中的容器只有一个）<br>第六步：优化已有的整合配置<br>配置文件的位置存放可以调整<br>配置文件的内容可以分不同的文件编写</strong></p><h2 id="第一步-保证spring的ioc容器能够在web工程中独立运行"><a href="#第一步-保证spring的ioc容器能够在web工程中独立运行" class="headerlink" title="第一步:保证spring的ioc容器能够在web工程中独立运行"></a>第一步:保证spring的ioc容器能够在web工程中独立运行</h2><h3 id="创建实体类、业务层、持久层"><a href="#创建实体类、业务层、持久层" class="headerlink" title="创建实体类、业务层、持久层"></a>创建实体类、业务层、持久层</h3><p>创建实体类Customer:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.domain;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custId = custId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custName = custName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> custPhone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [custId="</span> + custId + <span class="string">", custName="</span> + custName + <span class="string">", custSource="</span> + custSource</span><br><span class="line">+ <span class="string">", custIndustry="</span> + custIndustry + <span class="string">", custLevel="</span> + custLevel + <span class="string">", custAddress="</span> + custAddress + <span class="string">", custPhone="</span> + custPhone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建业务层接口ICustomerService:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建业务层实现类CustomerServiceImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户业务层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line"><span class="comment">//创建一个set方法，等待SpringIoC注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">customerDao.saveCustomer(customer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建持久层接口ICustomerDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建持久层实现类CustomerDaoImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现了查询客户列表"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/1.png" alt="spring的IoC基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/2.png" alt="spring的AOP基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/3.png" alt="spring的事务控制jar包"></p><h3 id="在类路径下创建bean-xml"><a href="#在类路径下创建bean-xml" class="headerlink" title="在类路径下创建bean.xml"></a>在类路径下创建bean.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">      <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注入  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试spring的ioc环境是否可以</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Spring</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">    cs.findAllCustomer();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/4.png" alt="输出结果"></p><h2 id="第二步-保证hibernate框架能够在web项目中独立运行"><a href="#第二步-保证hibernate框架能够在web项目中独立运行" class="headerlink" title="第二步:保证hibernate框架能够在web项目中独立运行"></a>第二步:保证hibernate框架能够在web项目中独立运行</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/5.png" alt="hibernate基本jar包"></p><p><img src="http://pc57xo61v.bkt.clouddn.com/6.png" alt="C3P0基本jar包"></p><h3 id="在domain下新建一个Customer-cfg-xml"><a href="#在domain下新建一个Customer-cfg-xml" class="headerlink" title="在domain下新建一个Customer.cfg.xml"></a>在domain下新建一个Customer.cfg.xml</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/7.png" alt="Customer.cfg.xml"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.hnust.domain"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类与数据库中的表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定实体类中的实体和数据库中的名称 ,id为自增--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"custId"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指向本地数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custName"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custSource"</span> <span class="attr">column</span>=<span class="string">"cust_source"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custIndustry"</span> <span class="attr">column</span>=<span class="string">"cust_industry"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custLevel"</span> <span class="attr">column</span>=<span class="string">"cust_level"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custAddress"</span> <span class="attr">column</span>=<span class="string">"cust_address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"custPhone"</span> <span class="attr">column</span>=<span class="string">"cust_phone"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>头文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure></p><p>它的位置如下图所示<br><img src="http://pc57xo61v.bkt.clouddn.com/8.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/9.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/10.png" alt=""></p><h3 id="在类路径下创建hiberbnate-cfg-xml"><a href="#在类路径下创建hiberbnate-cfg-xml" class="headerlink" title="在类路径下创建hiberbnate.cfg.xml"></a>在类路径下创建hiberbnate.cfg.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- 在类路径下创建名称为hibernate.cfg.xml的配置文件</span></span><br><span class="line"><span class="comment">导入约束：dtd约束</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SessionFactory </span></span><br><span class="line"><span class="comment">SessionFactory的作用就是创建Session对象</span></span><br><span class="line"><span class="comment">Session对象就是hibernate中操作数据库的核心对象</span></span><br><span class="line"><span class="comment">第一部分:</span></span><br><span class="line"><span class="comment">连接数据库的信息</span></span><br><span class="line"><span class="comment">第二部分：</span></span><br><span class="line"><span class="comment">hibernate的可选配置</span></span><br><span class="line"><span class="comment">第三部分：</span></span><br><span class="line"><span class="comment">映射文件的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一部分：连接数据库的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>1997<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二部分：hibernate的可选配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否显示hibernate生成的SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否使用格式化输出sql语句到控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置hibernate采用何种方式生成DDL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL结构化查询语句：一共分为6个部分 </span></span><br><span class="line"><span class="comment">DDL:Date Definition Language</span></span><br><span class="line"><span class="comment">DML:Data Manipulation Language</span></span><br><span class="line"><span class="comment">DQL:Data Query Language</span></span><br><span class="line"><span class="comment">DCL:Date Control Language 数据控制语言</span></span><br><span class="line"><span class="comment">CCL:Cursor Control Language 游标控制语言</span></span><br><span class="line"><span class="comment">TPL:Transaction Processing Language 事务处理语言</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- update表示检测实体类的映射配置和数据库的表结构是否一致，如果不一致，更新表结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置hibernate的连接池提供商 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把session和线程绑定，从而实现一个线程只有一个Session  </span></span><br><span class="line"><span class="comment">可以不配置，spring也会把session放到当前线程中,并且一个线程只有一个Session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三部分：映射配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/hnust/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>头文件的位置在上图dtd文件的上面</p><p><img src="http://pc57xo61v.bkt.clouddn.com/11.png" alt=""></p><p><img src="http://pc57xo61v.bkt.clouddn.com/12.png" alt=""></p><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Hibernate能否独立运行在web项目中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Hibernate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">c.setCustName(<span class="string">"ssh整合Customer"</span>);</span><br><span class="line"><span class="comment">//1.加载配置文件</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br><span class="line"><span class="comment">//2.根据配置文件创建SessionFactory</span></span><br><span class="line">SessionFactory factory =  cfg.buildSessionFactory();</span><br><span class="line"><span class="comment">//3.获取session</span></span><br><span class="line">Session session = factory.getCurrentSession();</span><br><span class="line"><span class="comment">//4.开启事务</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">//5.执行操作</span></span><br><span class="line">session.save(c);</span><br><span class="line"><span class="comment">//6.提交/回滚事务</span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">factory.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/13.png" alt=""></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/14.png" alt=""><br>（id设置成自增的，之前测试了几组数据，所以是id是14）</p><p>结果分析:出现Session was already closed的错误<br>原因：如果获取session的方法是openSession(),关闭session的时候必须是session.close()<br>如果session获取通过getCurrentSession()获得的Session提交时自动关闭，其不用再session.close(),如果再调用session.close().其相当于session关闭两次所以会出现Session was already closed异常<br>解决:把session.close();注释掉就不会出现这个错误，不过不注释掉也不影响，结果是对的</p><h3 id="一些自己大意犯下的错误"><a href="#一些自己大意犯下的错误" class="headerlink" title="一些自己大意犯下的错误"></a>一些自己大意犯下的错误</h3><p>1.出现<code>java.persistence.sharedcachemode：java.persistence.sharedcachemode</code><br>原因:导错了包，”hibernate-jpa-2.0-api-1.0.1.Final.jar”(这个也是错的，第五个问题就是这个)，是这个包，<br>我导入了一个”hibernate-jpa-2.0-api-1.0.1.Final.source.jar”<br>2.<code>Caused by: org.hibernate.boot.registry.selector.spi.StrategySelectionException: Unable to resolve name [org.hibernate.dialect.MySOLDialect] as strategy [org.hibernate.dialect.Dialect]</code><br>原因：Hibernate.cfg.xml中MYSQLDialect写错了，写成了MySOLDialect<br>3.导入java web项目，项目出现红叉而其他地方没有红叉的问题解决方法<br>导入别人的Java web项目时会出现这种情况：仅项目名出现红叉而其他地方没有红叉的问题。这可能是以下几种 情况导致的，其解决方法如下：</p><p>(1)导入项目之前，请确认工作空间编码已设置为utf-8：window-&gt;Preferences-&gt;General-&gt;Wrokspace-&gt;Text file encoding-&gt;Other 选择UTF-8。<br>(2)导入后，由于你的开发环境中JRE以及Tomcat Library名称可能和源代码中的不一致，可能会出现Build Path的错误， 解决方法如下：右键project-&gt;Build Path-&gt;Configure Build Path-&gt;选择Libraries tab页-&gt;删除带小红叉的Library-&gt;点击Add Library-&gt;选择JRE System Library(删了Tomcat Library的话就选择Server Runtime)-&gt;选择一个JRE后-&gt;Finish。<br>(3)进入项目包下的.settings目录，找到org.eclipse.wst.common.project.facet.core.xml文件，用记事本打开后才发现这句话有问题：runtime name=”Apache Tomcat v6.0”。我eclipse中设置的tomcat是7.0版本的，而它的运行环境是6.0版本的tomcat,肯定会出现问题。于是把这句话删掉</p><p>我出现红叉的情况是第二种，我删了一个jar包，但Library中还有这个包的奶瓶就会报错</p><p>4.<code>javax.persistence.NamedStoredProcedureQuery</code><br>原因：一定要”hibernate-jpa-2.1-api-1.0.0.Final.jar”,”hibernate-jpa-2.0-api-1.0.1.Final.jar”不行<br>5.<code>A ResourcePool could not acquire a resource from its primary factory or source.</code><br>无法连接到数据库，检测发现<code>&lt;property name=&quot;hibernate.connection.usernamer&quot;&gt;root&lt;/property&gt;</code>Username中多写了一个r</p><h2 id="第三步-整合spring和hibernate"><a href="#第三步-整合spring和hibernate" class="headerlink" title="第三步:整合spring和hibernate"></a>第三步:整合spring和hibernate</h2><h3 id="修改CustomerDaoImpl"><a href="#修改CustomerDaoImpl" class="headerlink" title="修改CustomerDaoImpl"></a>修改CustomerDaoImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.HibernateTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HibernateTemplate替我们封装了s.save(u);之前和之后的代码，交给我们一个接口，</span></span><br><span class="line"><span class="comment">我们去填中间的事务(save等)就行了。这样写程序就会比较方</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> HibernateTemplate  hibernateTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHibernateTemplate</span><span class="params">(HibernateTemplate hibernateTemplate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hibernateTemplate = hibernateTemplate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询所有客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//HQL是Hibernate Query Language的缩写，提供更加丰富灵活、更为强大的查询能力；HQL更接近SQL语句查询语法。</span></span><br><span class="line"><span class="keyword">return</span> (List&lt;Customer&gt;) hibernateTemplate.find(<span class="string">"from Customer"</span>);<span class="comment">//HQL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">hibernateTemplate.save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改bean-xml-添加的内容"><a href="#修改bean-xml-添加的内容" class="headerlink" title="修改bean.xml(添加的内容)"></a>修改bean.xml(添加的内容)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">ref</span>=<span class="string">"hibernateTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置hibernateTemplate --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hibernateTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!-- 配置sessionFactory:spring接管sessionFactory的创建</span></span><br><span class="line"><span class="comment">     用spring提供的一个SessionFactory：LocalSessionFactoryBean</span></span><br><span class="line"><span class="comment">     创建SessionFactory有三部分必不可少的信息。三部分信息在hibernat主配置文件都有</span></span><br><span class="line"><span class="comment">     把hibernate主配置文件注入进来</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- classpath:告知它为根的类路径下 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事物管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立切入点表达式和事务通知关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h3><p>使用spring和Junit的整合测试<br>需要导入的jar包<br><img src="http://pc57xo61v.bkt.clouddn.com/15.png" alt=""></p><p>Test03SpringHibernate:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring和hibernate整合测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations= &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03SpringHibernate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//自动注入</span></span><br><span class="line"><span class="keyword">private</span> ICustomerService cs;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">c.setCustName(<span class="string">"Spring H123"</span>);</span><br><span class="line">cs.saveCustomer(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Customer&gt; list = cs.findAllCustomer();</span><br><span class="line"><span class="keyword">for</span>(Object o :list) &#123;</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>testSave<br><img src="http://pc57xo61v.bkt.clouddn.com/16.png" alt=""></p><p>testFindAll<br><img src="http://pc57xo61v.bkt.clouddn.com/17.png" alt=""></p><h3 id="spring的声明事务控制"><a href="#spring的声明事务控制" class="headerlink" title="spring的声明事务控制"></a>spring的声明事务控制</h3><p>Spring与Hibernate整合之后，Spring提供了更为强大和易用的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。比如Spring3只需要利用@Transactional注释在业务方法上就可以了，这样做到了去除多余的事务语句，只保留业务方法。</p><p>关于Spring的事务，不仅仅少写tx.commit这么简单，Spring另一个比Hibernate事务强大的地方在于它的事务传播性和隔离性</p><p>Spring的事务传播分为7种<br>PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。 </p><p>Spring事务隔离分为4个等级<br>1、Serializable：最严格的级别，事务串行执行，资源消耗最大；<br>2、REPEATABLE READ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。<br>3、READ COMMITTED:大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。<br>4、Read Uncommitted：保证了读取过程中不会读取到非法数据。隔离级别在于处理多事务的并发问题。<br>我们知道并行可以提高数据库的吞吐量和效率，但是并不是所有的并发事务都可以并发运行，这需要查看数据库教材的可串行化条件判断了。 </p><p>另外Spring与Hibernate等框架整合后还能提供read-only来提高性能</p><h3 id="一些自己粗心犯下的错误"><a href="#一些自己粗心犯下的错误" class="headerlink" title="一些自己粗心犯下的错误"></a>一些自己粗心犯下的错误</h3><p>1.<code>java.lang.IllegalStateException: Failed to load ApplicationContextCaused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &#39;hibernateTemplate&#39; is defined</code><br>原因:在配置dao和配置hibernateTemplate中hibernateTemplate名字写错了<br>2.<code>Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &#39;hibernateTemplate&#39; of bean class [cn.hnust.dao.impl.CustomerDaoImpl]: Bean property &#39;hibernateTemplate&#39; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?</code><br>原因:’hibernateTemplate’ 没注入,也就是没生成set方法<br>3.<code>node to traverse cannot be null!</code><br>HQL语句错误,from写成了form，from后面的不是表名，而是你在Customer.cfg.xml中定义的名字</p><h2 id="第四步-保证struts2框架能在web工程中运行"><a href="#第四步-保证struts2框架能在web工程中运行" class="headerlink" title="第四步:保证struts2框架能在web工程中运行"></a>第四步:保证struts2框架能在web工程中运行</h2><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SSH<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置struts2和核心过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个action类"><a href="#创建一个action类" class="headerlink" title="创建一个action类"></a>创建一个action类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04Struts</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Struts已经调用此方法"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类路径下新建一个struts-xml"><a href="#类路径下新建一个struts-xml" class="headerlink" title="类路径下新建一个struts.xml"></a>类路径下新建一个struts.xml</h3><p>头文件在struts2-core-2.3.24.jar奶瓶里面，最下面的struts-2.3.dtd文件里面<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">   <span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">      "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">      "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- action标签是配置的action，name是访问时的路径，class是映射的类，如果没有method，</span></span><br><span class="line"><span class="comment">  默认找class中的execute方法，指定method属性时，回去找class中method对应值得方法，</span></span><br><span class="line"><span class="comment"> result标签定义返回的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"struts2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.test.Test04Struts"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>在浏览器输入localhost:8080/SSH/index</p><p><img src="http://pc57xo61v.bkt.clouddn.com/18.png" alt=""></p><p>控制台结果</p><p><img src="http://pc57xo61v.bkt.clouddn.com/19.png" alt=""></p><h2 id="第五步-整合spring和struts2"><a href="#第五步-整合spring和struts2" class="headerlink" title="第五步:整合spring和struts2"></a>第五步:整合spring和struts2</h2><h3 id="新建一个list-jsp"><a href="#新建一个list-jsp" class="headerlink" title="新建一个list.jsp"></a>新建一个list.jsp</h3><p>直接用EL表达式获取action里面的值，然后用foreach遍历集合<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span>  uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;查询&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">查询结果:</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;customers&#125;"</span> var=<span class="string">"cust"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line"> &lt;td&gt;$&#123;cust.custId&#125;&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;$&#123;cust.custName&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><p><img src="http://pc57xo61v.bkt.clouddn.com/20.png" alt=""></p><h3 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h3><p>在web.xml文件加入下面代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring提供的监听器，用于监听servletContext对象创建，同时为我们创建spring的容器</span></span><br><span class="line"><span class="comment">默认情况下：它只能加载位置是在WEB-INF目录中的spring配置文件，同时文件名称必须是applicationContext.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--更改路径为类路径下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:bean.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置动作"><a href="#配置动作" class="headerlink" title="配置动作"></a>配置动作</h3><p>在struts文件中添加一下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启开发者模式 ,详细错误提示--&gt;</span><br><span class="line">       &lt;constant name="struts.devMode" value="true"&gt;&lt;/constant&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;!-- 配置动作 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"customer"</span> extends=<span class="string">"struts-default"</span> namespace=<span class="string">"/customer"</span> &gt;</span><br><span class="line">          </span><br><span class="line">           &lt;action name=<span class="string">"addUICustomer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> method=<span class="string">"addUICustomer"</span>&gt;</span><br><span class="line">               &lt;result name="addUICustomer"&gt;/add.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt; </span><br><span class="line">        </span><br><span class="line">           &lt;action name=<span class="string">"findAllCustomer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.hnust.web.action.CustomerAction"</span> method=<span class="string">"findAllCustomer"</span>&gt;</span><br><span class="line">               &lt;result name="findAllCustomer"&gt;/list.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt;</span><br><span class="line">           </span><br><span class="line">       &lt;/package&gt;</span><br></pre></td></tr></table></figure></p><h3 id="客户动作类CustomerAction"><a href="#客户动作类CustomerAction" class="headerlink" title="客户动作类CustomerAction"></a>客户动作类CustomerAction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户动作类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"><span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"><span class="keyword">private</span> ICustomerService customerService;</span><br><span class="line"><span class="comment">//setters和getters方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomers</span><span class="params">(List&lt;Customer&gt; customers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customers = customers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerService</span><span class="params">(ICustomerService customerService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerService = customerService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用业务层查询客户列表</span></span><br><span class="line">customers = customerService.findAllCustomer();</span><br><span class="line">ServletActionContext.getRequest().setAttribute(<span class="string">"customers"</span>,customers);<span class="comment">//存入域对象</span></span><br><span class="line">System.out.println(customers);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"findAllCustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取添加客户页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUICustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"addUICustomer"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>在浏览器输入localhost:8080/SSH/customer/findAllCustomer.action</p><p><img src="http://pc57xo61v.bkt.clouddn.com/21.png" alt=""></p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>1.<img src="http://pc57xo61v.bkt.clouddn.com/22.png" alt=""><br>原因:没有在struts.xml的action中注明对应的方法，写上method=”findAllCustomer”即可，如果写了之后出现了404，重启一下Eclipse</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>篇幅有点长，其实spring的单独测试在之前的文章已经写过了，这里还是啰嗦了一遍，<br>现在基本上每天看视频学习，然后总结，感觉还算不错。写一下博客也算是复习一下。<br>然后总结下SSH框架，配置文件很多，感觉就是想少写代码，减少耦合，spring的声明式控制真的做到了这点，看见有重复的代码都可以提取出来，增加了配置文件，精简了代码。strtus2需要配置两个xml，一个是本来就有的web.xml,要在里面写一个过滤器，然后就新建一个struts.xml，里面主要写一些action具体的操作，spring需要新建一个bean.xml，里面写一些映射，不再用new创建一个对象，最主要有注解和set注入。而aop切面编程主要的作用就是纵向控制流程，就一个切面，好比有几条流程，而在这几条流程之间有一些共性，就可以把这一些共性看成是一个切面，这样就可以提取出来统一管理（<a href="https://www.cnblogs.com/Wolfmanlq/p/6036019.html" target="_blank" rel="noopener">轻松理解AOP思想</a>）。反正感觉spring真的就是想能用配置文件写的尽量用配置文件写，用外部来管理内部。hibernate是用来操作数据库的，要建两个配置文件(在我的测试的这个项目中）一个用来联系实体类和数据库中数据的关系（Customer.cfg.xml），一个用来连接数据库，然后就是约束，映射(hibernate.xml)。听说Mybatis也很不错，到时也去学一些，还有<a href="https://www.cnblogs.com/baiduligang/p/4247164.html" target="_blank" rel="noopener">spring MVC</a>，<a href="https://www.cnblogs.com/ityouknow/p/5662753.html" target="_blank" rel="noopener">spring boot</a>,<a href="https://blog.csdn.net/wuxiaobingandbob/article/details/78642020?locationNum=1&amp;fps=1" target="_blank" rel="noopener">微服务</a>等等，路还很远。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SSH是 struts+spring+hibernate的一个集成框架，是目前比较流行的一种Web应用程序开源框架。&lt;br&gt;集成SSH框架的系统从职责上分为四层：表示层、业务逻辑层、数据持久层和域模块层，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的Web应用程序。其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分，控制业务跳转，利用Hibernate框架对持久层提供支持，Spring做管理，管理struts和hibernate。具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的Java对象，然后编写基本的DAO(Data Access Objects)接口，并给出Hibernate的DAO实现，采用Hibernate架构实现的DAO类来实现Java类与数据库之间的转换和访问，最后由Spring做管理，管理struts和hibernate。&lt;br&gt;地址：&lt;a href=&quot;https://github.com/Lzengp/SSH-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目完整代码&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://lzengp.cn/tags/spring/"/>
    
      <category term="hibernate" scheme="http://lzengp.cn/tags/hibernate/"/>
    
      <category term="struts2" scheme="http://lzengp.cn/tags/struts2/"/>
    
      <category term="环境搭建" scheme="http://lzengp.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记(三)之Spring AOP</title>
    <link href="http://lzengp.cn/2018/07/24/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)%E4%B9%8BSpring%20AOP/"/>
    <id>http://lzengp.cn/2018/07/24/Spring学习笔记(三)之Spring AOP/</id>
    <published>2018-07-23T16:00:00.000Z</published>
    <updated>2018-07-25T00:47:35.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h2><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。一句话，面向切面编程,能够让我们在不影响原有功能的前提下,为软件横向扩展功能 </p></blockquote><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SpringAOP 底层是Aspectj，在底层是利用了java的反射和动态代理。其中反射用于解析注解，动态代理用于生成代理对象。  </p><p>SpringAOP的底层代理方式有两种，一种是基于java动态代理，一种是基于CGLIB的动态代理。当被代理对象有接口时候优先使用java动态代理，如果被代理对象没有接口的时候，会自动使用CGLIB。一般情况下都推荐使用java动态代理，毕竟是官方的，比较可靠。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><h2 id="主要意图"><a href="#主要意图" class="headerlink" title="主要意图"></a>主要意图</h2><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><h2 id="理解AOP"><a href="#理解AOP" class="headerlink" title="理解AOP"></a>理解AOP</h2><p>1.”横向”扩展什么意思?<br>软件开发可分为”持久层” “业务层” 控制器层”<br>所谓的”横向”就是指上面说到的三个层里的任意一层!<br>使用AOP技术后,用一个方法,就能同时作用与一个层面内所有方法!<br>实例：<br>写日志是一个很好的编程习惯,不用AOP技术的话,我们应该怎么写日志?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"方法a开始执行"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"我是一个方法"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">"方法a执行成功"</span>);</span><br></pre></td></tr></table></figure></p><p>上述是一个很简单的日志.两行代码也不多.<br>可是在真实开发中,面对100个甚至1000个方法时,这样写你会不会被累死?<br>如果用AOP的话,我们用一个方法就可以搞定所有的日志!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"bean(*Service)"</span>)<span class="comment">//指定要监控的bean中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testObject</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123; <span class="comment">//参数的意思是代理执行原软件中的方法</span></span><br><span class="line">System.out.println(jp.getSignature()+<span class="string">"开始执行"</span>); <span class="comment">//在方法执行之前执行</span></span><br><span class="line">Object val = jp.proceed();</span><br><span class="line">System.out.println(jp.getSignature()+<span class="string">"执行成功"</span>);<span class="comment">//在方法执行之后执行</span></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>面向切面编程：AOP（对动态代理的封装）（底层是反射和动态代理）<br>1.开发步骤：<br>  1.导入包：spring-aop (3.2.8)  aspectjweaver(1.8.0)   aspectjtools(1.8.0)<br>  2.开发aop bean 组件 ：<br>   类注解：@component<br>     @Aspect<br>   方法注解：@Before  方法执行前（是sapectj的注解，不是junit的）<br>       @After    方法执行后<br>  3.配置xml<br>   1.配置包扫描：<code>&lt;context:component-scan base-package=&quot;类的全路径&quot;/&gt;</code><br>   2.配置注解生效：<code>&lt;aop:aspectj-autoproxy/&gt;</code></p><p>2.通知：声明AOP方法在目标业务层的执行位置<br> 常用的通知有5种：<br> @Before   前置通知，在目标方法执行之前执行<br> @After    后置通知，在目标方法执行之后执行，无论目标业务方法是否出现异常@After修饰的方法都会执行<br> @AfterThrowing   异常通知，在目标方法执行发生异常之后，会执行@AfterThrowing修饰的方法<br> @AfterReturning   在目标方法正常执行之后，如果没有异常发生，则执行@AfterReturning修饰的方法<br> @Around     万能通知，可以替代其他几个通知，但是使用繁琐</p><p> 执行方法顺序小节：<br> 代理执行<br> try{<br>  @Before        //———-(1)<br>  反射执行目标方法<br>  @AfterReturning   //——–(2)<br> }finally{<br>  @After            //——-(3)<br> }catch(){<br>//@AfterReturning修饰的方法执行在@After之后，并且是执行方法时发生了异常！！！<br>  @AfterThrowing     //———(4)<br> }</p><p> @Around(“bean(userService)”)<br> 1.必须有参数ProceedingJoinPoint   代理连接点<br> 2.必须有返回值 Object<br> 3.必须抛出异常<br> 例：测试业务层的性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"bean(userService)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">long</span> t1 = System.currentTimeMilles();</span><br><span class="line">  Object obj = pjp.proceed();   <span class="comment">//代理连接点继续执行方法,抛出异常</span></span><br><span class="line">  logn t2 = System.currentTimeMilles();</span><br><span class="line">  Signature n = pjp.getSignature();    <span class="comment">//获取方法的签名（Signature导入的包是 org.aspectj.lang.Signature）</span></span><br><span class="line">  System.out.println((t2-t1)+<span class="string">":"</span>+n);    <span class="comment">//输出执行的方法以及执行所用的时间</span></span><br><span class="line">  <span class="keyword">return</span> obj;    <span class="comment">//返回执行结果</span></span><br><span class="line"> &#125;<span class="keyword">catch</span>(Throwble e)&#123;</span><br><span class="line">  <span class="keyword">throw</span> e;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.切入点表达式：（bean组件切入点）<br> 语法：<br>    @Before（”bean（suerService）”） //切入到userService的全部方法<br>    @Before(“bean(userService) || bean(cartService)”)  //将两个用或连接，切入两个业务接口<br>    @Before（”bean（<em>Service）”） //切入到Service的全部方法<br>    @Before(“within(cn.tedu.store.userServiceImpl)”)  //等同于  @Before（”bean(userService)”）<br>    //切入类 UserServiceImplement 中声明的全部方法<br>    @Before(“within(cn.tedu.store.service.UserServiceImpl)”)<br>    @Before(“within(cn.tedu.store.service.</em>ServiceImpl)”)<br>    @Before(“within(cn.tedu.store.service..<em>)”)<br>    //切入方法，方法名要通用，规范<br>    @Before(“execution(修饰词 类名.方法名(参数类型))”)<br>    @Before(“execution(</em> cn.tedu.store.service.UserService.login(..))”)<br>    @Before(“execution(<em> cn.tedu.store..</em>Service.login(..))”)<br> 备注：..表示省略，*表示包名</p><p>实例：<br>bean.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把通知类文件交给spring来管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.utils.TransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"session"</span> <span class="attr">ref</span>=<span class="string">"session"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring对注解AOP的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.hnust.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"commit"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"rollback"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@component</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"session"</span>)</span><br><span class="line"><span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pointcut</span>(<span class="string">" execution(* cn.hnust.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 开启事务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">session.beginTransaction();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP介绍&quot;&gt;&lt;a href=&quot;#AOP介绍&quot; class=&quot;headerlink&quot; title=&quot;AOP介绍&quot;&gt;&lt;/a&gt;AOP介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。一句话，面向切面编程,能够让我们在不影响原有功能的前提下,为软件横向扩展功能 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="springAOP" scheme="http://lzengp.cn/tags/springAOP/"/>
    
      <category term="面向切面编程" scheme="http://lzengp.cn/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记(二)之Spring IoC</title>
    <link href="http://lzengp.cn/2018/07/23/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%E4%B9%8BSpring%20IoC/"/>
    <id>http://lzengp.cn/2018/07/23/Spring学习笔记(二)之Spring IoC/</id>
    <published>2018-07-23T09:52:26.000Z</published>
    <updated>2018-07-23T14:08:11.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IoC介绍"><a href="#IoC介绍" class="headerlink" title="IoC介绍"></a>IoC介绍</h2><blockquote><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。<br>IOC（inversion of control）控制反转模式；控制反转是将组件间的依赖关系从程序内部提到外部来管理；<br>DI（dependency injection）依赖注入模式；依赖注入是指将组件的依赖通过外部以参数或其他形式注入；<br>两个说法本质上是一个意思。</p></blockquote><a id="more"></a><h2 id="spring的依赖注入"><a href="#spring的依赖注入" class="headerlink" title="spring的依赖注入"></a>spring的依赖注入</h2><ul><li>注入的方式有三种：<ul><li>第一种：使用构造函数注入</li><li>第二种：使用set方法注入</li><li>第三种：使用注解注入</li></ul></li><li>注入的数据类型有三种：<ul><li>第一类：基本类型和String类型</li><li>第二类：其他bean类型（必须是在spring的配置文件中出现过的bean）</li><li>第三类：复杂类型（集合类型）  </li></ul></li></ul><h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><ul><li>设计的标签：constructor-arg</li><li>标签属性：<ul><li>type：指定参数的类型</li><li>index：指定参数的索引位置，从0开始</li><li>name：指定参数的名称<br>（上面三个属性是指定给哪个参数赋值，下面两个属性是指定赋什么值的）</li><li>value:指定基本数据类型或String类型的数据</li><li>ref：指定其他bean类型的数据</li></ul></li><li>标签出现的位置:<ul><li>写在bean标签内部  </li></ul></li></ul><p>实例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"today"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h3><ul><li>涉及标签：property</li><li>标签属性：<ul><li>name：指定参数的set方法名称</li><li>value：指定基本数据类型或String类型的数据</li><li>ref：指定其他bean类型数据</li></ul></li><li>标签出现的位置:<ul><li>写在bean标签内部  </li></ul></li></ul><p>实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>bean.xml:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h3><p>结构相同，标签可以互换  </p><p>实例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService3"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">&lt;entry key="testD" value="DDD"&lt;/entry&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testE"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testF"</span> <span class="attr">value</span>=<span class="string">"FFF"</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="使用注解注入"><a href="#使用注解注入" class="headerlink" title="使用注解注入"></a>使用注解注入</h3><pre><code>xml：&lt;bean id=&quot;customerService&quot; class=&quot;cn.hnsut.serivec.impl.CustomerServiceImpl&quot;&gt;</code></pre><p>1.用于创建bean对象</p><ul><li>@Component<ul><li>作用:就相当于配置一个bean标签</li><li>它出现的位置：类上面</li><li>属性：value，含义是指定bean的id，当不写时，它有默认值，默认值是：当前类的短名首字母改小写</li></ul></li><li>由此注解衍生的三个注解：<ul><li>@Controller        一般用于表现的注解</li><li>@Service         一般用于业务层</li><li>@Repository     一般用于持久层<br>他们和@Component的作用及属性都是一模一样  </li></ul></li></ul><p>bean.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>  <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 告知spring在创建容器时要扫描的包，当配置了此标签之后，spring创建容器就去找指定的包及其子包下找对应的注解，标签是在一个context的名称空间里，所以必须先导入context名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.用于注入数据的</p><ul><li>@Autowired<ul><li>作用：自动按照类型注入，只要有唯一的类型匹配就能注入成功</li><li>如果注入的bean在容器中类型不唯一时，它就会把变量名称作为bean的id，在容器中查找，找到后也能注入成功</li><li>如果没有找到一致的bean的id，则报错</li><li>当我们使用注解注入时，set方法就不是必须的了</li></ul></li><li>@Qualifier<ul><li>作用：在自动按照类型注入的基础上，再按照bean的id注入，它在给类成员注入数据时，不能独立使用，但是在给方法的形参注入数据时，可以独立使用</li><li>属性:value:用于指定bean的id</li></ul></li><li>@Resoure<ul><li>作用：直接按照bean的id注入</li><li>属性:name:用于指定bean的id</li></ul></li></ul><p><em>以上三个注解都是用于注入其他bean类型的。用于注入基本类型和String类型的要使用</em></p><ul><li>value<ul><li>作用:用于注入基本类型和String类型的数据，它可以借助String的el表达式读取properties文件中的值</li><li>属性:value:用于指定要注入的数据</li></ul></li></ul><p>3.用于改变作用范围的</p><ul><li>@Scope<ul><li>作用：用于改变bean的作用范围</li><li>属性:value:用于指定范围的值</li><li>取值和xml中的scope属性的取值是一样的（singleton、prototype、request、session、globasession）  </li></ul></li></ul><p><em>记住@Component、@Resource、@Value、@Scope</em></p><p>4.spring的新注解</p><ul><li>@Bean<ul><li>作用：它是把方法的返回值存放spring容器中，改注解有一个属性，name：用于指定bean的id。当不指定时它的默认值就是方法名称</li></ul></li></ul><h3 id="spring整合JUnit"><a href="#spring整合JUnit" class="headerlink" title="spring整合JUnit"></a>spring整合JUnit</h3><p>第一步：拷贝spring提供的整合jar包<br>    spring-test-4.2.4.RELEASE.jar<br>第二步：使用JUnit提供的一个注解，把原有的main函数替换掉，换成spring提供的<br>    @RunWith<br>    要换的类:SpringJunit4ClassRunner<br>第三步：使用spring提供的注解告知spring，配置文件或者注解类所在的位置<br>    @ContextConfiguration<br>（注意：SpringJUnit4ClassRunner要JUnit5才能用，不然报错<br>1.可能刚加进去的包为加载到，需要到重构配置窗口中重新加载下所有包，一般eclipse自带的是junit4.4版本的。<br>2.第二种原因是spring不支持junit4.5一下的版本。所以只需要把junit4.4或者更低版本升级到更高就ok了）<br>实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试客户的业务层</span></span><br><span class="line"><span class="comment"> * Spring整合Junit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations= &#123;<span class="string">"classpath:bean.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"customerService"</span>)</span><br><span class="line"><span class="comment">//private ICustomerService cs = new CustomerServiceImpl();</span></span><br><span class="line"><span class="keyword">private</span> ICustomerService cs;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line"><span class="comment">//ICustomerService cs = (ICustomerService) ac.getBean("customerService");</span></span><br><span class="line">List&lt;Customer&gt; list = cs.findAllCustomer();</span><br><span class="line"><span class="keyword">for</span>(Customer c : list) &#123;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring在创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hnust"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="一个完整的例子：测试spring的IoC容器在web工程中独立运行（XML版）"><a href="#一个完整的例子：测试spring的IoC容器在web工程中独立运行（XML版）" class="headerlink" title="一个完整的例子：测试spring的IoC容器在web工程中独立运行（XML版）"></a>一个完整的例子：测试spring的IoC容器在web工程中独立运行（XML版）</h3><p>Service接口层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的业务层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Service实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户业务层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line"><span class="comment">//创建一个set方法，等待SpringIoC注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerDao</span><span class="params">(ICustomerDao customerDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> customerDao.findAllCustomer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">customerDao.saveCustomer(customer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Dao接口层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Dao实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.dao.ICustomerDao;</span><br><span class="line"><span class="keyword">import</span> cn.hnust.domain.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户持久层实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"实现了查询客户列表"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnust.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnust.service.ICustomerService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试spring的ioc环境是否可以</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lw</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Spring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br><span class="line">cs.findAllCustomer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>bean.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">      <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注入  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"cn.hnust.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://pc57xo61v.bkt.clouddn.com/jieguo.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IoC介绍&quot;&gt;&lt;a href=&quot;#IoC介绍&quot; class=&quot;headerlink&quot; title=&quot;IoC介绍&quot;&gt;&lt;/a&gt;IoC介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。&lt;br&gt;IOC（inversion of control）控制反转模式；控制反转是将组件间的依赖关系从程序内部提到外部来管理；&lt;br&gt;DI（dependency injection）依赖注入模式；依赖注入是指将组件的依赖通过外部以参数或其他形式注入；&lt;br&gt;两个说法本质上是一个意思。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring" scheme="http://lzengp.cn/tags/spring/"/>
    
      <category term="注解" scheme="http://lzengp.cn/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="IoC" scheme="http://lzengp.cn/tags/IoC/"/>
    
      <category term="依赖注入" scheme="http://lzengp.cn/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记(一)之Bean的创建</title>
    <link href="http://lzengp.cn/2018/07/21/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%E4%B9%8BBean%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://lzengp.cn/2018/07/21/Spring学习笔记(一)之Bean的创建/</id>
    <published>2018-07-20T16:00:00.000Z</published>
    <updated>2018-07-23T13:44:05.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h2><blockquote><p>Spring是分层的JavaSE/EB应用full-stack轻量级开源框架，以IoC（Inverse Of Contorl：反转控制）和AOP（Aspert Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业级应用开源框架。</p></blockquote><a id="more"></a><h2 id="前面知识"><a href="#前面知识" class="headerlink" title="前面知识"></a>前面知识</h2><p>1.程序耦合就是程序之间的依赖关系，也是调用者和被调用者的依赖关系</p><p>2.JDBC连接mysql数据库能导入com.mysql.jdbc.Connection包吗？<br>能，但要强转，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">Connection conn = (Connection)DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/dataname"</span>,<span class="string">"user"</span>,<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure></p><p>但如果数据库换成其他的就要改源码，这是非常不友好的行为，所以要用java.sql.Connection包</p><p>3.开发中遵循：编译时不依赖，运行时才依赖<br>解决依赖关系：使用反射创建类对象<br>反射的应用是很广泛的，像Hibernate、Spring中都是用“反射”做为最基本的技术手段。<br>使用反射创建对象引发的新问题：    使用配置文件，通过读取配置文件反射来创建对象</p><p>4.读取配置文件properties<br>（1）读取文件时，一般用到类加载器，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Properties props = <span class="keyword">null</span>;</span><br><span class="line">InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">"bean.properties"</span>);</span><br><span class="line">props.load(in);</span><br></pre></td></tr></table></figure></p><p>（2）用输入流读取文件不行的原因：<br><code>InputStream in = new FileInputStream(&quot;src/bean.properties&quot;);</code><br>编译运行没错，但为什么不这样用？因为如果工程发布到服务器上，就没有src这个文件夹了，所以会抛出文件路径找不到的错误。</p><p>（3）用ResourceBundle读取：<br><code>private static ResourceBundle bundle = ResourceBundle.getBundle(&quot;bean&quot;);</code><br>(1).它只能用于读取properties文件，别的文件读取不了<br>(2).它只能用于读取，不能用于写入<br>(3).它只能读取类路径下的，不在类路径读取不了<br>注意：方法参数的写法是按照包名.类名的方式下写的，所以请不要写扩展名</p><p>5.不用new一个对象，解决依赖关系<br>原：<code>private ICustomerDao customerDao = new CustomerDaoImpl();</code><br>改：<code>private ICustomerDao customerDao = (ICustomer) BeanFactory.getBean(&quot;CUSTOMERDAO&quot;);</code></p><h2 id="Bean的创建"><a href="#Bean的创建" class="headerlink" title="Bean的创建"></a>Bean的创建</h2><p>1.读取xml文件<br>ClassPathXmlApplicationContext:它是只能加载类路径下的配置文件（我们用这个）<br>实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">ICustomerService cs = (ICustomerService) ac.getBean(<span class="string">"customerServicer"</span>);</span><br></pre></td></tr></table></figure></p><p>FileSystemXmlApplicationContext:它是可以加载磁盘任意位置的配置文件</p><p>2.Bean创建的两种规则</p><ul><li>BeanFactory:<ul><li>提供的是一种延迟加载思想来创建bena对象，bean对象什么时候用什么时候创建</li></ul></li><li>ApplicationContext：<ul><li>提供的是一种立即加载思想来创建bean对象。只要一解析完配置文件，就立马创建bean对象。</li></ul></li></ul><p>3.Bean的三种创建方式</p><ul><li><p>第一种方式：调用默认无参构造函数创建（此方式用的最多）</p><ul><li>默认情况下，如果类中没有默认无参构造函数，则创建失败，会报异常</li></ul></li><li><p>第二张方式：使用静态工厂中的方法创建对象</p><ul><li>需要使用bean标签的factory-mothod属性，指定静态工厂中创建对象方法</li></ul></li><li><p>第三种方式：使用实例工厂的方法创建</p></li></ul><p>4.Bean的作用范围</p><ul><li>它是可以通过配置的方式来调整作用范围</li><li>配置的属性:bean标签的scope属性</li><li>属性的取值：<ul><li>singleton：单例的（默认值）</li><li>prototype：多例的（当我们让spring接管struts2的action创建时，action必须配置此值）</li><li>request：作用范围是一次请求，和当前请求的转发</li><li>session：作用范围是一次会话</li><li>globalsession：作用范围是一次全局对话<br>5.Bean的生命周期：</li></ul></li><li>涉及bean标签的两个属性：<ul><li>init-method</li><li>destory-method</li></ul></li><li>单例：<ul><li>出生：容器创建。对象就出生了</li><li>活着：只要容器在，对象就一直存在</li><li>死亡：容器销毁，对象消亡</li></ul></li><li>多例：<ul><li>出生：每次使用，创建对象</li><li>活着：只要对象在使用中，就一直活着</li><li>死亡：当对象长时间不使用，并且也没有别的对象引用时，由java的垃圾回收器回收</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring介绍&quot;&gt;&lt;a href=&quot;#Spring介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring介绍&quot;&gt;&lt;/a&gt;Spring介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring是分层的JavaSE/EB应用full-stack轻量级开源框架，以IoC（Inverse Of Contorl：反转控制）和AOP（Aspert Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业级应用开源框架。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring介绍" scheme="http://lzengp.cn/tags/spring%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="Bean创建" scheme="http://lzengp.cn/tags/Bean%E5%88%9B%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo+github搭建博客遇到的问题</title>
    <link href="http://lzengp.cn/2018/07/20/%E5%85%B3%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://lzengp.cn/2018/07/20/关于hexo-github搭建博客遇到的问题/</id>
    <published>2018-07-20T01:29:22.000Z</published>
    <updated>2018-07-20T11:25:58.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于hexo+github搭建自己的博客网上有很多介绍，我就不再介绍了，文章底部我推荐了一些网站给大家，我现在就提出关于我安装过程中出现的问题以及自己的一些看法。</p><a id="more"></a><h3 id="Git的问题"><a href="#Git的问题" class="headerlink" title="Git的问题"></a>Git的问题</h3><p>1.安装git之后，打开git base，弹出下图最上面的文字，正常的是不会弹出这些的，然后输入git命令，发现命令也不能用（Git版本：windows版Git-2.18.0-64-bit）<br><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/13600188.jpg" alt="1.png"><br>说我没有C:/Program，的确没有，但我新建一个这样的文件之后再启动git base还是一样的，并且在再次开启电脑时还会弹出<br>【您的计算机上有名为“C:\Program”的文件或文件夹，该文件或文件夹将使某些应用程序工作不正常。将其更名为“C:\Program1”可以解决此问题。现在是否进行重命名？】<br>只有删到或更改名字才不会弹出这个<br>感觉是不是版本问题，下载了一个2.15版本的还是一样问题，试了下32位的问题还是一样的，基本排除了Git的版本的问题，我又在其他的电脑安装却没一点问题，不知道自己电脑怎么了，百度上也查不到<br>环境变量它自己帮我配置好了<br><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/61600081.jpg" alt="2.png"><br>命令提示符里面也可以使用git命令，说明git应该安装好了，只是git base用不了<br><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/36841979.jpg" alt="header.png"><br> 解决办法：老老实实的win+R输入cmd，进入hexo的安装根目录，然后的操作就和打开git base的操作一样了。</p><h3 id="Nodejs回滚"><a href="#Nodejs回滚" class="headerlink" title="Nodejs回滚"></a>Nodejs回滚</h3><p>Nodejs安装就一直next，不过我再安装时出现了回滚，就是它帮你安装完成之后会删掉安装的文件，然后和没安装是一样的，这就尴尬了</p><p><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/53006494.jpg" alt="header.png"><br> 解决办法：下载windows Binary与npm配置好环境变量<br>第一步<br>下载windows Binary ,进入官网就可以下载了,下载回来的是一个带exe后缀文件安装文件。<br>第二步<br> 官网下载npm文件最好选择最新的下载不然会出现版本问题（<a href="http://nodejs.org/dist/npm/" target="_blank" rel="noopener">下载地址</a>）<br>第三步<br>解压npm文件后会生成node_modules文件与npm.cmd指令文件,把刚刚下载的node.exe也放在同个目录，后就配置你的环境变量</p><p><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/14820964.jpg" alt="header.png"><br>选择环境变量,新建一个变量名为:NODEJS_PATH与NODEJS_MODULE，NODEJS_PATH指定的是我本地的nodejs目录，NODEJS_MODULE指定的是node_modules目录,在变量值是：：F:\Program Files\nodejs\node_modules<br>好了现在我们把环境变量配好！现在对nodejs进行安装<br>第四步<br>1.安装express打开cmd命令行，使用命令定位到node_modules目录下,输入指令npm install express, 注意可以使用别外两种安装方法，express【安装express 至相对路径】或 npm install express -g【安装express到绝对路径】</p><p><img src="http://pc57xo61v.bkt.clouddn.com/18-7-20/56936248.jpg" alt="header.png"></p><p>2.输入node -v 如果能显现出版本号就表示安装成功</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>不懂就百度，这句话还真的好用，实在不行就去翻墙，也是不错的。可能搭建的博客在Github上，而Github是国外的，本身有时访问比较慢，所以有时候进自己的博客要好久。<br>推荐几个网站,也方便自己以后有问题了也可以看看他们的：</p><p><a href="http://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">Hexo+Github搭建自己博客</a></p><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo使用文档</a><br>不过记住几个基本的命令就行了<br>hexo clean  删除，把public文件删除<br>hexo new 博客标题（<code>hexo n</code>）新建一篇文章<br>hexo generate（<code>hexo g</code>）生成静态文件<br>hexo server (<code>hexo s</code>) 启动服务，默认情况下，访问网址为：<code>http://localhost:4000</code>，如果端口被占可以输入 (<code>hexo s -p 端口号</code>)<br>hexo deploy（<code>hexo d</code>）部署网站，也可以生成与部署一起（<code>hexo g -d</code>）<br>当年hexo s启动服务时，然后输入localhost:4000查看时，你可以在本地更改，然后保存，再刷新网页，就可以实时预览了。</p><p><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">换电脑之后怎么使用Hexo</a></p><p><a href="https://www.jianshu.com/p/0130ad32a08d" target="_blank" rel="noopener">Markdown语法入门</a><br>本人是用Sublime Text 3来写的,感觉还不错,注意一下符号问题，中文符号是不能识别的</p><p><a href="http://xiaweizi.cn/article/31905/" target="_blank" rel="noopener">hexo博客小功能添加-评论、相册、字数统计</a><br>关于评论功能yilia主题里面有很多，1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment，但唯独没配置来必力，多说和网易云跟帖关闭了，畅言还要备案，其他两个没研究，就按照博主注册了来必力，毕竟国外的，加载有点慢,并且登录官网也很慢。</p><p><a href="https://blog.csdn.net/qq_36305327/article/details/71578290" target="_blank" rel="noopener">七牛上传图片制作外链</a><br>关于上传图片问题，用七牛做图床也不错，毕竟Github Pages空间有限，之前傻不拉几的用QQ空间生成的图片放到博客里面来，结果第一天还好好的，第二天就出现不能转载，听说微博也可做图床，自己没试过，当然也要把图片备份一下，最好不过。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;关于hexo+github搭建自己的博客网上有很多介绍，我就不再介绍了，文章底部我推荐了一些网站给大家，我现在就提出关于我安装过程中出现的问题以及自己的一些看法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gitbase不能用" scheme="http://lzengp.cn/tags/gitbase%E4%B8%8D%E8%83%BD%E7%94%A8/"/>
    
      <category term="nodejs回滚" scheme="http://lzengp.cn/tags/nodejs%E5%9B%9E%E6%BB%9A/"/>
    
      <category term="实用的网站" scheme="http://lzengp.cn/tags/%E5%AE%9E%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Navicat安装与破解</title>
    <link href="http://lzengp.cn/2018/07/19/Navicat%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3/"/>
    <id>http://lzengp.cn/2018/07/19/Navicat安装与破解/</id>
    <published>2018-07-19T13:29:25.000Z</published>
    <updated>2018-07-20T08:46:04.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>建数据库这种东西还是有个可视化界面好一点，之前在命令提示符里面敲真的看的头晕，所以下载了一个SQLyog，后来用了这款Navicat，体验感不错，然后就抛弃旧爱安装了这个。</p><a id="more"></a><h3 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h3><p>去<a href="http://www.navicat.com.cn/products" target="_blank" rel="noopener">官网</a>下载Navicat 12 for MySQ<br>如果想下载中文版的请先选CN，如下图，不然默认下载的是英文版的！<br><img src="/img/1.png" alt="1.png">  </p><p>再点击免费试用</p><p><img src="/img/2.png" alt="2.png"></p><p>选择版本点击下载  </p><p><img src="/img/3.png" alt="3.png"></p><p>下载好之后点击安装就可以了</p><h3 id="二、破解"><a href="#二、破解" class="headerlink" title="二、破解"></a>二、破解</h3><p>下载破解工具，<a href="https://pan.baidu.com/s/1lfmBwKrtaak605bSX7v_rw" target="_blank" rel="noopener">百度云链接</a><br>密码：iab5 （如果失效，可以联系我或自行百度！）<br>下载好之后解压可以看见这几个文件</p><p><img src="/img/4.png" alt="4.png"></p><p>然后选择简体中文64位（你自己下的版本）打开可以看见两个文件 </p><p><img src="/img/5.png" alt="5.png"></p><p>全选复制到Navicat安装目录下 </p><p><img src="/img/6.png" alt="6.png"></p><p>然后打开Navicat，会发现变成了下图的样子</p><p><img src="/img/7.png" alt="7.png"></p><p>虽然提示只有14天，但过期日期已经变了，并且每次打开都提示还有14天，可以不用管它了，直接点击使用<br>第一次打开会弹出这个，不用关系，点击确定，之后打开就不会弹出来了</p><p><img src="/img/8.png" alt="8.png"></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这些都是我在网上找的，win10亲测可以用，只是每次打开都要点击试用，不过满足当下的学习还是够了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;建数据库这种东西还是有个可视化界面好一点，之前在命令提示符里面敲真的看的头晕，所以下载了一个SQLyog，后来用了这款Navicat，体验感不错，然后就抛弃旧爱安装了这个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Navicat" scheme="http://lzengp.cn/tags/Navicat/"/>
    
      <category term="破解" scheme="http://lzengp.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lzengp.cn/2018/07/17/hello-world/"/>
    <id>http://lzengp.cn/2018/07/17/hello-world/</id>
    <published>2018-07-17T14:22:31.897Z</published>
    <updated>2018-07-17T16:37:49.029Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
